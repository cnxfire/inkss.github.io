<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>城市天际线基础 MOD</title>
      <link href="/blog/728c42d9/"/>
      <url>/blog/728c42d9/</url>
      
        <content type="html"><![CDATA[<div class="gallery stretch" col='1' data-group='one'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/C4C5D29A4D48DB5E6B432ED1408933CA4C0E574E.png' data-fancybox='one' data-caption=''><img fancybox src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/C4C5D29A4D48DB5E6B432ED1408933CA4C0E574E.png" alt=""></a>              </div></p></div><div class="gallery stretch" col='3' data-group='two'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/539A45A47942697C5A84EEC73CC038A63AD4AE31.png' data-fancybox='two' data-caption=''><img fancybox src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/539A45A47942697C5A84EEC73CC038A63AD4AE31.png" alt=""></a>              </div></p><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/604E165FD36B31677ED366F01117BDCF584995C0.png' data-fancybox='two' data-caption=''><img fancybox src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/604E165FD36B31677ED366F01117BDCF584995C0.png" alt=""></a>              </div></p><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/EDDD14D616403277A442A7C068186E26B6EF541A.png' data-fancybox='two' data-caption=''><img fancybox src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/EDDD14D616403277A442A7C068186E26B6EF541A.png" alt=""></a>              </div></p></div><div class="gallery stretch" col='2' data-group='three'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/85462FD710E47C2896E290F2A031F7CF8848B33D.png' data-fancybox='three' data-caption=''><img fancybox src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/85462FD710E47C2896E290F2A031F7CF8848B33D.png" alt=""></a>              </div></p><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/A7AD45971684D899AF9080933BA53434FFB2B70C.png' data-fancybox='three' data-caption=''><img fancybox src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/A7AD45971684D899AF9080933BA53434FFB2B70C.png" alt=""></a>              </div></p></div><div class="gallery stretch" col='1' data-group='four'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/48F8A1FBF1679BA6ABF33F56762996D72F88F700.png' data-fancybox='four' data-caption=''><img fancybox src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/48F8A1FBF1679BA6ABF33F56762996D72F88F700.png" alt=""></a>              </div></p></div><h2 id="一、前言">一、前言</h2><p>本文定位：记录一下基础的打底性质的 MOD，主要以功能性 MOD 为主，资产类的按照个人喜欢因人而异了，我会在列表中放入各个订阅的介绍、地址、展示等。另：同等功能下会尽可能的寻找汉化 MOD 。</p><h2 id="二、MOD-列表">二、MOD 列表</h2><h3 id="Remove-Need-For-Power-Lines">Remove Need For Power Lines</h3><div class="tabs" id="572888650"><ul class="nav-tabs"><li class="tab active"><a class="#572888650-1">简介</a></li><li class="tab"><a class="#572888650-2">订阅</a></li><li class="tab"><a class="#572888650-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="572888650-1"><p>This mod removes the need for power lines.This mod works simply by storing the energy produced in a small buffer and then distributing it to buildings that consume it.</p><hr><p>移除游戏对电力线的需求，不需要拉各种电线啦。</p></div><div class="tab-pane" id="572888650-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=572888650">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2277862292">订阅地址</a></p></div><div class="tab-pane" id="572888650-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/572888650_preview_2015-12-10_00002.jpg" alt=""></p></div></div></div><h3 id="Remove-Need-For-Pipes">Remove Need For Pipes</h3><div class="tabs" id="576997275"><ul class="nav-tabs"><li class="tab active"><a class="#576997275-1">简介</a></li><li class="tab"><a class="#576997275-2">订阅</a></li><li class="tab"><a class="#576997275-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="576997275-1"><p>This mod removes the need to place pipes all over your city.This mod works simply by storing the water, sewage and heating produced in small, separate (of course), buffers and then distributing it to buildings that consume each of those resources.</p><hr><p>移除管道（水管、热水管）的需求，PS：供水口、排水口还是需要连接的。</p></div><div class="tab-pane" id="576997275-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=576997275">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2277881221">订阅地址</a></p></div><div class="tab-pane" id="576997275-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/576997275_preview_2015-12-16_00001.jpg" alt=""></p></div></div></div><h3 id="Mod-Achievement-Enabler">Mod Achievement Enabler</h3><div class="tabs" id="407055819"><ul class="nav-tabs"><li class="tab active"><a class="#407055819-1">简介</a></li><li class="tab"><a class="#407055819-2">订阅</a></li></ul><div class="tab-content"><div class="tab-pane active" id="407055819-1"><p>This mod enables achievements when other mods are running! The little trophy icon that shows you whether achievements are enabled when you load the save will still be crossed out, but when the game loads, this mod simply changes a boolean value that turns achievements back on.</p><hr><p>在开启 MOD 订阅的同时，可以继续获得成就，聊胜于无啦。</p></div><div class="tab-pane" id="407055819-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=407055819">订阅地址</a></p></div></div></div><h3 id="Unlock-All-Wonders-Landmarks">Unlock All + Wonders &amp; Landmarks</h3><div class="tabs" id="458519223"><ul class="nav-tabs"><li class="tab active"><a class="#458519223-1">简介</a></li><li class="tab"><a class="#458519223-2">订阅</a></li><li class="tab"><a class="#458519223-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="458519223-1"><p>This mod unlocks all from beginning, including all Wonders (a.k.a. Monuments ), Unique Buildings Levels I-VI, European biome Landmarks, (if you have Deluxe Edition) Deluxe Edition Landmarks + DLC specific unique buildings and monuments. It also unlocks all Progression Milestones.</p><hr><p>顾名思义，解锁所有奇观、独特建筑、进程里程碑，做任务什么的还是挺麻烦的。</p></div><div class="tab-pane" id="458519223-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=458519223">订阅地址</a></p></div><div class="tab-pane" id="458519223-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/458519223_preview_Cities_2017-10-21_19-33-17.jpg" alt=""></p></div></div></div><h3 id="First-Person-Camera">First Person Camera</h3><div class="tabs" id="650805785"><ul class="nav-tabs"><li class="tab active"><a class="#650805785-1">简介</a></li><li class="tab"><a class="#650805785-2">订阅</a></li></ul><div class="tab-content"><div class="tab-pane active" id="650805785-1"><p>An update of nlight’s First-person camera! See your city from a different perspective. Explore the game in first-person mode or look through the eyes of any citizen or vehicle.</p><hr><p>可以以第一人称浏览整个城市。</p></div><div class="tab-pane" id="650805785-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=650805785">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1892205219">订阅地址</a></p></div></div></div><h3 id="Resize-It">Resize It!</h3><div class="tabs" id="1577882296"><ul class="nav-tabs"><li class="tab active"><a class="#1577882296-1">简介</a></li><li class="tab"><a class="#1577882296-2">订阅</a></li><li class="tab"><a class="#1577882296-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1577882296-1"><p>This mod allows to resize the scrollable panels in-game to match your style of play.</p><hr><p>可以根据个人喜好调整游戏中滚动面板的大小，便于选取。</p></div><div class="tab-pane" id="1577882296-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1577882296">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1894299113">订阅地址</a></p></div><div class="tab-pane" id="1577882296-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/B27B8ADBE834E45455147AFC32921D14F21608C6.png" alt=""></p></div></div></div><h3 id="Bulldoze-It">Bulldoze It!</h3><div class="tabs" id="1627986403"><ul class="nav-tabs"><li class="tab active"><a class="#1627986403-1">简介</a></li><li class="tab"><a class="#1627986403-2">订阅</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1627986403-1"><p>This mod allows to automate the bulldozing of buildings. In this mod it can be configured whether abandoned, burned down, collapsed or flooded buildings should be automatically bulldozed and also in which interval and even how many buildings per interval. It is also possible to preserve historical buildings and to ignore search for survivors by a disaster response unit before bulldozing.</p><hr><p>自动铲平破旧的建筑，可配置。</p></div><div class="tab-pane" id="1627986403-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1627986403">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1894296637">订阅地址</a></p></div></div></div><h3 id="Move-It">Move It</h3><div class="tabs" id="1619685021"><ul class="nav-tabs"><li class="tab active"><a class="#1619685021-1">简介</a></li><li class="tab"><a class="#1619685021-2">订阅</a></li><li class="tab"><a class="#1619685021-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1619685021-1"><p>This mod allows you to select, move and align various things.</p><hr><p>造景用 MOD 之一，可以对城市外观做出更精致的修改，需要两个前置依赖，自带中文。</p></div><div class="tab-pane" id="1619685021-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1619685021">订阅地址</a></p></div><div class="tab-pane" id="1619685021-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/1619685021_preview_Workshop-screenshot-deeheks.jpg" alt=""></p></div></div></div><h3 id="Watch-It">Watch It!</h3><div class="tabs" id="1643902284"><ul class="nav-tabs"><li class="tab active"><a class="#1643902284-1">简介</a></li><li class="tab"><a class="#1643902284-2">订阅</a></li><li class="tab"><a class="#1643902284-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1643902284-1"><p>This mod allows to watch status of the important capacities in the game.</p><hr><p>内置的面板功能用处不但，但是可以查看一些限量数据，比如查看当前城市的停车场是否够用。</p></div><div class="tab-pane" id="1643902284-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1643902284">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1898084870">订阅地址</a></p></div><div class="tab-pane" id="1643902284-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/8F6F5874FDB3BF5045FA0CE792206572C4DECADF.png" alt=""></p></div></div></div><h3 id="Find-It">Find It!</h3><div class="tabs" id="2133885971"><ul class="nav-tabs"><li class="tab active"><a class="#2133885971-1">简介</a></li><li class="tab"><a class="#2133885971-2">订阅</a></li><li class="tab"><a class="#2133885971-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="2133885971-1"><p>This mod allows you to search, select, and place assets. It also provides some extra info.</p><hr><p>一款造景必备的 MOD ，可以在地图上摆放各种小组件，自带汉化。</p></div><div class="tab-pane" id="2133885971-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2133885971">订阅地址</a></p></div><div class="tab-pane" id="2133885971-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/837734529_preview_tuto.jpg" alt=""></p></div></div></div><h3 id="Hide-It">Hide It!</h3><div class="tabs" id="1591417160"><ul class="nav-tabs"><li class="tab active"><a class="#1591417160-1">简介</a></li><li class="tab"><a class="#1591417160-2">订阅</a></li><li class="tab"><a class="#1591417160-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1591417160-1"><p>This mod allows to hide unwanted things in the game.</p><hr><p>隐藏不需要的页面元素，也包括一些污染，体积云等。</p></div><div class="tab-pane" id="1591417160-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1591417160">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1894297972">订阅地址</a></p></div><div class="tab-pane" id="1591417160-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/0EFEE2390CE67AEFF2D32724CD37F0204AA0A53B.png" alt=""></p></div></div></div><h3 id="Monitor-It">Monitor It!</h3><div class="tabs" id="1804882663"><ul class="nav-tabs"><li class="tab active"><a class="#1804882663-1">简介</a></li><li class="tab"><a class="#1804882663-2">订阅</a></li><li class="tab"><a class="#1804882663-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1804882663-1"><p>This mod allows to monitor system resources and performance.</p><hr><p>提供一个监控面板：FPS，CPU，GPU，时间，日期和游戏时间。</p></div><div class="tab-pane" id="1804882663-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1804882663">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1897310477">订阅地址</a></p></div><div class="tab-pane" id="1804882663-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/15DD0379C44141AEB3C8AF351278D1E86683571E.png" alt=""></p></div></div></div><h3 id="Purchase-It">Purchase It!</h3><div class="tabs" id="1612287735"><ul class="nav-tabs"><li class="tab active"><a class="#1612287735-1">简介</a></li><li class="tab"><a class="#1612287735-2">订阅</a></li><li class="tab"><a class="#1612287735-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1612287735-1"><p>This mod allows to purchase any of the 25 tiles anytime.</p><hr><p>允许购买所有的 25 个格子，甚至是不相邻的格子（考虑到性能问题，不推荐全解锁的 81 格子）。</p></div><div class="tab-pane" id="1612287735-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1612287735">订阅地址</a></p></div><div class="tab-pane" id="1612287735-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/EFCFAD232B29C0DDA67E5128B7B1A9935F3A7BC5.png" alt=""></p></div></div></div><h3 id="Roundabout-Builder">Roundabout Builder</h3><div class="tabs" id="1625704117"><ul class="nav-tabs"><li class="tab active"><a class="#1625704117-1">简介</a></li><li class="tab"><a class="#1625704117-2">订阅</a></li><li class="tab"><a class="#1625704117-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1625704117-1"><p>This mod automatically builds roundabouts for you. It clears the area of the roads and snaps them onto the roundabout.</p><hr><p>非常方便的建造环形道路交叉口。</p></div><div class="tab-pane" id="1625704117-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1625704117">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1895912123">订阅地址</a></p></div><div class="tab-pane" id="1625704117-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/0EC373DCFA0A18BCE48515C64051893196390093.png" alt=""></p></div></div></div><h3 id="Fine-Road-Tool">Fine Road Tool</h3><div class="tabs" id="1844442251"><ul class="nav-tabs"><li class="tab active"><a class="#1844442251-1">简介</a></li><li class="tab"><a class="#1844442251-2">订阅</a></li><li class="tab"><a class="#1844442251-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1844442251-1"><p>This mod allow you to set finer road elevation steps and also provides different building modes.</p><hr><p>精细化道路工具，这个模组可让您设定更精细的道路高程步骤，并提供不同的建筑模式。</p></div><div class="tab-pane" id="1844442251-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1844442251">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1895440521">订阅地址</a></p></div><div class="tab-pane" id="1844442251-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/60200946D4AEE4FE0E910E89E2881E24B3237E52.png" alt=""></p></div></div></div><h3 id="Fine-Road-Anarchy">Fine Road Anarchy</h3><div class="tabs" id="1844440354"><ul class="nav-tabs"><li class="tab active"><a class="#1844440354-1">简介</a></li><li class="tab"><a class="#1844440354-2">订阅</a></li><li class="tab"><a class="#1844440354-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1844440354-1"><p>This mod adds additional options when building road.Basically Sharp Junction Angles but compatible with Fine Road Tool and better behavior when anarchy enabled.</p><hr><p>该mod在建造道路时添加了其他选项。基本上具有锐利的交角，但与Fine Road Tool兼容，并且在启用无秩序状态时具有更好的行为。</p></div><div class="tab-pane" id="1844440354-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1844440354">订阅地址</a></p><p>汉化：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1895443005">订阅地址</a></p></div><div class="tab-pane" id="1844440354-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/B92D6D13B851A06B24662BDE02E0154AE2830509.png" alt=""></p></div></div></div><h3 id="Precision-Engineering">Precision Engineering</h3><div class="tabs" id="445589127"><ul class="nav-tabs"><li class="tab active"><a class="#445589127-1">简介</a></li><li class="tab"><a class="#445589127-2">订阅</a></li><li class="tab"><a class="#445589127-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="445589127-1"><p>Precision Engineering augments Cities: Skylines by adding angle snapping, guidelines and additional information to assist you when building roads, train lines, pipes and power lines.</p><hr><p>在建造道路时，拥有更精准的角度和长度提示。</p></div><div class="tab-pane" id="445589127-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=445589127">订阅地址</a></p></div><div class="tab-pane" id="445589127-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/445589127_preview_branching.png" alt=""></p></div></div></div><h3 id="Customize-It">Customize It!</h3><div class="tabs" id="1369729955"><ul class="nav-tabs"><li class="tab active"><a class="#1369729955-1">简介</a></li><li class="tab"><a class="#1369729955-2">订阅</a></li><li class="tab"><a class="#1369729955-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1369729955-1"><p>This mod lets you change those inside the game, while also exposing some that are not even available to edit in the asset editor.</p><hr><p>可以修改各种建筑的需求，必须电力啊，噪音啊，污染啊，支出啊什么的，比如把警局修改外拥有 100 辆警车，把某些需要用电的建筑的用电需求修改为 0、开销修改为 0 等。</p><p>关于中文，插件本身携带了中文汉化，但是有一些问题没有现实出来，建议将 <code>simplified-chinese.xml</code> 文件中的内容替换到 <code>english.xml</code> 中即可正常现实。 相关路径：<code>steamapps\workshop\content\255710\1369729955\Locale</code> 。</p></div><div class="tab-pane" id="1369729955-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1369729955">订阅地址</a></p></div><div class="tab-pane" id="1369729955-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/image-20210713133348405-1626154431811.png" alt=""></p></div></div></div><h3 id="TM-PE-V11-STABLE">TM:PE V11 STABLE</h3><div class="tabs" id="1637663252"><ul class="nav-tabs"><li class="tab active"><a class="#1637663252-1">简介</a></li><li class="tab"><a class="#1637663252-2">订阅</a></li><li class="tab"><a class="#1637663252-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1637663252-1"><p>Improve lane and parking usage. and customise junctions, roads, and rails!⠀⠀</p><hr><p>一个非常强大的 MOD ，可以对天际线里的交通状况做出很大的改善。</p></div><div class="tab-pane" id="1637663252-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1637663252">订阅地址</a></p></div><div class="tab-pane" id="1637663252-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/1637663252_preview_slideshow.png" alt=""></p></div></div></div><h3 id="Loading-Screen-Mod">Loading Screen Mod</h3><div class="tabs" id="667342976"><ul class="nav-tabs"><li class="tab active"><a class="#667342976-1">简介</a></li><li class="tab"><a class="#667342976-2">订阅</a></li><li class="tab"><a class="#667342976-3">展示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="667342976-1"><p>此mod在加载屏幕上显示信息并添加新选项：加载使用过的资产：无论是否启用，都会加载您所在城市使用的资产。</p><hr><p>在我看来最大的用处是可以导出加载 MOD 时的报告，查清冲突、缺失等。</p></div><div class="tab-pane" id="667342976-2"><p>原版：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=667342976">订阅地址</a></p></div><div class="tab-pane" id="667342976-3"><p><img src="../../img/article/%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9F%BA%E7%A1%80MOD/667342976_preview_1.jpg" alt=""></p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Steam </tag>
            
            <tag> Cities: Skylines </tag>
            
            <tag> 创意工坊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛域名解析配置：从 Nginx 到 CDN</title>
      <link href="/blog/e7617c8b/"/>
      <url>/blog/e7617c8b/</url>
      
        <content type="html"><![CDATA[<p>首先，七一快乐哇~ 热烈庆祝建党一百周年的说~ <span class="rem2"><svg class="iconfont" aria-hidden="true"><use xlink:href="#icon-jr-qiyijiandangjie"></use></svg></span></p><p>有段时间没更新文章了，最近处理了一个泛域名解析的问题，于此记录。背景是这样的，最近陆续在服务器上部署应用服务，为了方便起见，大都使用了 Docker 部署。由于不想过多的开放端口，所以打算通过 Nginx 反代进行访问，那么就有两种选择，二级域名/子目录，之前的亲身经历告诉我使用子目录区别应用绝对是大坑，不是所有的程序都能正确区分绝对/相对链接，用二级域才是最正确的选择。</p><p>在使用二级域访问的过程中倍感麻烦，需要确定二级域名，然后去 DNS 处新建解析，再在宝塔面板处新建网站，整个流程相当冗余无趣，仅仅为了反代一个地址还需要建立一堆的网站，真是太不优雅了。既然提出了问题那么就去解决它：理所应当的，想到了泛域名解析，统一使用一处网站配置。</p><br><div class="note quote"><p><strong>本文共包含以下内容：</strong></p><ul><li>Nginx 泛域名解析</li><li>根据 subdomain 匹配反代地址</li><li>防止恶意泛域名解析</li><li>BasicAuth 的认证校验</li><li>宝塔面板的反代访问</li><li>泛域名 SSL 证书申请</li><li>泛域名 CDN 分发、</li><li>泛域名证书的自部署</li></ul></div><h2 id="一、Nginx-侧配置">一、Nginx 侧配置</h2><p><em>关于 DNS 的泛域名解析此处不做重点，在云服务商的控制台配置一下就好。</em></p><p>首先是在宝塔新建一个泛域名网站？大概是吧，虽然我这边设置时一直在提示【主域名不能为泛解析】，所以我这里是新建了一个 <code>www.domain.com</code> 的二级域（因为我的大部分泛域解析只是为了反代本地应用，无需具体的目录指向）。题外话，Nginx 的域名解析有一个优先级，简单理解就是 主域 &gt; 精确的二级域 &gt; 二级泛域。</p><h3 id="泛域名网站监听">泛域名网站监听</h3><p>新建完网站后，先修改配置文件，将 <code>server_name</code> 替换掉，用以响应泛域名地址请求：</p><figure class="highlight plain"><figcaption><span>网站配置</span></figcaption><table><tr><td class="code"><pre><span class="line">server_name  ~^(?&lt;subdomain&gt;.+)\.domain\.com$;</span><br></pre></td></tr></table></figure><p><img src="../../img/article/Nginx%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE/image-20210720224409500.png" alt="泛域名监听"></p><h3 id="根据二级域匹配地址">根据二级域匹配地址</h3><p>这样子配置，在接下来的内容中，可以利用 <strong><code>$subdomain</code></strong> 获取二级域的具体值。然后是反代配置，我们将代码放在 <code>#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</code> 之前。</p><figure class="highlight plain"><figcaption><span>反代配置</span></figcaption><table><tr><td class="code"><pre><span class="line">location ^~ &#x2F; &#123;</span><br><span class="line">  if ($subdomain &#x3D; &quot;test1&quot;) &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8881;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if ($subdomain &#x3D; &quot;test2&quot;) &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8882;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">  proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">  proxy_set_header Connection upgrade;</span><br><span class="line">  proxy_set_header Accept-Encoding gzip;</span><br><span class="line">  add_header X-Cache $upstream_cache_status;</span><br><span class="line">  #Set Nginx Cache</span><br><span class="line">  add_header Cache-Control no-cache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#ERROR-PAGE-START 错误页配置，可以注释、删除或修改</span><br></pre></td></tr></table></figure><p>按照上面的例子，如果我使用 <code>test1.domain.com</code> 访问，那么响应的就是位于 <code>8881</code> 端口的应用。</p><h3 id="防止恶意泛域名解析">防止恶意泛域名解析</h3><p>由于我们在原 <code>www.domain.com</code> 的配置上进行的泛域名监听修改，那么意味着任意一个二级域名访问都会被指向到此处目录，我们需要对 <em>不存在、没有实际使用</em> 的二级域进行屏蔽（或者跳转到其它地址中）。这个需求的实现非常简单且巧妙，由于 Nginx 没有 <code>else</code> 语句，我们通过变量换种思路实现。</p><figure class="highlight plain"><figcaption><span>屏蔽未使用的二级域</span></figcaption><table><tr><td class="code"><pre><span class="line">location ^~ &#x2F; &#123;</span><br><span class="line">  set $flag 0;</span><br><span class="line"></span><br><span class="line">  if ($subdomain &#x3D; &quot;test1&quot;) &#123;</span><br><span class="line">    set $flag 1;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8881;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if ($subdomain &#x3D; &quot;test2&quot;) &#123;</span><br><span class="line">    set $flag 1;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8882;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if ($flag &#x3D; 0) &#123;</span><br><span class="line">    return 444;  # 也可以作跳转</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BasicAuth-的认证校验">BasicAuth 的认证校验</h3><p>BasicAuth 是一个简洁但实用的权限校验，因为有现成的工具我们直接使用宝塔面板生成密文。在 <strong>访问限制</strong> 处添加密码访问。回到配置文件，找到 <code>#Directory protection rules, do not manually delete</code> 这句话，按照下面的地址进入到这个目录，复制其中 <code>conf</code> 文件中的内容。如果你仔细观察就会发现它就是在 <code>location</code> 中添加了 <code>auth_basic</code> 等命令，所以灵活点，先将此处的引入删除，我们手动添加。将复制到的内容粘贴到 <code>location ^~ /</code> 下面就好了。</p><p>聪明的你一定会想到了，这相当于对所有二级域的根目录做了加密访问，而并不是所有的二级域都需要加密，所以参考上文的 <code>if</code> 判断，我们稍微处理下。</p><figure class="highlight plain"><figcaption><span>指定域名的加密</span></figcaption><table><tr><td class="code"><pre><span class="line">#AUTH_START 地址加密访问</span><br><span class="line">auth_basic_user_file &#x2F;www&#x2F;server&#x2F;pass&#x2F;www.domain.com&#x2F;common.pass;</span><br><span class="line">include enable-php-00.conf;</span><br><span class="line">#AUTH_END</span><br><span class="line"></span><br><span class="line">location ^~ &#x2F; &#123;</span><br><span class="line">  set $flag 0;</span><br><span class="line">  set $client_verify off;</span><br><span class="line"></span><br><span class="line">  if ($subdomain &#x3D; &quot;test1&quot;) &#123;</span><br><span class="line">    set $flag 1;</span><br><span class="line">    set $client_verify &quot;Authorization&quot;;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8881;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  auth_basic $client_verify;</span><br><span class="line"></span><br><span class="line">  #......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，需要加密的二级域，只需要添加 <code>set $client_verify &quot;Authorization&quot;;</code> 即可。</p><div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/Nginx泛域名解析配置/image-20210721005003928.png" alt="验证不通过将返回 401 Authorization Required" style="height:250px;"/></div><span class="image-caption">验证不通过将返回 401 Authorization Required</span></div><h3 id="宝塔面板的反代访问">宝塔面板的反代访问</h3><p>都进行到这一步了，我们为什么不把宝塔也给反代了，虽然为了安全使用自定义端口更好，但是在访问地址后面追加端口号真的很影响心情（更何况我服务器还开启了安全入口、BasicAuth认证以及动态口令认证）。给宝塔面板进行反代的思路略微有点清奇，因为是限于内部规则，设置完安全域名后宝塔必须得通过这个域名进行访问（而且是带端口），所以我们在反代的时候得修改对应 <code>$host</code> 。</p><p>反代的本质相当于访问请求到 Nginx 后，由 Nginx 再次发出请求到你所设定的地址，假设我们将宝塔的安全域名设置为 <code>www.domain.com</code> ，我们本地访问时先是通过泛域名解析到服务器，此时不带自定义端口（通过80/443）访问。那么 Nginx 需要代理的就是 <code>www.domain.com:port</code>，所以你懂的我们不能让他触发公网上的 DNS 解析（PS：此处更多的意义上是指当 DNS 的泛域名解析是 CNAME 指向到 CDN 域名的情形，如果再次访问需要拿到服务器真实地址），所以我们本地修改一下 <code>hosts</code> 文件。</p><figure class="highlight plain"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">127.0.0.1 www.domain.com</span><br></pre></td></tr></table></figure><p>那么，反代宝塔面板的配置文件就可以写成这样：</p><figure class="highlight plain"><figcaption><span>反代宝塔面板</span></figcaption><table><tr><td class="code"><pre><span class="line">location ^~ &#x2F; &#123;</span><br><span class="line">  set $xheader &quot;$host&quot;;</span><br><span class="line"></span><br><span class="line">  if ($subdomain &#x3D; &quot;www&quot;) &#123;</span><br><span class="line">    proxy_pass https:&#x2F;&#x2F;www.domain.com:8888;</span><br><span class="line">    set $xheader &quot;www.domain.com:8888&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  proxy_set_header Host $xheader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>自行结合上面的配置文件整合哈~</em></p><p>现在，我们做到了通过 <code>https://www.domain.com</code> 直接访问宝塔面板。试问反代有什么好处？通过 443 端口进行面板访问，所以这里可以把宝塔面板用到的防火墙端口关闭了。虽然但是，我们是通过本地 hosts 解析转了一圈访问的面板，所以面板的端口还真不能删，不过可以将此端口的权限只给服务器 IP 使用，四舍五入就约等于对外界关闭了端口呀。</p><p>此部分需要在终端操作。</p><figure class="highlight sh"><figcaption><span>此处假设服务器 ip 为 8.8.8.8，宝塔面板端口为 8888</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除原端口授权</span></span><br><span class="line">firewall-cmd --permanent --remove-port=8888/tcp </span><br><span class="line"></span><br><span class="line"><span class="comment"># 为服务器 IP 设置宝塔面板端口的访问权限</span></span><br><span class="line">firewall-cmd --permanent --add-rich-rule=<span class="string">&#x27;rule family=&quot;ipv4&quot; source address=&quot;8.8.8.8&quot; port protocol=&quot;tcp&quot; port=&quot;8888&quot; accept&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="泛域名-SSL-证书申请">泛域名 SSL 证书申请</h3><p>SSL 是必须的，泛域名解析自然需要泛域名证书，我们移步 <code>www.domain.com</code> 的 SSL 选项，选择 <code>Let's Encrypt</code> ，使用 DNS 验证，勾选自动组合泛域名证书，进行正常的申请即可了，由于我们的配置文件是共用一个的，所以一次配置其它地方都能生效。</p><p>宝塔的泛域名证书可以手动设置定时任务，一般还剩 30 天时就会自动进行申请，这点无需担心。</p><p><img src="../../img/article/Nginx%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE/image-20210720224604524.png" alt="泛域名证书申请"></p><h2 id="二、CDN-侧配置">二、CDN 侧配置</h2><p>此处基于腾讯云 CDN 操作，为什么要使用 CDN 呢，除了分发外还有一个好处就是可以隐藏服务器的真实地址，毕竟万一真有小贱人扫服务器也是无奈呀 <svg class="iconfont emoji" aria-hidden="true"><use xlink:href="#icon-liuhan"></use></svg>。在腾讯云 CDN 处直接新建泛域名地址即可，按照提示进行域名验证云云。</p><h3 id="泛域名-CDN-分发">泛域名 CDN 分发</h3><p>关于 SSL，使用 CDN 访问网站时，如果需要通过 https 的形式访问，是需要将证书部署到 CDN 侧的。，由于商用的泛域名证书贵的离谱，所以这里我们将宝塔申请的 <code>Let's Encrypt</code> 证书上传上去就行了。</p><p>关于缓存，原则上说应该全程不缓存，CDN 侧只能通过目录/格式等条件进行特定的缓存，没办法根据二级域名进行回源。例如我们无法在 CDN 上区分来自 <code>/static/</code> 路径的请求是哪一个二级域发出的。</p><h3 id="泛域名证书的自部署">泛域名证书的自部署</h3><p>由于 <code>Let's Encrypt</code> 的证书只有三个月的有效期，所以势必需要每隔一段时间就要对证书进行一次更新。服务器这边可以通过宝塔的定时任务自动更新部署，但是 CDN 侧腾讯云并没有提供类似的功能。不过由它的云 API 得知，所有的控制台操作行为的背后都是基于 Api 进行的。</p><p>通过查询文档我们可以得知 <a href="https://cloud.tencent.com/document/product/228/41116">UpdateDomainConfig</a> 接口，就可以完成对证书的设定。</p><blockquote><p>UpdateDomainConfig 用于修改内容分发网络加速域名配置信息。</p><p>注意：如果需要更新复杂类型的配置项，必须传递整个对象的所有属性，未传递的属性将使用默认值，建议通过查询接口获取配置属性后，直接修改后传递给本接口。Https 配置由于证书的特殊性，更新时不用传递证书和密钥字段。</p></blockquote><p>然而事实上，更新/修改时，可以传递证书和密钥字段，此时证书不是以腾讯云托管证书的形式存在，而是自有证书。（本来我最初的思路是通过 SSL 接口将证书上传到托管证书里，CDN 这边通过 <code>CertId</code> 进行设置，但若是可以直接指定证书内容的话反而更简单。）</p><p>可以通过腾讯云的在线 Api 自动生成对应语言的代码，由于我对 Python 不熟，这里使用了 Node 版本。</p><figure class="highlight js"><figcaption><span>主要是参数的定义部分，证书可以用 fs.readFileSync() 通过路径读取获得</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> CdnClient(clientConfig);</span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  <span class="string">&quot;Domain&quot;</span>: <span class="string">&quot;szyink.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Https&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Switch&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Http2&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">    <span class="string">&quot;OcspStapling&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Hsts&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Switch&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">      <span class="string">&quot;MaxAge&quot;</span>: <span class="number">31536000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;CertInfo&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Certificate&quot;</span>: pem.cert1,</span><br><span class="line">      <span class="string">&quot;PrivateKey&quot;</span>: pem.key1,</span><br><span class="line">      <span class="string">&quot;Message&quot;</span>: <span class="string">&quot;更新日期：&quot;</span> + date.format(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">&#x27;YYYY-MM-DD HH:mm&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">client.UpdateDomainConfig(params).then(</span><br><span class="line">  data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>剩下的思路就很简单了，我们只需要按照证书路径读取文件内容，设置个定时任务，每隔一个月执行一遍更新即可。需要注意的是，定时任务的命令需要写到绝对命令，类似如下：</p><figure class="highlight sh"><figcaption><span>命令语句，本机的 Node 环境是通过 nvm 安装</span></figcaption><table><tr><td class="code"><pre><span class="line">/root/.nvm/versions/node/v14.17.3/bin/node /root/tencentcdn/index.js</span><br></pre></td></tr></table></figure><h2 id="三、配置的附录内容">三、配置的附录内容</h2><h3 id="获取真实-IP">获取真实 IP</h3><p>当所有指向到服务器的域名都套上一层 CDN 后，理所应当的，在 Nginx 的日志处记录不到真实的客户端 IP 地址，对于宝塔用户来说，只需要修改 Nginx 的主配置文件即可：</p><figure class="highlight plain"><figcaption><span>在配置文件中添加高亮行，然后重启 Nginx 即可~</span></figcaption><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">  include mime.types;</span><br><span class="line marked">  set_real_ip_from 0.0.0.0&#x2F;0;</span><br><span class="line marked">  real_ip_header X-Forwarded-For;</span><br><span class="line">  #include luawaf.conf;</span><br><span class="line"></span><br><span class="line">  include proxy.conf;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你对宝塔做了反代，那么不建议通过宝塔进行 Nginx 的重启/停止操作，在终端中执行最好。</p><h3 id="屏蔽垃圾-UA">屏蔽垃圾 UA</h3><p>互联网上无时无刻存在着一些扫描器，这些大都是无人值守的程序，甚至没有刻意伪装 User-Agent ，下面是我收集的一些 UA 列表，可以在腾讯云 CDN 的访问控制中 <strong>UA 黑白名单配置</strong> 添加。</p><table><thead><tr><th><strong>规则类型</strong></th><th><strong>规则内容</strong></th><th style="text-align:center"><strong>生效类型</strong></th><th style="text-align:center"><strong>生效规则</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>黑名单</td><td><code> *spider*|*bot*|*Spider*|*Bot*</code></td><td style="text-align:center">全部内容</td><td style="text-align:center">*</td><td>屏蔽蜘蛛（按需添加）</td></tr><tr><td>黑名单</td><td><code>*nmap*|*NMAP*|*HTTrack*|*sqlmap*|*Java*|*zgrab*</code></td><td style="text-align:center">全部内容</td><td style="text-align:center">*</td><td>常见扫描器</td></tr><tr><td>黑名单</td><td><code>*Python*|*python*|*cur*l*Curl*|*wget|*Wget*</code></td><td style="text-align:center">全部内容</td><td style="text-align:center">*</td><td>常见扫描器</td></tr><tr><td>黑名单</td><td><code>*MJ12bot*|*a Palo Alto*</code></td><td style="text-align:center">全部内容</td><td style="text-align:center">*</td><td>安全机器人</td></tr><tr><td>黑名单</td><td><code>*Go-http-client*</code></td><td style="text-align:center">全部内容</td><td style="text-align:center">*</td><td>安全机器人</td></tr></tbody></table><h3 id="屏蔽恶意-IP">屏蔽恶意 IP</h3><p>UA 是可以伪装的，我通过分析日志抓取了一些恶意访问 IP，由于都是国外的地址，所以直接狠一点，如果所处于的 IP 段是机房类型的，就直接按照大的 IP 段封禁。这个部分是依靠宝塔插件 <strong>系统防火墙</strong> 实现的，下面是导出的规则信息，可以直接复制后导入：</p><figure class="highlight json"><figcaption><span>辣鸡国外 IP 段</span></figcaption><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">32</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;20.0.0.0/8&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;美国慧与科技 &amp; 微软数据中心&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-20 13:07:01&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">31</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;167.248.133.0/24&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;Censys 扫描&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-20 09:42:39&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">30</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;74.120.14.0/24&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;Censys 扫描&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-20 09:42:38&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">29</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;162.142.125.0/24&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;Censys 扫描&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-20 09:42:38&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">28</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;192.35.168.0/23&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;Censys 扫描&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-20 09:42:38&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">27</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;192.241.128.0/17&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;美国DigitalOcean数据中心&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-20 09:40:45&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">25</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;18.224.0.0/14&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;Amazon数据中心 224-227&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-17 11:35:11&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">24</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;18.192.0.0/11&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;Amazon数据中心 192-223&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-17 11:35:18&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">23</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;18.160.0.0/11&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;Amazon数据中心 160-191&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-17 11:32:23&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">20</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;4.122.0.0/16&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;美国德梅因Microsoft数据中心&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-16 10:14:08&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">17</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;52.221.0.0/16&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;新加坡Amazon数据中心&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-16 10:08:16&quot;</span>&#125;, &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">16</span>, <span class="attr">&quot;types&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;128.14.0.0/16&quot;</span>, <span class="attr">&quot;brief&quot;</span>: <span class="string">&quot;美国洛杉矶Zenlayer数据中心&quot;</span>, <span class="attr">&quot;addtime&quot;</span>: <span class="string">&quot;2021-07-16 10:08:25&quot;</span>&#125;]</span><br></pre></td></tr></table></figure><p>如你所见，这个封禁是激进的，甚至对 20/8 整个上千万个 IP 段进行了大规模屏蔽，不过由于他们位于 IDC 段中，而且还是国外 IP，所以影响也不大。（此处真的感叹由于互联网的发源地是美国，谁能想到一个拥有近千万个地址段就给了两家公司来用，甚至于他们除了这个范围外在其它范围内还有地址，再想想国内家用公网 IP 的稀缺，真的是，得展望 IPV6 呀）</p><h3 id="拦截恶意请求">拦截恶意请求</h3><p>Hexo 是个静态站，即使它放进了服务器中，你能想到一堆机器人按照 Wordpress 的方式请求 Hexo 站吗？看到日志的时候简直是无语死了，内心 OS：扫你妹呀！</p><figure class="highlight plain"><figcaption><span>在 Hexo 站的配置文件中添加如下内容，可以选择跳转到首页或者返回 444</span></figcaption><table><tr><td class="code"><pre><span class="line">#静态网站天天扫，简直神经病，扫你妹啊</span><br><span class="line">location ~ .*\.(php)$</span><br><span class="line">&#123;</span><br><span class="line">  rewrite ^&#x2F; https:&#x2F;&#x2F;domain.com permanent;  # or return 444;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、最后的最后">四、最后的最后</h2><p>最最终，我们完成了泛域名相关的各类处理，证书的部署上也做到了自动完成~ <svg class="iconfont emoji" aria-hidden="true"><use xlink:href="#icon-xiaodiaodaya"></use></svg></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> CDN </tag>
            
            <tag> 泛域名 </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小站搬家记</title>
      <link href="/blog/56dd46d6/"/>
      <url>/blog/56dd46d6/</url>
      
        <content type="html"><![CDATA[<p>从阿里云迁到腾讯云了，从服务器迁到轻量服务器了，从辽备迁到皖备了。心路历程可以参见这篇文章：<a href="https://szyink.com/archives/702/">小站的搬家经历</a>。此处记录搬家历史。对于动态网站，搬家无非就是两件事，搬网站目录的所有文件和搬数据库，一般来说迁移完这俩基本就好使了。但是我的新旧服务器基础环境不一致：</p><p><em>服务器从 CentOS 7.8 换成了 8.4，PHP 从 7.2 换成了 8.0， Nginx 升级到了 1.20， 数据库升级到了 10.5.6 的样子。</em></p><p>Typecho 正式版真的好久没更新了，都怀疑不支持这个 PHP 版本，于是就选择了新装开发版，除了 <code>/usr</code> 目录进行了替换之外，其余内容均没有修改。数据库这边宝塔导出来的备份文件其实是含建库过程的 SQL 脚本。所以迁移网站似乎确实没啥，即使环境不一致。</p><p>哈，碎碎念结束，网站确实没啥，主要是应用环境没了，这点有点烦人，重新配置真消磨时间。</p><h2 id="服务器初始配置">服务器初始配置</h2><h3 id="系统初始配置">系统初始配置</h3><p>在腾讯云控制台重置 root 密码，以及配置密钥和开放防火墙（后期使用宝塔自带的防火墙）。密钥自己上传进去也行，用宝塔的 SSH 管理页可以，不过我一直是一组密钥各种通用，选择上传比较好。</p><figure class="highlight sh"><figcaption><span>系统初始化</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统升级</span></span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装常用软件</span></span><br><span class="line">yum install git zsh wget vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 oh-my-zsh</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://cdn.jsdelivr.net/gh/robbyrussell/oh-my-zsh/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装宝塔面板">安装宝塔面板</h3><p>关于面板 SSL，此处我这里出了问题，申请证书时一直报错，只能先使用自签证书，然后将主域名的证书文件软链接到宝塔面板证书处。如果能在开启 SSL 处申请成功那自然最好。</p><figure class="highlight sh"><figcaption><span>雷峰塔中有白蛇</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装面板</span></span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 淦掉账户登录校验</span></span><br><span class="line">rm -f /www/server/panel/data/bind.pl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主域名博客用，分配二级域名绑定宝塔。</span></span><br><span class="line"><span class="comment"># 主域名申请泛域名证书，宝塔面板开启 SSL，修改证书路径的主域名证书处。</span></span><br><span class="line">ln /www/server/panel/vhost/cert/szyink.com/privkey.pem /www/server/panel/ssl/privateKey.pem</span><br><span class="line">ln /www/server/panel/vhost/cert/szyink.com/fullchain.pem /www/server/panel/ssl/certificate.pem</span><br></pre></td></tr></table></figure><h3 id="预装应用删除">预装应用删除</h3><figure class="highlight sh"><figcaption><span>干翻监控</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整体删除 qcloud 内容，然后重启</span></span><br><span class="line"><span class="comment"># 测试后删除这个不影响快照的新建和恢复</span></span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/qcloud</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者是使用卸载命令</span></span><br><span class="line">/usr/<span class="built_in">local</span>/qcloud/stargate/admin/uninstall.sh</span><br><span class="line">/usr/<span class="built_in">local</span>/qcloud/monitor/barad/admin/uninstall.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找是否残留进程</span></span><br><span class="line">ps -A | grep agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除预置账户</span></span><br><span class="line">userdel -r lighthouse</span><br></pre></td></tr></table></figure><h2 id="应用安装">应用安装</h2><h3 id="安装-Docker">安装 Docker</h3><figure class="highlight sh"><figcaption><span>文档地址：https://docs.docker.com/engine/install/centos/</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移除可能的旧版本</span></span><br><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 yum-utils 包并设置稳定版存储库</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本的 Docker 引擎</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><ul><li>新建一个 coder 用户以方便搭建 code－server（root 账户下执行）</li></ul><figure class="highlight sh"><figcaption><span>coder 用户</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建用户</span></span><br><span class="line">useradd -m coder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为新用户设置密码</span></span><br><span class="line">passwd coder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新用户添加到 docker 组</span></span><br><span class="line">gpasswd -a coder docker</span><br></pre></td></tr></table></figure><ul><li>配置 coder 用户</li></ul><figure class="highlight sh"><figcaption><span>在 coder 用户中执行（docker）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参考上文更换 shell 为 oh-my-zsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 nvm，参考提示配置环境变量并刷新</span></span><br><span class="line">wget -qO- https://cdn.jsdelivr.net/gh/creationix/nvm/install.sh | sh</span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 node &amp; hexo</span></span><br><span class="line">nvm install --lts</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 ssh</span></span><br></pre></td></tr></table></figure><h3 id="安装-Cloudreve">安装 Cloudreve</h3><p>宝塔新建一个用户访问 Cloudreve 的站点，将 Cloudreve 的安装包上传到网站目录。同时在该目录下新建 <code>conf.ini</code> 配置文件，用以修改监听端口，顺带将存储类型从 sqlite 换成 mysql。</p><figure class="highlight plain"><figcaption><span>配置文件地址：https://docs.cloudreve.org/getting-started/config</span></figcaption><table><tr><td class="code"><pre><span class="line">[System]</span><br><span class="line">Mode &#x3D; master</span><br><span class="line">Listen &#x3D; :5212</span><br><span class="line">SessionSecret &#x3D; ******</span><br><span class="line">HashIDSalt &#x3D; ******</span><br><span class="line"></span><br><span class="line">; 数据库相关，如果你只想使用内置的 SQLite数据库，这一部分直接删去即可</span><br><span class="line">[Database]</span><br><span class="line">; 数据库类型，目前支持 sqlite | mysql</span><br><span class="line">Type &#x3D; mysql</span><br><span class="line">; MySQL 端口</span><br><span class="line">Port &#x3D; 3306</span><br><span class="line">; 用户名</span><br><span class="line">User &#x3D; cloudreve</span><br><span class="line">; 密码</span><br><span class="line">Password &#x3D; TdCP87HJaE8yyXKD</span><br><span class="line">; 数据库地址</span><br><span class="line">Host &#x3D; 127.0.0.1</span><br><span class="line">; 数据库名称</span><br><span class="line">Name &#x3D; cloudreve</span><br><span class="line">; 数据表前缀</span><br><span class="line">TablePrefix &#x3D; cd_</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>宝塔应用商店安装 Supervisord 管理器，添加守护程序，内容如下：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="../../img/article/小站搬家记/image-20210620174605046.png" alt="添加守护程序" style="height:400px;"/></div><span class="image-caption">添加守护程序</span></div><p>移除到日志查看，获取初始的账户和密码，然后登陆巴拉巴拉。</p><ul><li>搭配 Aria2 实现离线下载</li></ul><p>此处我选择了编译安装，从 <a href="https://github.com/aria2/aria2/releases">Github</a> 下载发行版，利用宝塔上传到随便一个看着舒心的目录。</p><figure class="highlight sh"><figcaption><span>参考 readme.md 文件内容进行编译安装</span></figcaption><table><tr><td class="code"><pre><span class="line">autoreconf -i</span><br><span class="line">./configure ARIA2_STATIC=yes</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>接着在随便一个看着舒心的位置新建配置文件，内容根据个人需求而定。PS：关于做种，Cloudreve 建立的离线下载只有在满足做种条件后才会将文件从临时目录移到存储目录，所以热门资源还好，冷门资源的话可能会由于很少有人下载满足不了做种条件，这里我建议做种终止条件除了分享率外再添上做种时间。</p><p>可执行文件位于 <code>/src/</code> 目录中，启动命令：</p><figure class="highlight sh"><figcaption><span>aria2c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./aria2c --conf-path=<span class="string">&quot;/你的配置文件地址/aria2.conf&quot;</span> -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找对应 pid </span></span><br><span class="line">ps -A | grep aria</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强停软件</span></span><br><span class="line"><span class="built_in">kill</span> -9 xxxx</span><br></pre></td></tr></table></figure><p>最后跑到 Cloudreve 设置页面配置一下离线下载就好了。</p><h2 id="鸽子🕊">鸽子🕊</h2><p>未完待续 or 鸽了</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之论订阅消息的坑</title>
      <link href="/blog/5e967ba/"/>
      <url>/blog/5e967ba/</url>
      
        <content type="html"><![CDATA[<p><em>这是一篇我鸽了很久的文章，从最初的 5 月 5 日开写，一直拖到近日才算完成。虽然主观原因是人懒，但客观原因不还是有嘛，这重新备案很费时间的啊喂~</em></p><p>言归正传，写这篇文章主要是在使用小程序发送订阅消息时却是踩了不少坑，按照原有的系统设计，是打算将其按照一个常用的消息通知渠道使用的。但是事实上，小程序的消息通知在次数上存在限制，<em>一次授权、一次发送</em>。自然无法实现持久化通知。后来的解决方案是在每个页面作权限校验，诱导（<strong>强制</strong>）用户勾选保持选择，不再询问巴拉巴拉，说人话就是你不给我权限我这边就疯狂跳转弹申请。</p><p>通过微信的 Api 我们可以获取到以上这些信息，当发现了不满足条件的时候就各种弹窗恶心用户就好了（终于活成了自己讨厌的样子淦）。以上操作在理想情况下就是：如果我们亲爱的用户勾选了保持选择，那么对用户来说之后的权限确认过程是无感的，进而在服务端发送消息时就不会出现由于权限次数不足而失败的情况了。</p><p>大家你好我好，是不是（当然这样设计绝对是操蛋的！）</p><p>最最后，本文代码基于 <code>2.15.0</code> 版本，如有改动，概不负责。</p><h2 id="一、基础知识">一、基础知识</h2><div class="note quote"><p><strong>订阅消息</strong></p><p>消息能力是小程序能力中的重要组成，我们为开发者提供了订阅消息能力，以便实现服务的闭环和更优的体验。</p><ul><li>订阅消息推送位置：服务通知</li><li>订阅消息下发条件：用户自主订阅</li><li>订阅消息卡片跳转能力：点击查看详情可跳转至该小程序的页面</li></ul></div><p>订阅消息有两种类型：<strong>一次性订阅消息</strong> 和 <strong>长期订阅消息</strong> ，长期性订阅消息仅向政务民生、医疗、交通、金融、教育等线下公共服务开放，一般用户无法申请到。本文着重于一次性订阅，按照官网文档中的定义：</p><div class="note info"><p>一次性订阅消息用于解决用户使用小程序后，后续服务环节的通知问题。用户自主订阅后，开发者可不限时间地下发一条对应的服务消息；每条消息可单独订阅或退订。</p></div><p>服务端通过调用 <code>subscribeMessage.send</code> 接口发送消息，对于服务端来说，也只能做到调用 Api ，然后接收到返回值。</p><p>客户端通过 <code>requestSubscribeMessage</code> 调出权限申请，通过 <code>getSetting</code> 进行权限确认。</p><h2 id="二、逻辑实现">二、逻辑实现</h2><p>需要实现的效果是这样的，把只有一次性订阅消息当成持久的消息通知渠道来使用。</p><p>这里说下小程序的额外设定，小程序拥有登录和自动登录能力。我将第一次授权放到了等候完成之后的回调里进行，将消息通知的权限检查放到了自动登录的完成回调中。</p><div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/微信小程序之订阅消息/wechat.png" alt="大概是这样吧" style="height:600px;"/></div><span class="image-caption">大概是这样吧</span></div><h2 id="三、代码实现">三、代码实现</h2><div class="tabs" id="wechat"><ul class="nav-tabs"><li class="tab active"><a class="#wechat-1">订阅消息</a></li><li class="tab"><a class="#wechat-2">权限检测</a></li><li class="tab"><a class="#wechat-3">权限设置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="wechat-1"><figure class="highlight js"><figcaption><span>订阅消息 subscribeMessage 调用</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>tmplIds 模板 id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>done 成功回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">subscribeMessage: <span class="function"><span class="keyword">function</span> (<span class="params">tmplIds, done = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">  wx.requestSubscribeMessage(&#123;</span><br><span class="line">    tmplIds: tmplIds,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">      tmplIds.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res[item] !== <span class="string">&#x27;accept&#x27;</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.info(<span class="string">&#x27;消息通知没有订阅&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (done) done(res);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">fail</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 20004: 用户关闭了主开关，无法进行订阅,引导开启</span></span><br><span class="line">      <span class="keyword">if</span> (res.errCode == <span class="number">20004</span>) &#123;</span><br><span class="line">        that.openSettingPage(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (done) done(<span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;申请订阅消息权限失败&#x27;</span>, res.errMsg);</span><br><span class="line">        <span class="keyword">if</span> (done) done(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="wechat-2"><figure class="highlight js"><figcaption><span>校验订阅信息（只在通过自动登录方式进入的才调用）</span></figcaption><table><tr><td class="code"><pre><span class="line">checkSubscribeMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">  wx.getSetting(&#123;</span><br><span class="line">    withSubscriptions: <span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!!res.subscriptionsSetting.mainSwitch) &#123;</span><br><span class="line">        <span class="comment">// itemSettings 只在勾选了总是选择时返回</span></span><br><span class="line">        <span class="comment">// 如果此处没有结果，就再次申请订阅消息，如果勾选了</span></span><br><span class="line">        <span class="keyword">if</span> (!!res.subscriptionsSetting.itemSettings) &#123;</span><br><span class="line">          <span class="comment">// 此处处理勾选了总是选择的</span></span><br><span class="line">          <span class="comment">// 直接跳到设置里（因为订阅消息的弹窗已经弹不出来了）</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> that.globalData.subscribeTmplIds) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.subscriptionsSetting.itemSettings[key] !== <span class="string">&#x27;accept&#x27;</span> &amp;&amp;</span><br><span class="line">              res.subscriptionsSetting.itemSettings[key] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">              that.openSettingPage(<span class="string">&#x27;您有一条或多条订阅消息勾选了禁止接收，建议您重新勾选，是否确认？&#x27;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 至少一条未勾选总是选择，弹窗权限窗口</span></span><br><span class="line">          <span class="keyword">if</span> (!that.globalData.subscribeTmplIds.every(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> res.subscriptionsSetting.itemSettings[item] !== <span class="literal">undefined</span></span><br><span class="line">            &#125;)) &#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: <span class="string">&#x27;订阅消息&#x27;</span>,</span><br><span class="line">              content: <span class="string">&#x27;您有消息尚未勾选保持以上选择，建议您勾选，是否确认？&#x27;</span>,</span><br><span class="line">              success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                  that.subscribeMessage(that.globalData.subscribeTmplIds);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 此处是尚未勾选总是选择</span></span><br><span class="line">          wx.showModal(&#123;</span><br><span class="line">            title: <span class="string">&#x27;订阅消息&#x27;</span>,</span><br><span class="line">            content: <span class="string">&#x27;为了确保您能接收到审核信息，建议您勾选总是保持以上选择，是否确认？&#x27;</span>,</span><br><span class="line">            success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                that.subscribeMessage(that.globalData.subscribeTmplIds);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 此处是订阅消息总开关压根没开，直接跳转到设置页</span></span><br><span class="line">        that.openSettingPage();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="wechat-3"><figure class="highlight js"><figcaption><span>跳转到设置页面</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>str 消息通知</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>done 回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">openSettingPage: <span class="function"><span class="keyword">function</span> (<span class="params">str = <span class="string">&#x27;检测到您未开启订阅消息开关，是否开启？&#x27;</span>, done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">  wx.showModal(&#123;</span><br><span class="line">    content: str,</span><br><span class="line">    success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">        wx.openSetting(&#123;</span><br><span class="line">          <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res.authSetting)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;订阅消息失败&#x27;</span>);</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">&#x27;您拒绝开启通知权限，将无法收取到相关信息&#x27;</span>,</span><br><span class="line">          icon: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">          complete: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (done) done();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div></div></div><h2 id="四、额外内容">四、额外内容</h2><p>这部分与主旨无关，不过有趣。</p><div class="tabs" id="other"><ul class="nav-tabs"><li class="tab active"><a class="#other-1">版本控制</a></li><li class="tab"><a class="#other-2">自动更新</a></li></ul><div class="tab-content"><div class="tab-pane active" id="other-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setGlobaUrl: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url, env;</span><br><span class="line">  <span class="keyword">switch</span> (wx.getAccountInfoSync().miniProgram.envVersion) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;develop&#x27;</span>: <span class="comment">// 开发版</span></span><br><span class="line">      env = <span class="string">&#x27;develop&#x27;</span>;</span><br><span class="line">      url = <span class="built_in">this</span>.globalData.hostUrlList.develop;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;trial&#x27;</span>: <span class="comment">// 体验版</span></span><br><span class="line">      env = <span class="string">&#x27;trial&#x27;</span>;</span><br><span class="line">      url = <span class="built_in">this</span>.globalData.hostUrlList.trial;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;release&#x27;</span>: <span class="comment">// 正式版</span></span><br><span class="line">      env = <span class="string">&#x27;release&#x27;</span>;</span><br><span class="line">      url = <span class="built_in">this</span>.globalData.hostUrlList.release;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      env = <span class="string">&#x27;release&#x27;</span>;</span><br><span class="line">      url = <span class="built_in">this</span>.globalData.hostUrlList.release;</span><br><span class="line">  &#125;</span><br><span class="line">  wx.setEnableDebug(&#123;</span><br><span class="line">    enableDebug: env !== <span class="string">&#x27;release&#x27;</span>,</span><br><span class="line">    fail: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 开发工具不提供此 Api</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.globalData.hostUrl = url;</span><br><span class="line">  <span class="built_in">this</span>.globalData.env = env;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="other-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">autoUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取小程序更新机制兼容</span></span><br><span class="line">  <span class="keyword">if</span> (wx.canIUse(<span class="string">&#x27;getUpdateManager&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> updateManager = wx.getUpdateManager();</span><br><span class="line">    <span class="comment">//1. 检查小程序是否有新版本发布</span></span><br><span class="line">    updateManager.onCheckForUpdate(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 请求完新版本信息的回调</span></span><br><span class="line">      <span class="keyword">if</span> (res.hasUpdate) &#123;</span><br><span class="line">        <span class="comment">//2. 小程序有新版本，则静默下载新版本，做好更新准备</span></span><br><span class="line">        updateManager.onUpdateReady(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          wx.showModal(&#123;</span><br><span class="line">            title: <span class="string">&#x27;更新提示&#x27;</span>,</span><br><span class="line">            content: <span class="string">&#x27;新版本已经准备好，是否马上重启小程序？&#x27;</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                <span class="comment">//3. 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class="line">                updateManager.applyUpdate()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        updateManager.onUpdateFailed(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 新的版本下载失败</span></span><br><span class="line">          wx.showModal(&#123;</span><br><span class="line">            title: <span class="string">&#x27;更新提示&#x27;</span>,</span><br><span class="line">            content: <span class="string">&#x27;新版本已经上线啦~，请您删除当前小程序，重新搜索打开。&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">      title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">      content: <span class="string">&#x27;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 订阅消息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之小程序码的生成</title>
      <link href="/blog/41af8542/"/>
      <url>/blog/41af8542/</url>
      
        <content type="html"><![CDATA[<p>本文着重点：小程序码的获取与使用，另由于小程序后端能力统统由原项目提供，是无法使用腾讯的本身的云开发的，此处采用服务端 API 的方式调用 <svg class="iconfont emoji" aria-hidden="true"><use xlink:href="#icon-feiwen"></use></svg>。</p><span id="more"></span><h2 id="一、小程序码">一、小程序码</h2><p>微信官方提供了三种获取小程序码的接口：<code>createQRCode</code>, <code>get</code> 和 <code>getUnlimited</code>。createQRCode 和 get 算是一类，前者生成二维码后者生成小程序码。他们的特性概括来说就是：<strong>永久有效</strong>，<strong>有数量限制（合计 10 万个）</strong>，<strong>接受的自定义参数较长（128 字节）</strong>。自然是不能满足业务需求啦，所以我们使用的是 <code>getUnlimited</code> ，特点是无限数量，缺点是只能携带 32 字节的自定义参数（而且还限制类型）。</p><h3 id="1-access-token">1.access_token</h3><p>在正式的获取小程序码前，我们还需要获取到一个名为 <code>access_token</code> 的参数，它是小程序全局唯一后台接口调用凭据，调用绝大多数后台接口时都需使用。可以通过 <code>getAccessToken</code> 接口获取。</p><figure class="highlight txt"><figcaption><span>请求地址</span></figcaption><table><tr><td class="code"><pre><span class="line">GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="../../img/article/微信小程序之Wxacode小程序码生成/image-20210321003847805.png" alt="获取 Access Token"/></div><span class="image-caption">获取 Access Token</span></div><p>它的有效期是 2 个小时，重复获取将导致上次获取的 access_token 失效。</p><h3 id="2-getUnlimited">2.getUnlimited</h3><figure class="highlight txt"><figcaption><span>请求地址</span></figcaption><table><tr><td class="code"><pre><span class="line">POST https://api.weixin.qq.com/wxa/getwxacode?access_token=ACCESS_TOKEN</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:right">属性</th><th style="text-align:left">类型</th><th style="text-align:center">必填</th><th style="text-align:center">默认值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:right">access_token</td><td style="text-align:left">string</td><td style="text-align:center">是</td><td style="text-align:center"></td><td>接口调用凭证</td></tr><tr><td style="text-align:right">scene</td><td style="text-align:left">string</td><td style="text-align:center">是</td><td style="text-align:center"></td><td>最大 32 个可见字符。支持数字，英文和字符：<code>!#$&amp;'()*+,/:;=?@-._~</code></td></tr><tr><td style="text-align:right">page</td><td style="text-align:left">string</td><td style="text-align:center">否</td><td style="text-align:center">主页</td><td>必须是已经发布的小程序存在的页面</td></tr><tr><td style="text-align:right">width</td><td style="text-align:left">number</td><td style="text-align:center">否</td><td style="text-align:center">430</td><td>二维码的宽度，单位 px，最小 280px，最大 1280px</td></tr></tbody></table><div class="img-wrap"><div class="img-bg"><img class="img" src="../../img/article/微信小程序之Wxacode小程序码生成/image-20210321005243537.png" alt="获取小程序码"/></div><span class="image-caption">获取小程序码</span></div><h2 id="二、微信小程序">二、微信小程序</h2><p>小程序端只需要在页面的 <code>onLoad</code> 中读取即可:</p><figure class="highlight js"><figcaption><span>读取传参</span></figcaption><table><tr><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> comCodeScene = <span class="built_in">decodeURIComponent</span>(options.scene || <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 业务处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、获取小程序码">三、获取小程序码</h2><p>完！<span class="bb_spoiler" title="机智的你一定可以写出来的！">你问我其它的代码嘞？本宝宝本项目只负责前端哈哈哈哈哈</span></p><details cyan><summary> 一个简单的 Java 版本获取小程序码的实现 </summary>              <div class='content'>              <figure class="highlight java"><figcaption><span>获取小程序码</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取租户小程序二维码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tenant</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getWx2d</span><span class="params">(CmmTenant tenant)</span> </span>&#123;</span><br><span class="line">    String base64Code = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//然后调用微信官方api生成二维码</span></span><br><span class="line">    String createQrCodeUrl = <span class="string">&quot;https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=&quot;</span> + getToken();</span><br><span class="line">    <span class="comment">//此处我是使用的阿里巴巴的fastJson</span></span><br><span class="line">    JSONObject createQrParam = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    createQrParam.put(<span class="string">&quot;scene&quot;</span>, <span class="string">&quot;scene=&quot;</span> + tenant.getDomainName());</span><br><span class="line">    createQrParam.put(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;280&quot;</span>);</span><br><span class="line"></span><br><span class="line">    PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">    InputStream in = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        URL realUrl = <span class="keyword">new</span> URL(createQrCodeUrl);</span><br><span class="line">        <span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">        URLConnection conn = realUrl.openConnection();</span><br><span class="line">        <span class="comment">// 设置通用的请求属性</span></span><br><span class="line">        conn.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line">        <span class="comment">// 发送POST请求必须设置如下两行</span></span><br><span class="line">        conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">        conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 获取URLConnection对象对应的输出流</span></span><br><span class="line">        out = <span class="keyword">new</span> PrintWriter(conn.getOutputStream());</span><br><span class="line">        <span class="comment">// 发送请求参数,利用connection的输出流，去写数据到connection中，我的参数数据流出我的电脑内存到connection中，让connection把参数帮我传到URL中去请求。</span></span><br><span class="line">        out.print(createQrParam);</span><br><span class="line">        <span class="comment">// flush输出流的缓冲</span></span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="comment">//获取URL的connection中的输入流，这个输入流就是我请求的url返回的数据,返回的数据在这个输入流中，流入我内存，我将从此流中读取数据。</span></span><br><span class="line">        in = conn.getInputStream();</span><br><span class="line">        <span class="comment">//定义个空字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 读取图片字节数组</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建字节数组输出流作为中转仓库，等待被写入数据</span></span><br><span class="line">            ByteArrayOutputStream swapStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">            <span class="keyword">int</span> rc = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((rc = in.read(buff, <span class="number">0</span>, <span class="number">100</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//向中转的输出流循环写出输入流中的数据</span></span><br><span class="line">                swapStream.write(buff, <span class="number">0</span>, rc);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//此时connection的输入流返回给我们的请求结果数据已经被完全地写入了我们定义的中转输出流swapStream中</span></span><br><span class="line">            data = swapStream.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        base64Code = <span class="keyword">new</span> String(Objects.requireNonNull(Base64.encodeBase64(data)));</span><br><span class="line">        <span class="comment">//Base64转byte[]数组</span></span><br><span class="line">        System.out.println(base64Code);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送 POST 请求出现异常！&quot;</span> + e);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用finally块来关闭输出流、输入流</span></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;base64Code=&quot;</span> + base64Code);</span><br><span class="line">    <span class="keyword">return</span> base64Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面的自定义右键与剪切板操作实现</title>
      <link href="/blog/63296e49/"/>
      <url>/blog/63296e49/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/前端页面的自定义右键与剪切板操作实现/image-20210320134451661.png" alt="image" style="height:300px;"/></div></div><p>本文分为两部分：自定义右键和剪切板的事件处理。主要目标是在自定义网页右键的基础上，实现诸如复制、粘贴的剪切板操作，文本选中的复制、图片的复制和输入框下的粘贴。</p><h2 id="一、自定义右键">一、自定义右键</h2><p>前端页面的自定义右键通过 <code>oncontextmenu</code> 实现，几乎所有浏览器都支持 oncontextmenu 事件。对全局右键的修改如下，可以在事件中放出自己的菜单，需要注意返回 <code>false</code> 用以阻止默认菜单弹出。</p><figure class="highlight js"><figcaption><span>全局修改右键替换</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.oncontextmenu = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do..</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-右键菜单的绘制">1. 右键菜单的绘制</h3><p>需要获取鼠标右键时所处的位置，并且控制自定义菜单不要超过屏幕的显示范围，判断菜单的长宽和屏幕。而元素在隐藏时是没有宽、高的，这里可以取巧通过控制层级先把菜单绘制出来，获取到 <code>offsetWidth</code> 和 <code>offsetHeight</code> 后再显示菜单（恢复正常的层级）。</p><h3 id="2-可能用到的方法">2. 可能用到的方法</h3><p>前文中，在 <code>oncontextmenu</code> 取到  <code>event</code> ，可以获取到所需要的内容。在 <code>event</code> 中，可以通过 <code>event.target</code> 得到右键下的元素信息。需要区分右键下是否为图片/链接，可以通过 <code>href</code> 和 <code>currentSrc</code> 判断等。</p><p>下面是一些可能用得到的属性/方法。</p><table><thead><tr><th>属性值/方法</th><th>用途</th><th>备注</th></tr></thead><tbody><tr><td><code>event.target</code></td><td>右键下的元素 DOM</td><td></td></tr><tr><td><code>event.target.href</code></td><td>当前元素是否具有链接地址</td><td>用以判断链接</td></tr><tr><td><code>event.target.currentSrc</code></td><td>当前元素是否具有图片链接</td><td>用以判断图片</td></tr><tr><td><code>event.target.parentElement</code></td><td>当前元素的父元素 DOM</td><td></td></tr><tr><td><code>event.target.selectionStart</code></td><td>当前元素选中内容起</td><td></td></tr><tr><td><code>event.target.selectionEnd</code></td><td>当前元素选中内容止</td><td></td></tr><tr><td><code>$(event.target.href).is('input')</code></td><td>判断当前选择是否为输入框</td><td><code>.is('textarea')</code></td></tr><tr><td><code>window.getSelection().toString()</code></td><td>当前选中的文本</td><td></td></tr></tbody></table><h2 id="二、剪切板操作">二、剪切板操作</h2><div class="note quote"><p>Clipboard 接口实现了 Clipboard API，如果用户授予了相应的权限，就能提供系统剪贴板的读写访问。在 Web 应用程序中，Clipboard API 可用于实现剪切、复制和粘贴功能。</p></div><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%B3%E9%94%AE%E4%B8%8E%E5%89%AA%E5%88%87%E6%9D%BF%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0/image-20210228145517668.png' data-fancybox='default' data-caption='Clipboard 兼容性'><img fancybox src="../../img/article/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%B3%E9%94%AE%E4%B8%8E%E5%89%AA%E5%88%87%E6%9D%BF%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0/image-20210228145517668.png" alt="Clipboard 兼容性"></a>        <span class='image-caption'>Clipboard 兼容性</span>      </div></p></div><p>概括来说，浏览器对 Clipboard 接口的支持并不齐全。以读取剪切板来说：火狐来完全不支持 <code>read()</code> ，只有浏览器插件才允许使用，网页是无法调用的。而写入到剪切板 <code>write()</code> 和 <code>writeText()</code> ，火狐和谷歌均支持写入文本到剪切板，但是火狐不支持写入图片，谷歌虽然支持写入图片到剪切板，但是只能是 <code>image/png</code> 类型的图片。</p><p>Clipboard 接口实现了 Clipboard API，如果用户授予了相应的权限，就能提供系统剪贴板的读写访问。在 Web 应用程序中，Clipboard API 可用于实现剪切、复制和粘贴功能。如果用户没有适时使用 Permissions API 授予相应权限和&quot;clipboard-read&quot; 或 “clipboard-write” 权限，调用 Clipboard 对象的方法不会成功。</p><h3 id="2-1-写入剪切板">2.1 写入剪切板</h3><p>由于 <code>document.execCommand('copy')</code> 还健在，所以我们在使用 Clipboard 外写一个兼容版本的复制，Clipboard 接口出错时通过传统方式写入剪切板。</p><p>首先是写入文本到剪切板，传统方式是生成一个不可见的 <code>&lt;input&gt;</code> 输入框，将待写入的内容放到输入框内，全选后复制最后再移除输入框。而利用 Clipboard 接口则不用那么麻烦了，原则上我们需要被授予 <code>clipboard-write</code> 权限，不过好在浏览器默认授权，故只需要直接读取即可，<code>navigator.clipboard.writeText(str)</code>。与右键搭配的话便是通过 <code>window.getSelection().toString()</code> 获取选中文本，接着将文本传递过去。</p><p>然后是写入图片到剪切板，相比较写入文本，写入图片则麻烦些，传统方式的写入是通过选中图片来实现的，也就是再 <code>&lt;img&gt;</code> 标签外需要有一个包裹它的父标签。而在 Clipboard 接口中，使用 <code>write()</code> 写入内容，我们需要传入 ClipboardItem 对象，指定 MIME 类型和 Blob 文件对象。然后是与右键的结合，我们可以获取右键下的图片链接，然后通过 <code>fetch()</code> 拿到这些信息。</p><h3 id="2-2-读取剪切板">2.2 读取剪切板</h3><p>早期通过 <code>document.execCommand('paste')</code> 读取剪切板内容，不过由于安全性问题它已经被废弃。</p><p>因为博客没有什么支持富文本的地方，这里只使用 <code>readText()</code> 方法。我们通过 <code>navigator.clipboard.readText()</code> 获取文本内容，但在这之前为了用户体验，先查询当前网页是否被授予读取权限：通过 <code>Notifications API</code> 执行查询，它允许显示的查询或申请权限（Https 或本地测试环境），如果未被授权可以适当的给与提示等等。</p><h3 id="2-3-写入到文本框">2.3 写入到文本框</h3><p>这是一个体外话，在实现粘贴、剪切等功能时，我们需要只操作选中的部分，也就是获得 <code>selectionStart</code> 和 <code>selectionEnd</code> ，在指定的光标处放置文本内容。</p><h2 id="三、代码">三、代码</h2><p>综上，剪切板复制、读取的代码如下所示：</p><div class="tabs" id="clipboard"><ul class="nav-tabs"><li class="tab active"><a class="#clipboard-1">读取剪切板</a></li><li class="tab"><a class="#clipboard-2">复制文本到剪切板</a></li><li class="tab"><a class="#clipboard-3">复制图片到剪切板</a></li><li class="tab"><a class="#clipboard-4">粘贴文本</a></li></ul><div class="tab-content"><div class="tab-pane active" id="clipboard-1"><figure class="highlight js"><figcaption><span>读取剪切板</span></figcaption><table><tr><td class="code"><pre><span class="line">fn.readClipboard = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> navigator.permissions.query(&#123; <span class="attr">name</span>: <span class="string">&#x27;clipboard-read&#x27;</span> &#125;);</span><br><span class="line">  <span class="keyword">if</span> (result.state === <span class="string">&#x27;granted&#x27;</span> || result.state === <span class="string">&#x27;prompt&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 修改为 .read()  可以获取剪切板中的文字/图片</span></span><br><span class="line">    <span class="comment">// 返回的是 ClipboardItem</span></span><br><span class="line">    <span class="keyword">return</span> navigator.clipboard</span><br><span class="line">      .readText()</span><br><span class="line">      .then(<span class="function"><span class="params">text</span> =&gt;</span> text)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">Promise</span>.reject(err));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="clipboard-2"><figure class="highlight js"><figcaption><span>复制文本到剪切板</span></figcaption><table><tr><td class="code"><pre><span class="line">fn.writeClipText = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> navigator.clipboard</span><br><span class="line">      .writeText(str)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    input.setAttribute(<span class="string">&#x27;readonly&#x27;</span>, <span class="string">&#x27;readonly&#x27;</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(input);</span><br><span class="line">    input.setAttribute(<span class="string">&#x27;value&#x27;</span>, str);</span><br><span class="line">    input.select();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(input);</span><br><span class="line">      <span class="keyword">if</span> (!result || result === <span class="string">&#x27;unsuccessful&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;复制文本失败!&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(input);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(</span><br><span class="line">        <span class="string">&#x27;当前浏览器不支持复制功能，请检查更新或更换其他浏览器操作!&#x27;</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="clipboard-3"><figure class="highlight js"><figcaption><span>复制图片到剪切板</span></figcaption><table><tr><td class="code"><pre><span class="line">fn.writeClipImg = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">event, success, error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> eventSrc = event.target.currentSrc;</span><br><span class="line">  <span class="keyword">const</span> parentElement = event.target.parentElement;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> fetch(eventSrc);</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">await</span> data.blob();</span><br><span class="line">    <span class="keyword">await</span> navigator.clipboard</span><br><span class="line">      .write([</span><br><span class="line">        <span class="keyword">new</span> ClipboardItem(&#123;</span><br><span class="line">          [blob.type]: blob</span><br><span class="line">        &#125;)</span><br><span class="line">      ]).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.info(&#x27;图片复制成功&#x27;, new Date().getTime());</span></span><br><span class="line">        success();</span><br><span class="line">      &#125;, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;图片复制失败：&#x27;</span>, e);</span><br><span class="line">        error(e);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// console.info(&#x27;使用兼容方法复制图片，问题：&#x27;, e);</span></span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (dom.body.createTextRange) &#123;</span><br><span class="line">        <span class="keyword">const</span> textRange = <span class="built_in">document</span>.body.createTextRange();</span><br><span class="line">        textRange.moveToElementText(parentElement);</span><br><span class="line">        textRange.select();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123;</span><br><span class="line">        <span class="keyword">const</span> selection = <span class="built_in">window</span>.getSelection();</span><br><span class="line">        <span class="keyword">const</span> range = <span class="built_in">document</span>.createRange();</span><br><span class="line">        range.selectNodeContents(parentElement);</span><br><span class="line">        selection.removeAllRanges();</span><br><span class="line">        selection.addRange(range);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">      <span class="built_in">window</span>.getSelection().removeAllRanges();</span><br><span class="line">      success();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(e);</span><br><span class="line">      error(<span class="string">&#x27;不支持复制当前图片！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="clipboard-4"><figure class="highlight js"><figcaption><span>粘贴文本</span></figcaption><table><tr><td class="code"><pre><span class="line">fn.insertAtCaret = <span class="function">(<span class="params">$elemt, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> elemt = $elemt[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> startPos = elemt.selectionStart,</span><br><span class="line">        endPos = elemt.selectionEnd;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.selection) &#123;</span><br><span class="line">      $elemt.focus();</span><br><span class="line">      <span class="keyword">var</span> sel = <span class="built_in">document</span>.selection.createRange();</span><br><span class="line">      sel.text = value;</span><br><span class="line">      $elemt.focus();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (startPos || startPos == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> scrollTop = elemt.scrollTop;</span><br><span class="line">      elemt.value = elemt.value.substring(<span class="number">0</span>, startPos) + value + elemt.value.substring(endPos, elemt.value.length); </span><br><span class="line">      $elemt.focus();</span><br><span class="line">      elemt.selectionStart = startPos + value.length;</span><br><span class="line">      elemt.selectionEnd = startPos + value.length;</span><br><span class="line">      elemt.scrollTop = scrollTop;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $elemt.value += value;</span><br><span class="line">      $elemt.focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clipboard </tag>
            
            <tag> Permissions-API </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次对标签页与路由联动的处理方案</title>
      <link href="/blog/dfbd179/"/>
      <url>/blog/dfbd179/</url>
      
        <content type="html"><![CDATA[<p>最近处理了一个标签页与父子页面联动的问题，在开发一个后台管理项目时，前端框架是在另一个项目的基础上改进使用的，原有项目的业务整体比较简单，通过不同导航页进入不同的标签页后，查询显示结果即可。而在新项目中，还需要处理另一种业务情况：从父页面进入子页面时的标签页处理，例如查询列表页跳转进详情页/编辑页。此时才发现这个框架的坑，而偏偏还已经开发了一段时间，换框架是没得可能只能硬着头皮改造。</p><p>这里的主要问题是：标签页是与路由绑定的，在进入子页面时是需要打开新的标签页？子页面的返回行为又该如何处理。在各种讨论妥协后，最终选择方案就是：<strong>子页面打开时新建标签页且相同组件只能创建一个，父页面关闭时连带着子页面一起关闭。</strong></p><span id="more"></span><h2 id="一、业务背景">一、业务背景</h2><p>作为一个 Angular 后台管理项目，布局结构是传统的 <strong>顶部-侧边布局-通栏</strong> （见下图），拥有顶部导航及侧边栏，而由于是 SPA 单页应用的缘故，页面地址是记录在地址后的 <code>#</code> 后面。Tab 栏作为已打开页面的切换入口，与路由进行了关联。</p><div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/记一次对标签页与路由联动的处理方案/image-20210205141833759.png" alt="页面结构" style="height:260px;"/></div><span class="image-caption">页面结构</span></div><h3 id="1-标签页与路由复用">1. 标签页与路由复用</h3><p>当标签页与路由联动后，在处理父子页面上出现了一些问题，由于标签页是与地址直接匹配的，所以如果在父页面进行诸如查看详情之类的操作时，子页此时有两种处理方式：一是顶替覆盖掉当前父页面所对应的标签页，另一则是独立新建一个标签页 <em>（当前框架设计没法使用子路由 🎈）</em>。</p><p>对于标签页来说，标签的切换本质还是路由跳转，在切换过程中就涉及到路由复用的处理，通过实现 <code>RouteReuseStrategy</code> 完成自定义的复用策略。简单来说就是在 <em>路由离开时记录、路由切换时恢复、标签页删除时销毁</em> 。一般来说是用当前路由的地址作为 Key ，通过这个 Key 进行操作，也就是：</p><figure class="highlight ts"><figcaption><span>路由复用策略（部分）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 当路由离开时会触发。 */</span></span><br><span class="line"><span class="keyword">public</span> store(route: ActivatedRouteSnapshot, <span class="attr">handle</span>: DetachedRouteHandle): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (SimpleReuseStrategy.waitDelete &amp;&amp; SimpleReuseStrategy.waitDelete === <span class="built_in">this</span>.getRouteUrl(route)) &#123;</span><br><span class="line">    SimpleReuseStrategy.waitDelete = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  SimpleReuseStrategy.handlers[<span class="built_in">this</span>.getRouteUrl(route)] = handle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据路由包装地址</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="title">getRouteUrl</span>(<span class="params">route: ActivatedRouteSnapshot</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 这句代码可以获取当前路由的组件名componentName，但生成环境（打包）将组建名缩写成随机单个字母，</span></span><br><span class="line">  <span class="comment">// 所以需要手动通过route.routeConfig.data[&#x27;componentName&#x27;]去获取在路由上自定义的组件名</span></span><br><span class="line">  <span class="keyword">let</span> componentShortName = (route.routeConfig.loadChildren</span><br><span class="line">                                || route.routeConfig.component.toString().split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> (route.routeConfig.data &amp;&amp; route.routeConfig.data[<span class="string">&#x27;componentName&#x27;</span>]) &#123;</span><br><span class="line">    componentShortName = route.routeConfig.data[<span class="string">&#x27;componentName&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> url = route[<span class="string">&#x27;_routerState&#x27;</span>].url.replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> url.substring(<span class="number">0</span>, url.indexOf(<span class="string">&#x27;?&#x27;</span>) === -<span class="number">1</span> ? url.length : url.indexOf(<span class="string">&#x27;?&#x27;</span>)) + <span class="string">&#x27;_&#x27;</span> + componentShortName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于标签页切换的本质就是路由跳转，<strong>所以标签页记录的这个地址就相当重要了</strong>，路由与标签页是一对一的。</p><h3 id="2-标签页的事件处理">2. 标签页的事件处理</h3><p>对于标签组件，需要实现的核心功能便是：增删查。通过对 Router 事件进行过滤我们可以拿到定义在 RouterModule 里的路由信息。</p><figure class="highlight ts"><figcaption><span>router.events</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.router.events.pipe(</span><br><span class="line">  filter(<span class="function"><span class="params">event</span> =&gt;</span> event <span class="keyword">instanceof</span> NavigationEnd),</span><br><span class="line">  map(<span class="function">() =&gt;</span> <span class="built_in">this</span>.activatedRoute),</span><br><span class="line">  map(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (route.firstChild) &#123;</span><br><span class="line">      route = route.firstChild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> route;</span><br><span class="line">  &#125;),</span><br><span class="line">  filter(<span class="function"><span class="params">route</span> =&gt;</span> route.outlet === <span class="string">&#x27;primary&#x27;</span>),</span><br><span class="line">  mergeMap(<span class="function"><span class="params">route</span> =&gt;</span> route.data)</span><br><span class="line">  ).subscribe(</span><br><span class="line">    <span class="keyword">const</span> menu = &#123;...event&#125;;    <span class="comment">// 这里的 menu 就是我们需要的信息</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>将所有的 <code>menu</code> 记录到 <code>this.menuList</code> 中，也就得知当前打开了多少标签页，以及他们的标题、地址等信息。</p><h2 id="二、父子页面处理">二、父子页面处理</h2><p>简单来说该问题可以视为 <strong>是否新建子页面的标签页</strong> ，进一步的则是是否保留父页面标签。我们已经知道路由离开时会按照地址存进快照中，所以还需要处理恢复快照的逻辑，并且无论是快照、标签页、还是路由跳转都与地址息息相关，以地址为唯一值。</p><h3 id="1-子页面不新建标签页">1. 子页面不新建标签页</h3><p>如果不新建标签页，那么就得修改原父页面中存储的字段（狸猫换太子？ 替掉父标签相应内容）。首先是决定替换哪些字段，标题用以显示在标签页中自然首选，那么剩下的就是组件名和地址了：已知 <em>标签页通过地址作唯一判断，快照通过地址和组件名作唯一判断</em>。所以替换地址的行为就相当于关闭了父页面标签，从子页面进行返回操作约等于新建一个父页面。这个方案导致 <strong>父页面标签丢失</strong>。并且当子页面未关闭时，可以通过侧栏菜单打开父页面，此时父子页面同时出现，违背初衷了。</p><p>而如果只替换标题，逻辑上父标签主要信息未动，只是显示在标签上的名称改变了。但是，<strong>由于当前标签页还是父页面地址，在进行标签页切换后，回到此标签时恢复的是父页面的内容</strong>，而不是子页面内容，同时在快照缓存上，为了避免内存泄漏，所有的子页面都不能记录快照。原则上说只要用户不切换页面，这个方式还算是可行。我最初就是使用的这套，因为简单所以框架改动不大。<em>可是、可是客户爸爸它不认啊，</em> 需要当前标签页显示什么回来后还是什么，没辙只能苦逼研究研究改框架了。</p><div class="img-wrap"><div class="img-bg" style="background:#f7f7f7"><img class="img" src="../../img/article/记一次对标签页与路由联动的处理方案/pic1.png" alt="image"/></div></div><h3 id="2-子页面新建标签页">2. 子页面新建标签页</h3><p>在最初的设想中是不限制子页面打开的数量，可以通过父页面跳转进不同内容下的相同子页面（组件），程序实现上没什么难度。但在业务上存在个问题：有些子页面是拥有回到父页面的功能（例如子页面新增后提交）。按照直觉来说，返回自然是回到进入子页面前的父页面状态，但是由于子页面不限制，所以 <strong>可能出现某一子页面还未关闭，父页面修改了内容打开了另一个子页面</strong>，这两个子页面是通过不同的查询条件筛选出的，但快照只能记录/返回最后一次的父页面信息，这近似于丢失了进入子页面前的父页面状态，回到原点了。</p><p>所以 <strong>同一个父页面下的子页面只能存在一个</strong>，前文已知标签与地址是一对一的，而子页面的地址中一定会携带参数，对标签来说虽然他们都拥有相同的组件但是地址上它们就是不同。那么我们干脆简单点，如果已经存在了一个子页面，那么在新的子页面打开前直接删除原子页面的标签和快照，然后再打开新的子页面，这解决了多个子标签的问题。另一方面由于地址转义的缘故，我们不能拿完整的地址去当作快照的 Key ，<strong>子页面快照所存储的 Key 是剔除参数后的地址</strong>。</p><p>最后就是父子页面的删除关系了，由于得满足子页面返回时是返回进入子页面前的父页面状态这一条件，那就不能出现只剩下子标签的情况。举个栗子：父页面是一个查询页，通过一些条件筛选出了结果，然后进入到某个结果的详情页，此时切换标签到父页面，并且删除了父页面标签，子页面还存在，此时子页面的返回就相当于父页面重新打开。所以为了避免业务上出现问题，最简单的处理还是 <strong>父页面关闭时，父页面下所有子页面都关闭</strong>。</p><h2 id="三、业务实现">三、业务实现</h2><p>理论分析后就是代码上的实现了，这里考虑了子页面的子页面跳转情况，在对他们的路径设置时额外添加了三个参数：<code>isChild</code>, <code>parComponent</code> ,<code>commonComponent</code> ，他们的关系如下：</p><div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/记一次对标签页与路由联动的处理方案/pic2.png" alt="image"/></div></div><p>父页面不关心也不需要知道自己有多少个子页面，所有子页面需要通过 <code>isChild</code> 标记自己是子页面；同时子页面需要通过 <code>parComponent</code> 记录自己上一个页面的组件名；除了父页面的直系子页面外，其它层级的子页面需要通过 <code>commonComponent</code> 记录最顶层父页面的组件名（或者叫祖先，嚯嚯嚯大笑）。</p><p>在创建首层子页面时，只要发现当前标签页中 <strong>存在记录了祖先是当前页面的子页面</strong> 或者 <strong>父页面是当前页面的子页面</strong> ，就提示是否先关闭已经打开的子页面（此处不关心他们的层级，也就是当前可能存在第三级的子页面，但是只要父页面打开第一级子页面时就关闭第三级子页面标签和第三级页面的快照）。</p><p>在关闭父页面时，<strong>寻找可能的子页面和子孙页面</strong>，然后发出提示弹窗需要连带一起关闭。当标签页只存在一个时不允许关闭，当标签页只存在父页面和它的子（孙）页面时，不允许关闭父页面。</p><h3 id="1-标签页的处理">1. 标签页的处理</h3><div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><a class="#code-1">1. 标签页的路由</a></li><li class="tab"><a class="#code-2">2. 标签页的切换</a></li><li class="tab"><a class="#code-3">3. 标签页的删除</a></li></ul><div class="tab-content"><div class="tab-pane active" id="code-1"><p>在上面的设计中父页面是一个唯一的值，带领着它的子页面，所以 <strong>父页面的路径存储一定不能携带参数</strong> ，但是 <strong>子页面的路径存储必须得携带参数</strong>。我们在 <code>TabComponent</code> 监听了路由切换事件，并通过它记录路由信息，这部分处理就在事件监听之中：</p><figure class="highlight ts"><figcaption><span>路由事件的处理（部分）</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> menuUrl = menu.url, sameTabChild = <span class="literal">false</span>, childComponent = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.menuList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果是子页面标签</span></span><br><span class="line">  <span class="keyword">if</span> (item.isChild &amp;&amp; !sameTabChild) &#123;</span><br><span class="line">    <span class="comment">//  相同的子页面组件名                                 不同的地址</span></span><br><span class="line">    <span class="keyword">if</span> (item.componentName === menu.componentName &amp;&amp; item.url !== menuUrl) &#123;</span><br><span class="line">      sameTabChild = <span class="literal">true</span>;</span><br><span class="line">      childComponent = item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  当前页是子页面                子页面的子页面</span></span><br><span class="line">    <span class="keyword">if</span> (menu.isChild &amp;&amp; item.parComponent === menu.componentName ) &#123;</span><br><span class="line">      sameTabChild = <span class="literal">true</span>;</span><br><span class="line">      childComponent = item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即将打开的页面为相同的子页面</span></span><br><span class="line"><span class="keyword">if</span> (sameTabChild) &#123;</span><br><span class="line">  <span class="keyword">const</span> indexOfChild = <span class="built_in">this</span>.menuList.findIndex(<span class="function"><span class="params">p</span> =&gt;</span> p.componentName === childComponent.componentName);</span><br><span class="line">  <span class="built_in">this</span>.menuList.splice(indexOfChild, <span class="number">1</span>); <span class="comment">// 删除原【子页面】记录值</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (menu.isChild === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">// 为了确保唯一性，剔除可能存在的参数</span></span><br><span class="line">  <span class="keyword">const</span> indexParam = menu.url.indexOf(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">  menuUrl = menu.url.substring(<span class="number">0</span>, indexParam === -<span class="number">1</span> ? menu.url.length : indexParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="code-2"><p>前文已经说了切换本质是路由跳转，而拿到的地址是网页 Url ，所以得先提取出参数部分转换为对象才能跳转。</p><figure class="highlight ts"><figcaption><span>标签页的切换</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">nzSelectChange</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.currentIndex = event.index;</span><br><span class="line">  <span class="keyword">const</span> menu = <span class="built_in">this</span>.menuList[<span class="built_in">this</span>.currentIndex], temp = menu.url.indexOf(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> params = temp === -<span class="number">1</span> ? <span class="literal">null</span> : <span class="built_in">this</span>.getUrlParams(menu.url.substring(temp + <span class="number">1</span>, menu.url.length));</span><br><span class="line">  <span class="keyword">const</span> url = temp === -<span class="number">1</span> ? menu.url : menu.url.substring(<span class="number">0</span>, temp === -<span class="number">1</span> ? menu.url.length : temp);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.router.navigate([url], &#123;</span><br><span class="line">    queryParams: params,  <span class="comment">// 存放可能的参数</span></span><br><span class="line">    skipLocationChange: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Url 参数转 对象</span></span><br><span class="line"><span class="function"><span class="title">getUrlParams</span>(<span class="params">url</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> hash, myJson = &#123;&#125;, hashes = url.slice(url.indexOf(<span class="string">&#x27;?&#x27;</span>) + <span class="number">1</span>).split(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hashes.length; i++) &#123;</span><br><span class="line">    hash = hashes[i].split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    myJson[hash[<span class="number">0</span>]] = <span class="built_in">decodeURIComponent</span>(hash[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> myJson;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="code-3"><p>大致的删除逻辑上文已经描述了，代码部分：</p><figure class="highlight ts"><figcaption><span>标签页的删除</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭选项标签</span></span><br><span class="line"><span class="function"><span class="title">closeUrl</span>(<span class="params">menu</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 如果只有一个不可以关闭</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.menuList.length === <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前只剩下父页面和对应子页面，则不可以关闭父页面</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.menuList.length === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.menuList.some(<span class="function"><span class="params">item</span> =&gt;</span> item.isChild</span><br><span class="line">      &amp;&amp; (item.parComponent === menu.componentName || item.commonComponent === menu.componentName))) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当前关闭的是第几个路由</span></span><br><span class="line">  <span class="keyword">const</span> index = <span class="built_in">this</span>.menuList.findIndex(<span class="function"><span class="params">p</span> =&gt;</span> p.url === menu.url);</span><br><span class="line">  <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;  <span class="comment">// 子页面的子页面返回子页面时造成的  （坏笑</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找可能存在的子页面</span></span><br><span class="line">  <span class="keyword">const</span> childComponent = <span class="built_in">this</span>.menuList.filter(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">this</span>.menuList[index].isChild === <span class="literal">undefined</span></span><br><span class="line">    &amp;&amp; item.parComponent === <span class="built_in">this</span>.menuList[index].componentName) || [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找可能存在的子页面的剩下子页面</span></span><br><span class="line">  <span class="built_in">this</span>.menuList.filter(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">this</span>.menuList[index].isChild === <span class="literal">undefined</span>    <span class="comment">// 本身必须是父页面</span></span><br><span class="line">    &amp;&amp; item.commonComponent === <span class="built_in">this</span>.menuList[index].componentName <span class="comment">// 祖先</span></span><br><span class="line">    &amp;&amp; item.parComponent !== <span class="built_in">this</span>.menuList[index].componentName  <span class="comment">// 不是第一个子页面</span></span><br><span class="line">  ).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    childComponent.push(item);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除</span></span><br><span class="line">  <span class="keyword">if</span> (childComponent.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.deleteTabs(menu);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.modal.confirm(&#123;</span><br><span class="line">      nzContent: <span class="string">&#x27;【&#x27;</span> + childComponent[<span class="number">0</span>].title + <span class="string">&#x27;】页将一并关闭，是否继续？&#x27;</span>,</span><br><span class="line">      nzCancelText: <span class="string">&#x27;否&#x27;</span>,</span><br><span class="line">      nzOkText: <span class="string">&#x27;是&#x27;</span>,</span><br><span class="line">      nzOkType: <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">      nzOnOk: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        childComponent.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.deleteTabs(menu, item);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 Tab 删除</span></span><br><span class="line"><span class="function"><span class="title">deleteTabs</span>(<span class="params">menu, childComponent = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="built_in">this</span>.menuList.findIndex(<span class="function"><span class="params">p</span> =&gt;</span> p.url === menu.url);</span><br><span class="line">  <span class="keyword">const</span> indexMenuParam = menu.url.indexOf(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> path = menu.url.substring(<span class="number">0</span>, indexMenuParam === -<span class="number">1</span> ? menu.url.length : indexMenuParam) + <span class="string">&#x27;_&#x27;</span> + menu.componentName;</span><br><span class="line">  <span class="built_in">this</span>.menuList.splice(index, <span class="number">1</span>); <span class="comment">// 删除父</span></span><br><span class="line">  SimpleReuseStrategy.deleteRouteSnapshot(path); <span class="comment">// 删除复用</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除子</span></span><br><span class="line">  <span class="keyword">if</span> (childComponent) &#123;</span><br><span class="line">    <span class="keyword">const</span> indexOfChild = <span class="built_in">this</span>.menuList.findIndex(<span class="function"><span class="params">p</span> =&gt;</span> p.componentName === childComponent.componentName);</span><br><span class="line">    <span class="keyword">const</span> indexChildParam = childComponent.url.indexOf(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> childPath = childComponent.url.substring(<span class="number">0</span>, indexChildParam === -<span class="number">1</span> ? childComponent.url.length : indexChildParam)</span><br><span class="line">      + <span class="string">&#x27;_&#x27;</span> + childComponent.componentName;</span><br><span class="line">    <span class="built_in">this</span>.menuList.splice(indexOfChild, <span class="number">1</span>); <span class="comment">// 删除子页面</span></span><br><span class="line">    SimpleReuseStrategy.deleteRouteSnapshot(childPath);  <span class="comment">// 删除子页面复用</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.settingsService.setMenuList(<span class="built_in">this</span>.menuList);  <span class="comment">// 记录</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前删除的对象是当前选中的，那么需要跳转</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.currentUrl === menu.url) &#123;</span><br><span class="line">    <span class="comment">// 显示上一个选中</span></span><br><span class="line">    <span class="keyword">let</span> menu = <span class="built_in">this</span>.menuList[index - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (!menu) &#123;<span class="comment">// 如果上一个没有下一个选中</span></span><br><span class="line">      menu = <span class="built_in">this</span>.menuList[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跳转路由</span></span><br><span class="line">    <span class="built_in">this</span>.router.navigate([menu.url]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h3 id="2-路由守卫">2. 路由守卫</h3><p>我们需要在即将替换关闭子页面时，发出提示，这个行为交给 <code>CanActivate</code> 比较方便。</p><details cyan><summary> Angular 路由守卫 </summary>              <div class='content'>              <figure class="highlight ts"><figcaption><span>can-overwrite-tab.guard.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">canActivate(</span><br><span class="line">  next: ActivatedRouteSnapshot,</span><br><span class="line">  state: RouterStateSnapshot): Observable&lt;<span class="built_in">boolean</span> | UrlTree&gt; | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span> | UrlTree&gt;  &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = state.url;</span><br><span class="line">    <span class="keyword">const</span> nextData = next.data;</span><br><span class="line">    <span class="keyword">const</span> menuList = <span class="built_in">this</span>.settingsService.getMenuList() || [];</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>, childComponent = <span class="literal">null</span>, msg = <span class="literal">null</span>, indexParam = <span class="number">0</span>;</span><br><span class="line">    menuList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="comment">// 判断 1</span></span><br><span class="line">        <span class="keyword">if</span> (item.isChild &amp;&amp; item.parComponent === nextData.parComponent &amp;&amp; url !== item.url) &#123;</span><br><span class="line">          flag = <span class="literal">true</span>;</span><br><span class="line">          childComponent = item;</span><br><span class="line">          indexParam = url.indexOf(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">          msg = <span class="string">&#x27;已打开【&#x27;</span> + nextData.title + <span class="string">&#x27;】页，是否继续？&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断 2</span></span><br><span class="line">        <span class="keyword">if</span> (item.isChild &amp;&amp; item.parComponent === nextData.componentName &amp;&amp; url !== item.url) &#123;</span><br><span class="line">          flag = <span class="literal">true</span>;</span><br><span class="line">          childComponent = item;</span><br><span class="line">          indexParam = item.url.indexOf(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">          msg = <span class="string">&#x27;已打开【&#x27;</span> + item.title + <span class="string">&#x27;】页，是否继续？&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      <span class="built_in">this</span>.modal.confirm(&#123;</span><br><span class="line">        nzContent: msg,</span><br><span class="line">        nzCancelText: <span class="string">&#x27;否&#x27;</span>,</span><br><span class="line">        nzOkText: <span class="string">&#x27;是&#x27;</span>,</span><br><span class="line">        nzOkType: <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">        nzOnOk: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> childLength = childComponent.url.length;</span><br><span class="line">          <span class="keyword">const</span> childPath = childComponent.url.substring(<span class="number">0</span>, indexParam === -<span class="number">1</span> ? childLength : indexParam)</span><br><span class="line">            + <span class="string">&#x27;_&#x27;</span> + childComponent.componentName;</span><br><span class="line">          SimpleReuseStrategy.deleteRouteSnapshot(childPath);  <span class="comment">// 先一步删除快照</span></span><br><span class="line">          resolve(<span class="literal">true</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        nzOnCancel: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> NG-ZORRO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 的简要使用</title>
      <link href="/blog/e9bd7c2d/"/>
      <url>/blog/e9bd7c2d/</url>
      
        <content type="html"><![CDATA[<p class="p center logo large"><em>Docker 的简要使用 <svg class="iconfont emoji" aria-hidden="true"><use xlink:href="#icon-jr-chunjie"></use></svg></em></p><br><p class='p center'>2021 年，新年的第一篇文章~</p><h2 id="一、常用命令">一、常用命令</h2><figure class="highlight shell"><figcaption><span>将当前用户加入docker组</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a $&#123;USER&#125; docker</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>重新启动docker服务</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>常用命令</span></figcaption><table><tr><td class="code"><pre><span class="line">docker images                      #查看所有本地主机上的镜像</span><br><span class="line">docker pull mysql                  #下载镜像</span><br><span class="line">docker rmi -f ID/name              #删除镜像</span><br><span class="line"></span><br><span class="line">docker ps 命令</span><br><span class="line">      -a                           #列出当前正在运行的容器 + 带出历史运行中的容器</span><br><span class="line">      -n=?                         #显示最近创建的容器</span><br><span class="line">      -q                           #只显示容器的编号</span><br><span class="line"></span><br><span class="line">docker rm id                       #删除指定的容器，不能删除在运行的容器，如果要强制删除 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)      #删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm    #删除所有的容器</span><br><span class="line"></span><br><span class="line">docker start 容器id                #启动容器</span><br><span class="line">docker restart 容器id              #重启容器</span><br><span class="line">docker stop 容器id                 #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id                 #停止当前容器</span><br></pre></td></tr></table></figure><h2 id="二、部署容器">二、部署容器</h2><figure class="highlight shell"><figcaption><span>相关命令</span></figcaption><table><tr><td class="code"><pre><span class="line">--name xxx                    #为容器设置一个别名</span><br><span class="line">--restart=always              #总是重启，主机重启后启动容器</span><br><span class="line">-u &quot;$(id -u):$(id -g)&quot;        #绑定权限，也可单独指定 如 -u root</span><br><span class="line">-p 8910:8080                  #绑定端口，前者为主机，后者为容器</span><br><span class="line">-v &quot;/home/coder:/home/coder&quot;  #绑定目录，前者为主机，后者为容器</span><br><span class="line">-e PASSWORD=&#x27;******&#x27;          #环境变量，根据实际情况而定</span><br></pre></td></tr></table></figure><p><strong>部署 portaine</strong></p><figure class="highlight shell"><figcaption><span>部署 portaine</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo docker run -d -p 8915:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name=portainer  portainer/portainer-ce</span><br></pre></td></tr></table></figure><p><strong>部署 code-service</strong></p><figure class="highlight shell"><figcaption><span>部署 code-service</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo docker run -d --name code-server --restart=always -u &quot;$(id -u):$(id -g)&quot; -p 8910:8080 -p 5500:5500 -v &quot;/home/coder/coder-service:/home/coder/project&quot; -v &quot;/home/coder/coder-config:/home/coder/.config&quot; -e PASSWORD=&#x27;******&#x27; codercom/code-server:latest</span><br></pre></td></tr></table></figure><h2 id="三、一些命令">三、一些命令</h2><figure class="highlight shell"><figcaption><span>安装 oh-my-zsh</span></figcaption><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(wget -O- https://cdn.jsdelivr.net/gh/robbyrussell/oh-my-zsh/tools/install.sh)&quot;</span><br><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>安装 Node</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装 NVM</span></span><br><span class="line">wget -qO- https://cdn.jsdelivr.net/gh/creationix/nvm/install.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">刷新环境</span></span><br><span class="line">osurce ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装 Node 仅linux下可用</span></span><br><span class="line">nvm install --lts</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Portaine </tag>
            
            <tag> Code-server </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design of Angular 快速上手系列</title>
      <link href="/blog/8ab78feb/"/>
      <url>/blog/8ab78feb/</url>
      
        <content type="html"><![CDATA[<p class="p center logo large"><em>Angular 快速上手系列</em></p><br><br><p>准确来说，我不是职业前端，因为需要使用 Angular 框架完成项目，所以顺带了解到了 NG-ZORRO 这套前端框架。整个过程处于边学习边使用的状态，主要的方式也是偏向于完成设计内容而非了解其实现原理。系统前端这块儿，使用的是 <code>Node 12.19.0</code> 和 <code>NG-ZORRO 9.3.0</code> ，开发软件 <code>WebStorm</code> 。</p><p>Ant Design of Angular ，也就是 <em>ng-zorro-antd</em> ，是遵循 Ant Design 设计规范的 Angular UI 组件库，全部代码开源并遵循 MIT 协议，任何企业、组织及个人均可免费使用。它的特定：提炼自企业级中后台产品的交互语言和视觉风格。开箱即用的高质量 Angular 组件，与 Angular 保持同步升级。使用 TypeScript 构建，提供完整的类型定义文件。支持 OnPush 模式，性能卓越等等。</p><p>当然，以上内容均是摘自官网，我觉得它好用的原因是：<span class="bb_spoiler" title="臣妾做不到哇">我不会写前端样式，而它拥有现成的组件库</span>（坏笑 😏</p><h2 id="一、公共配置">一、公共配置</h2><h3 id="1-属性基础配置">1. 属性基础配置</h3><p>需要注意的配置点：1.全局公共属性配置，比如设定 <code>message</code> 组件的 <code>top</code> 高度，2.图标库，导入到项目中的 <code>icons</code> 图标，3.组件库，V8 版本弃用了 <code>NgZorroAntdModule</code> <em>(V10 彻底不支持)</em>，所以需要独立引入。</p><p>已知在正常使用过程中，在自己的 <code>component</code> 中引入 NG-ZORRO 的组件是需要进入导入的，重复的导入行为势必会很麻烦，所以可以将其抽成一个公共的 <code>modal</code> ，预先性的导入，再将其引入到 <code>AppComponent</code> 中的 <code>imports</code> 里，可以尽量减少一些工作量。另外，对于一些提供了公共配置的组件，通过注入令牌 <code>NZ_CONFIG</code> 提供一个 <code>NzConfig</code> 接口对象，将全局配置项注入到 <code>NzConfigService</code> 之中，在减少工作量的同时还统一项目中的各个显示效果。</p><p><em>PS：全局配置优先级低于独立为组件的某个实例单独设置的值</em></p><details cyan><summary> icons-provider.module.ts </summary>              <div class='content'>              <figure class="highlight ts"><figcaption><span>icons-provider.module.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NZ_ICONS, NzIconModule &#125; <span class="keyword">from</span> <span class="string">&#x27;ng-zorro-antd/icon&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  MenuFoldOutline,</span><br><span class="line">  MenuUnfoldOutline,</span><br><span class="line">  FormOutline,</span><br><span class="line">  DashboardOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-angular/icons&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> icons = [MenuFoldOutline, MenuUnfoldOutline, DashboardOutline, FormOutline];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [NzIconModule],</span><br><span class="line">  <span class="built_in">exports</span>: [NzIconModule],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123; <span class="attr">provide</span>: NZ_ICONS, <span class="attr">useValue</span>: icons &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">IconsProviderModule</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan><summary> ng-zorro-antd.module.ts </summary>              <div class='content'>              <figure class="highlight ts"><figcaption><span>ng-zorro-antd.module.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 已经忽略 import 部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NG ZORRO 全局配置文件</span></span><br><span class="line"><span class="keyword">const</span> ngZorroConfig: NzConfig = &#123;</span><br><span class="line">  message: &#123;<span class="attr">nzTop</span>: <span class="number">100</span>&#125;,</span><br><span class="line">  notification: &#123;<span class="attr">nzTop</span>: <span class="number">300</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;<span class="attr">provide</span>: NZ_CONFIG, <span class="attr">useValue</span>: ngZorroConfig&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">exports</span>: [</span><br><span class="line">    NzAffixModule,</span><br><span class="line">    NzAlertModule,</span><br><span class="line">    NzAnchorModule,</span><br><span class="line">    NzAutocompleteModule,</span><br><span class="line">    NzAvatarModule,</span><br><span class="line">    NzBackTopModule,</span><br><span class="line">    NzBadgeModule,</span><br><span class="line">    NzButtonModule,</span><br><span class="line">    NzBreadCrumbModule,</span><br><span class="line">    NzCalendarModule,</span><br><span class="line">    NzCardModule,</span><br><span class="line">    NzCarouselModule,</span><br><span class="line">    NzCascaderModule,</span><br><span class="line">    NzCheckboxModule,</span><br><span class="line">    NzCollapseModule,</span><br><span class="line">    NzCommentModule,</span><br><span class="line">    NzDatePickerModule,</span><br><span class="line">    NzDescriptionsModule,</span><br><span class="line">    NzDividerModule,</span><br><span class="line">    NzDrawerModule,</span><br><span class="line">    NzDropDownModule,</span><br><span class="line">    NzEmptyModule,</span><br><span class="line">    NzFormModule,</span><br><span class="line">    NzGridModule,</span><br><span class="line">    NzI18nModule,</span><br><span class="line">    NzIconModule,</span><br><span class="line">    NzInputModule,</span><br><span class="line">    NzInputNumberModule,</span><br><span class="line">    NzLayoutModule,</span><br><span class="line">    NzListModule,</span><br><span class="line">    NzMentionModule,</span><br><span class="line">    NzMenuModule,</span><br><span class="line">    NzMessageModule,</span><br><span class="line">    NzModalModule,</span><br><span class="line">    NzNoAnimationModule,</span><br><span class="line">    NzNotificationModule,</span><br><span class="line">    NzPageHeaderModule,</span><br><span class="line">    NzPaginationModule,</span><br><span class="line">    NzPopconfirmModule,</span><br><span class="line">    NzPopoverModule,</span><br><span class="line">    NzProgressModule,</span><br><span class="line">    NzRadioModule,</span><br><span class="line">    NzRateModule,</span><br><span class="line">    NzResultModule,</span><br><span class="line">    NzSelectModule,</span><br><span class="line">    NzSkeletonModule,</span><br><span class="line">    NzSliderModule,</span><br><span class="line">    NzSpinModule,</span><br><span class="line">    NzStatisticModule,</span><br><span class="line">    NzStepsModule,</span><br><span class="line">    NzSwitchModule,</span><br><span class="line">    NzTableModule,</span><br><span class="line">    NzTabsModule,</span><br><span class="line">    NzTagModule,</span><br><span class="line">    NzTimePickerModule,</span><br><span class="line">    NzTimelineModule,</span><br><span class="line">    NzToolTipModule,</span><br><span class="line">    NzTransButtonModule,</span><br><span class="line">    NzTransferModule,</span><br><span class="line">    NzTreeModule,</span><br><span class="line">    NzTreeSelectModule,</span><br><span class="line">    NzTypographyModule,</span><br><span class="line">    NzUploadModule,</span><br><span class="line">    NzWaveModule,</span><br><span class="line">    NzResizableModule,</span><br><span class="line">    NzPipesModule,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NgZorroAntdCommonModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="2-样式覆盖配置">2. 样式覆盖配置</h3><p>样式覆盖可以分成两种：全局或者各个子组件中的。全局样式覆盖需要先找到默认的样式内容，地址如下：<a href="https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/components/style/themes/default.less">default.less</a> 。首先我们在 <code>src</code> 目录下建立一个单独的 <code>theme.less</code> 文件，在 <code>angular.json</code> 文件的 <code>styles</code> 列表加入该文件，拷贝默认样式文件内容，按需修啊即可（比如修改公共颜色）</p><figure class="highlight"><figcaption><span>angular.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&quot;styles&quot;: [</span><br><span class="line">    <span class="string">&quot;src/theme.less&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>组件中的独立样式修改就更简单了，找到对应的 <code>class</code> 名称，通过 <code>::ng-deep</code> 覆盖它！另外留意一下样式污染的可能，建议通过嵌套结构减少样式修改的范围。</p><figure class="highlight scss"><figcaption><span>some style</span></figcaption><table><tr><td class="code"><pre><span class="line">::ng-deep .ant-input-number &#123;</span><br><span class="line">    width: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础的配置大概也就以上两个部分的，其它的就是各类组件的使用了。</p><h2 id="二、表单组件">二、表单组件</h2><p>表单的用途就太广泛了，注册、登录、查询、信息提交等等都需要到，本文中的所有关于表单的内容均已 <a href="https://angular.io/guide/reactive-forms#reactive-forms">响应式表单</a> 展开，与之对立的 <a href="https://angular.io/guide/forms#template-driven-forms">模板驱动表单</a> 不做学习。</p><h3 id="1-基础表单设定">1. 基础表单设定</h3><p><code>FormGroup</code> ，我们通过使用 <code>FormBuilder</code> 对象提供的 <code>group()</code> 方法，来创建 <code>FormGroup</code> 和 <code>FormControl</code> 对象，以一个简单的申请为例也就是这个样子：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">validatePassWdForm!: FormGroup;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> fb: FormBuilder</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.validateForm = <span class="built_in">this</span>.fb.group(&#123;</span><br><span class="line">        name: [<span class="literal">null</span>, [Validators.required]],</span><br><span class="line">        email: [<span class="literal">null</span>, [Validators.required, Validators.email]],</span><br><span class="line">        pwd: [<span class="literal">null</span>, [Validators.required, <span class="built_in">this</span>.validList.validateWeakPwd]],</span><br><span class="line">        agree: [<span class="literal">false</span>, [Validators.requiredTrue]]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">validList = &#123;</span><br><span class="line">    validateWeakPwd: (control: FormControl): &#123; [s: <span class="built_in">string</span>]: <span class="built_in">boolean</span> &#125; =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> testString = <span class="regexp">/^(?=.*[a-zA-Z])(?=.*\d)(?=.*[~!@#$%^&amp;*()_+`\-=&#123;&#125;:&quot;;&#x27;&lt;&gt;?,.\/]).&#123;8,16&#125;$/</span>;</span><br><span class="line">        <span class="keyword">if</span> (!control.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">required</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!testString.test(control.value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">weakPwd</span>: <span class="literal">true</span>, <span class="attr">error</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以理解为：<code>字段名称: [初始值，[验证器1,验证器2,...], [异步验证器1,异步验证器2,...]]</code><br>初始值可以为空，也可以赋值，验证器这边可以使用一些默认自带的，就比如 <code>Validators.required</code> 必填校验，也可以自定义验证规则，此外还支持异步验证，接收与后端数据交互后的验证效果，比如用户名唯一性校验。而对应到页面上，字段名称与 <code>formControlName</code> 对应，按照上面例子所对应的表单应该是：</p><details cyan><summary> 响应式表单 </summary>              <div class='content'>              <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">nz-form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;validateForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzFor</span>=<span class="string">&quot;name&quot;</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzErrorTip</span>=<span class="string">&quot;请输入名称&quot;</span> <span class="attr">nzHasFeedback</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名称&quot;</span> <span class="attr">nz-input</span> <span class="attr">formControlName</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzFor</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-control</span> [<span class="attr">nzErrorTip</span>]=<span class="string">&quot;template&quot;</span> <span class="attr">nzHasFeedback</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span> <span class="attr">nz-input</span> <span class="attr">formControlName</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">template</span> <span class="attr">let-control</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;control.hasError(&#x27;required&#x27;)&quot;</span>&gt;</span>请输入您的邮箱<span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;control.hasError(&#x27;email&#x27;)&quot;</span>&gt;</span>邮箱格式不正确<span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzFor</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-control</span> [<span class="attr">nzErrorTip</span>]=<span class="string">&quot;errorTplPwd&quot;</span> <span class="attr">nzHasFeedback</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">nz-input</span> <span class="attr">formControlName</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">errorTplPwd</span> <span class="attr">let-control</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;control.hasError(&#x27;required&#x27;)&quot;</span>&gt;</span>请输入新密码<span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;control.hasError(&#x27;weakPwd&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                必须包含字母、数字、特殊字符，长度8~16位！</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-form-item</span> <span class="attr">nz-row</span> <span class="attr">class</span>=<span class="string">&quot;register-area&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzErrorTip</span>=<span class="string">&quot;请勾选服务协议&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">nz-checkbox</span> <span class="attr">formControlName</span>=<span class="string">&quot;agree&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我已阅读并同意接受《服务协议》<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="2-表单值的赋值">2. 表单值的赋值</h3><p>除了在初始化时通过 FormBuilder 构建外，还可以独立的进入 <strong>表单赋值</strong> ，批量设置的可以使用 <code>patchValue()</code> 方法，单独设置可以使用 <code>setValue()</code> 方法。</p><figure class="highlight ts"><figcaption><span>表单赋值</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.validateForm.patchValue(&#123;</span><br><span class="line">    name: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    email: <span class="string">&#x27;xiaoming@gmail.com&#x27;</span>,</span><br><span class="line">    pwd: <span class="string">&#x27;!QAZ2wsx&#x27;</span>,</span><br><span class="line">    agree: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.validateForm.get(<span class="string">&#x27;email&#x27;</span>).setValue(<span class="string">&#x27;xiaoming@gmail.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.validateForm.controls.pwd.setValue(<span class="string">&#x27;!QAZ2wsx&#x27;</span>);</span><br></pre></td></tr></table></figure><p>自然而然的，重设验证器，重置表单也不在话下：</p><ul><li>设置验证器：<code>this.validateForm.get(name).setValidators(newValidator);</code></li><li>全局表单只读：<code>this.validateForm.disable();  // 启用 enable();</code></li><li>单独字段只读：<code>this.validateForm.get(name).disable();</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> NG-ZORRO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 快速入坑</title>
      <link href="/blog/ff35080b/"/>
      <url>/blog/ff35080b/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Const-与-Var-的区别">一、Const 与 Var 的区别</h2><ul><li><p>只允许声明事赋值</p></li><li><p>先定义后使用</p></li><li><p>不允许重复声明</p></li><li><p>不支持变量提升</p><figure class="highlight js"><figcaption><span>不支持变量提升</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; </span><br></pre></td></tr></table></figure><p>而 let / const 会在第一行报 <code>Cannot access 'a' before initialization</code> ，即需要先定义后使用。</p></li><li><p>解决了全局变量污染（不属于顶层对象 window）</p></li><li><p>暂时性死区 （区块中的 let/const 所声明变量，形成封闭作用域，覆盖作用域之外的同名变量，也就是需要遵循先定义后使用原则）</p><figure class="highlight js"><figcaption><span>暂时性死区</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> URL = <span class="string">&#x27;https://xxx.com&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    URL = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// 此处报错</span></span><br><span class="line">    <span class="keyword">const</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时报：<code>Uncaught SyntaxError: Missing initializer in const declaration</code></p></li><li><p>块级作用域特性</p></li></ul><h2 id="二、Const-变量的可变性">二、Const 变量的可变性</h2><div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/ES6快速入坑/image-20200906164049377.png" alt="Const 变量的可变性" style="width:400px;"/></div><span class="image-caption">Const 变量的可变性</span></div><ul><li><p>const 定义的引用类型变量，其内容可以更改，可以利用 freeze 冻结保证内容不被改变。</p></li><li><p>Object.freeze(obj) : 只能冻结一层，例如 const 定义对象中的某个属性为数组，数组中内容依旧可改。</p></li><li><p>自定义方法遍历实现深层次冻结。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFreeze</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">            myFreeze(obj[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、箭头函数">三、箭头函数</h2><ul><li>箭头函数的 this ：它会捕获其所在上下文的 this 值， 作为自己的 this 值。</li><li>参考链接：<a href="https://www.cnblogs.com/dongcanliang/p/7054176.html">This 指向详细解析（箭头函数）</a></li></ul><p><strong>箭头函数需要注意的场景：</strong></p><ul><li>箭头函数作为事件回调函数时。</li><li>对象中方法的箭头函数时（建议不用）。</li><li>构造函数中的箭头函数。</li><li>箭头函数中 arguments 失效。</li><li>函数原型下的方法。</li></ul><h2 id="四、解构赋值">四、解构赋值</h2><details yellow><summary> 等号左右两边完全匹配 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    name: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = people;</span><br><span class="line"><span class="built_in">console</span>.log(name, age)  <span class="comment">// xxx 18</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">    name: <span class="string">&#x27;xiaoming&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    mother: &#123;</span><br><span class="line">        name: <span class="string">&#x27;xiaohong&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    mother: &#123;</span><br><span class="line">        name: motherName  <span class="comment">// 别名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; = people;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name, age, motherName) <span class="comment">// xiaoming 18 xiaohong</span></span><br></pre></td></tr></table></figure>              </div>            </details><details green><summary> 如何正确的使用解构赋值 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">[a, b, c]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function">(<span class="params">&#123;name, age, sex = <span class="string">&#x27;boy&#x27;</span>&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age, sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;</span><br><span class="line">    name: <span class="string">&#x27;xiaohong&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">    sex: <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">&#125;);  <span class="comment">// xiaohong 18 girl</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[b, a] = [a, b];</span><br><span class="line"><span class="built_in">console</span>.log(a, b);  <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> json = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;xiaoming&quot;, &quot;age&quot;: 18&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"><span class="built_in">console</span>.log(name, age); <span class="comment">// xiaoming 18</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;./data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123;data: &#123;name, age&#125;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Const </tag>
            
            <tag> Arrow Function </tag>
            
            <tag> Desctructuring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AdGuard | 保护隐私 | 拦截广告 | DOH 支持</title>
      <link href="/blog/c949262/"/>
      <url>/blog/c949262/</url>
      
        <content type="html"><![CDATA[<div class="note radiation yellow"><p>这是一篇水文。</p></div><h2 id="一、隐私保护">一、隐私保护</h2><p>在 AdGuard 的设置模块中有一个名为隐形模式的选择项，这里定义是 <strong>从成千上万的互联网跟踪器中保护您的身份和个人敏感信息不被泄露</strong> 。早期在浏览器的请求中，有一个名为 <em>请勿跟踪（DNT）</em> 的设置，设计本身到是好意，但他更像是个君子协议（总有小人），还是不完全靠谱的。</p><h3 id="跟踪方式">跟踪方式</h3><p>主要是对于 cookie 的处理，一般来说网站会利用 cookie 存储一些信息以标记用户，AdGuard 可以修改所有 cookie 的过期时间，对于第三方 cookie ，大可以直接销毁掉，同类型的还有第三方的请求头或授权头，统统勾选拦截即可。另外第一方 cookie 一般会涉及用户自动登录，到可以不去拦截，这类内容的过滤主要是过滤身份标记，特征值等等。</p><h3 id="浏览器-API-与-Windows-跟踪">浏览器 API 与 Windows 跟踪</h3><p>WebRTC 通信协议，即使是开启了代理也有暴漏真实 IP 地址的风险，一般来说也不会用浏览器在线聊天，建议关闭。除此之外还有推送 API 和定位 API ，这种相当小众的需求还是拦截微妙。Flash ，一般来说这类严重过时的产物就应该直接关闭，最起码已经不被官方所支持了。 Windows 跟踪 中则是遥测、广告 ID，自动提交可疑病毒样本和 WAP 消息路由，无脑全勾选才是最佳选择呀。</p><h3 id="杂项">杂项</h3><p>前面所述都是拦截，而这部分则是伪装，包括自定义 Referrer 、自定义 User-Agent 和自定义 IP 地址。AdGuard 可以拦截替换请求头中的相关信息达到欺负服务器的目的（一些笨笨的检测方法会被欺骗到），提供一些假数据，隐藏真实信息。</p><h2 id="二、DOH-与-DOT">二、DOH 与 DOT</h2><p>好吧，实话说前半段皆是介绍 Adguard，这里进入正文：DNS 协议的加密。PC 版 AdGuard 在最近的更新中正式支持自定义 DNS ，其中便包括自定义 DOH 和 DOT ，这弥补了 Windows 系统无法设置 SNDS 的遗憾。</p><h3 id="SDNS">SDNS</h3><p>就像是 Http 到 Https 的演变过程一样，DNS 的隐私安全也被提上了议程。我在学习计算机网络时就一直感叹那些网络协议设计只巧妙（向下兼容）。DNS 的加密过程也是非常巧妙的，目前来说有两种方式，一为走 tls 协议，另一位混进 https 协议里。</p><p>SNDS 多加了一层鉴权使得通信过程得以保证。但是 DOT 的口碑不佳，因为 DOT 独占 853 端口，虽然无法被投毒，但是端口特征过于明显。DOH 则不同啦，和 Https 共用 443 端口，流量混淆起来，特征不明显更为安全。和 Http 劫持一样，不加密的 DNS 也有被劫持投毒的风险，一些恶意的运营商甚至可以通过此手段悄然无声的在网站中加载广告。</p><ul><li><code>https://dns.alidns.com/dns-query</code></li><li><code>https://doh.pub/dns-query</code></li><li><code>https://dns.google/dns-query</code></li></ul><p>以上三个，分别是阿里、腾讯、谷歌的 DOH 地址。加密是有代价的，但消耗却微不足道，所以势在必行！</p><h3 id="DNS-隐私">DNS 隐私</h3><p>这是一段 DNS over HTTPS 的简单介绍：</p><div class="note quote"><p>类似于 DNS over TLS 等机制， DNS over HTTPS 协议试图解决同样的安全和隐私问题。该机制并不考虑在原始 TLS 中包装 DNS 查询，而是包装在 HTTPS 中。而 HTTPS 协议本身是运行于TLS之上的。</p></div><div class="note quote"><p>该机制的合理性在于，用户无需防护未知中间者，只需防护恶意的网络管理员。如果网络管理员可以选择网络中通信的DNS服务器，那么用户就会在毫不知情的情况下被路由到某个恶意服务器。实话讲，根本无法相信咖啡店的 Wi-Fi 会有什么安全的 DNS 服务器。如果要加密的服务器并不符合你的利益，那么加密本身也起不了什么作用。</p></div><div class="note quote"><p>note quote 网络运营商可以强制人们始终使用他们所选择的服务器发出 DNS 请求，方法是针对其它服务器的请求实施中间人攻击（MITM），并自己回复它们，或者仅阻止 DNS 端口上与其他服务器之间的通信即可。DNS over TLS 可避免前者，并且由于 DNS over TLS 具有自己的服务端口，因此可以识别并阻止 DNS over TLS 流量。DNS over HTTPS 通过将 DNS 流量与所有其他 HTTPS 的流量混合在一起，完全避免产生上述问题。通常，管理者是无法禁止流向某个服务器的所有 HTTPS 流量。</p></div><div class="note quote"><p>DNS over TLS 和 DNS over HTTPS 之间的差异在于，某些人认为他们有权限制其所提供公用事业服务的用户，而一些用户则想直接让这些管控者“滚得远远的”。</p></div><h2 id="三、Adguard-Home">三、Adguard Home</h2><p>Adguard Home 可以说是一套自建 DNS 系统，除了它本身就有的精准屏蔽广告域名外，我们还可以利用它搭建一个属于自己的 SNDS。由于国内的政策对自建 DNS 方面允不允许不好说，流量特征明显的 DNS 和 DOT 显然是不行，万一被喝茶了可咋整，所以这里再次支持 DOH 啦，如同上文：通常，管理者是无法禁止流向某个服务器的所有 HTTPS 流量。</p><p>Https 默认端口为 443 端口，包括但不限于~ 部署一张 SSL 证书到服务器上，封死 53,853 。同时选择合适的上游 DNS ，最好用使用服务器终端 Ping 一番上游地址，否则，若是DNS 解析时间过长，直接影响浏览速度。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐私 </tag>
            
            <tag> Adguard </tag>
            
            <tag> DNS </tag>
            
            <tag> DOH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Don&#39;t Starve Together</title>
      <link href="/blog/8fafff0e/"/>
      <url>/blog/8fafff0e/</url>
      
        <content type="html"><![CDATA[<div class="note alien-monster cyan"><p>预告：饥荒联机版即将上线啦，欢迎各位围观，吼吼吼~</p></div><div class="note bell red"><p>本文章分为两部分，一部分备份记录 DST 的搭建，另一部分记录游戏订阅信息~</p></div><div class="note poo gray"><p>服务器订阅至 2022/11 月，可放心食用且性能尚可，不用像当初那样抠抠搜搜的使用啦~</p></div><span id="more"></span><h2 id="一、饥荒联机版搭建">一、饥荒联机版搭建</h2><p>大致的流程是这样的：</p><p><img src="../../img/article/DSTGame/image-20200718154336813.png" alt=""></p><div class="tabs" id="steam"><ul class="nav-tabs"><li class="tab active"><a class="#steam-1">1.安装 SteamCMD</a></li><li class="tab"><a class="#steam-2">2.安装饥荒服务端</a></li><li class="tab"><a class="#steam-3">3.解决依赖</a></li><li class="tab"><a class="#steam-4">4.上传配置文件</a></li><li class="tab"><a class="#steam-5">5.定制启动脚本</a></li></ul><div class="tab-content"><div class="tab-pane active" id="steam-1"><ul><li><strong>新建目录 steamcmd</strong></li></ul><p>此目录用于 steam 程序的安装目录。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir ~/steamcmd</span><br></pre></td></tr></table></figure><ul><li><strong>下载 SteamCMD 安装文件</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -P ~/steamcmd https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br></pre></td></tr></table></figure><ul><li><strong>解压压缩包</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/steamcmd</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvzf ~/steamcmd/steamcmd_linux.tar.gz</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="steam-2"><ul><li><strong>启动 steamcmd</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./steamcmd.sh</span><br></pre></td></tr></table></figure><ul><li><strong>使用公共账户登录 Steam</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">login anonymous</span><br></pre></td></tr></table></figure><ul><li><strong>指定游戏文件的安装目录</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">force_install_dir ../dstserver</span><br></pre></td></tr></table></figure><ul><li><strong>安装饥荒服务端</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">app_update 343050 validate</span><br></pre></td></tr></table></figure><ul><li><strong>退出 Steam 客户端</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="steam-3"><ul><li><strong>CentoS 依赖安装</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install libcurl.i686</span><br></pre></td></tr></table></figure><ul><li><strong>跳转到 DST /bin 目录</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dstserver/bin/lib32</span><br></pre></td></tr></table></figure><ul><li><strong>链接组件</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s /usr/lib/libcurl.so.4 libcurl-gnutls.so.4</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="steam-4"><ul><li><strong>上传 MOD 订阅文件</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dstserver/mods</span><br></pre></td></tr></table></figure><figure class="highlight lua"><figcaption><span>覆盖 dedicated_server_mods_setup.lua 文件</span></figcaption><table><tr><td class="code"><pre><span class="line">ServerModSetup(<span class="string">&quot;362175979&quot;</span>) <span class="comment">-- Wormhole Marks        标记相联通的虫洞</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;378160973&quot;</span>) <span class="comment">-- Global Positions      小地图显示玩家位置 共享地图发现</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;385006082&quot;</span>) <span class="comment">-- DST Path Lights       路径灯在黄昏时开启，在黎明时关闭</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;396822875&quot;</span>) <span class="comment">-- Spike Trap            增加两个陷阱 </span></span><br><span class="line">ServerModSetup(<span class="string">&quot;444235588&quot;</span>) <span class="comment">-- Deluxe Campfires      豪华营火 增加燃烧时间</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;458940297&quot;</span>) <span class="comment">-- FFood Values          显示食物价值</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;462434129&quot;</span>) <span class="comment">-- Restart               #重生 #复活 #自杀 Y:公聊 U:私聊</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;623286817&quot;</span>) <span class="comment">-- Free transplant       移植无需施肥</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;661253977&quot;</span>) <span class="comment">-- Don&#x27;t Drop Everything 死亡不掉落</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;663554209&quot;</span>) <span class="comment">-- Magic Freezer         更大个的冰箱 无损</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;666155465&quot;</span>) <span class="comment">-- Show Me               鼠标显示更多信息</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;659459255&quot;</span>) <span class="comment">-- Mandrake Tree         生成萤火虫</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;714712361&quot;</span>) <span class="comment">-- Starting NovicePacks  小橘子的新手礼包</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;785295023&quot;</span>) <span class="comment">-- Super Wall DST        超级墙DST 无敌的超级墙、自动门、栅栏和栅栏门</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;786556008&quot;</span>) <span class="comment">-- 45 Inventory Slots    45个格子</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;1216718131&quot;</span>) <span class="comment">-- 防卡两招              防卡两招</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;1301033176&quot;</span>) <span class="comment">-- Chinese Language     中文语言包 汉化了人物台词</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;1463539363&quot;</span>) <span class="comment">-- Automatic Gardener   自动园丁</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;1510231311&quot;</span>) <span class="comment">-- 人物 Ringo</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;1548459642&quot;</span>) <span class="comment">-- 人物 Hachi</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;1592689346&quot;</span>) <span class="comment">-- 人物 花花</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;1418746242&quot;</span>) <span class="comment">-- 汉化增强 Chinese++ (含中文高清字体)</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;572538624&quot;</span>) <span class="comment">--  Chinese Plus 中文汉化增强</span></span><br><span class="line">ServerModSetup(<span class="string">&quot;367546858&quot;</span>) <span class="comment">--  Chinese Language Pack 中文语言包</span></span><br></pre></td></tr></table></figure><ul><li><strong>上传存档配置文件</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.klei/DoNotStarveTogether</span><br></pre></td></tr></table></figure><ul><li>上传存档文件至本目录，从本地饥荒客户端拿出的文件其实还是需要配置补充一番的。</li><li>配置补全环境可参考: <a href="/article/game/77face98.html#%E4%BA%94%E3%80%81%E9%85%8D%E7%BD%AE%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E7%AB%AF-%EF%BC%88%E4%BA%8C%EF%BC%89">Linux 环境搭建饥荒服务器教程-配置饥荒服务端</a></li><li>实际操作体验可参考: <a href="https://cloud.tencent.com/developer/labs/lab/10382">Ubuntu Server 搭建饥荒联机版服务端</a></li></ul></div><div class="tab-pane" id="steam-5"><ul><li><strong>创建启动脚本</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ &amp;&amp; touch startDST.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>PS：此脚本同时启动地上和地下</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">steamcmd_dir=<span class="string">&quot;<span class="variable">$HOME</span>/steamcmd&quot;</span></span><br><span class="line">install_dir=<span class="string">&quot;<span class="variable">$HOME</span>/dstserver&quot;</span></span><br><span class="line">dontstarve_dir=<span class="string">&quot;<span class="variable">$HOME</span>/.klei/DoNotStarveTogether&quot;</span></span><br><span class="line">cluster_name=<span class="string">&quot;Cluster_1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$steamcmd_dir</span>&quot;</span> || fail <span class="string">&quot;Missing <span class="variable">$steamcmd_dir</span> directory!&quot;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$install_dir</span>/bin&quot;</span> || fail </span><br><span class="line"></span><br><span class="line">run_shared=(./dontstarve_dedicated_server_nullrenderer)</span><br><span class="line">run_shared+=(-console)</span><br><span class="line">run_shared+=(-cluster <span class="string">&quot;<span class="variable">$cluster_name</span>&quot;</span>)</span><br><span class="line">run_shared+=(-monitor_parent_process $$)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;<span class="variable">$&#123;run_shared[@]&#125;</span>&quot;</span> -shard Caves  | sed <span class="string">&#x27;s/^/Caves:  /&#x27;</span> &amp;</span><br><span class="line"><span class="string">&quot;<span class="variable">$&#123;run_shared[@]&#125;</span>&quot;</span> -shard Master | sed <span class="string">&#x27;s/^/Master: /&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>添加执行权限</strong></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod u+x ./startDST.sh</span><br></pre></td></tr></table></figure></div></div></div><h2 id="二、服务器信息">二、服务器信息</h2><br><p class='p center logo large'>Don't Starve Together</p><div style='text-align: center;font-size: 90%;font-weight: bold;margin: 10px;'>  服务器名称：inkss  服务器密码：<psw>inkss.cn</psw></div><br><details cyan><summary> 额外添加了三个人物 </summary>              <div class='content'>              <div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/DSTGame/image-20200718164133476.png' data-fancybox='default' data-caption='饥荒'><img fancybox src="../../img/article/DSTGame/image-20200718164133476.png" alt="饥荒"></a>        <span class='image-caption'>饥荒</span>      </div></p></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次Ubuntu20.04LTS安装体验</title>
      <link href="/blog/481358a6/"/>
      <url>/blog/481358a6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、序言">一、序言</h2><p>我也算是用了很久的 Ubuntu 系统（这个很久大概是一两年左右），初接触在 Ubuntu 14 ，正式入坑为 16，18 退坑。对于 Ubuntu 来说，以日常使用的角度来说，自然首选 LTS 版本，中间的迭代版本是肯定不做考虑的。此次对 Ubuntu 20.04 的安装纯粹是巧合，恰巧的下载了其镜像，再加上比较好奇 “猫猫镭射眼” ，所以就刻录 U 盘尝试了下啦。</p><p>说说电脑的情况，笔记本，一代 Y7KP ，两个硬盘：一个原装 500G 的 M2 固态，另一个是 500G 的 三星 860EVO 。大概在 Ubuntu18 开始吧，装双系统的流程就已经非常简单的，只需要分割出一片分区（保持未分配状态），然后在安装引导时选择共存，其它交给 Ubuntu 处理即可 <span class="bb_spoiler" title="甚至还上升到了分区比例上的设定">早些年还煞有其事的要求设置各种分区</span>。所以前期准备上也只是分割出一个空白分区而已。</p><h2 id="二、体验">二、体验</h2><p>直观上的体验：开机时，首先多出了个 Ubuntu 的 Logo ，其次登录界面大改，锁屏背景似乎被砍掉了。桌面壁纸这边，哈，猫猫镭射眼终于等到你。菜单栏，一些实用的功能被引入了系统里：允许自定义文件夹和重命名了（18 的时候还需要插件才能实现）</p><div class="img-wrap"><div class="img-bg" style="background:#101010"><img class="img" src="../../img/article/记一次Ubuntu20.04LTS安装体验/img01.png" alt="自定义应用分组" style="height:400px;"/></div><span class="image-caption">自定义应用分组</span></div><p>接着是通知栏，通知面板支持了设置请勿打扰，此外在系统设置里，具体到了每一个软件的通知设置，非常的详尽（从设置的角度似乎这一点被提到了很高的优先级）。默认的主题方面，大同小异吧，谈不上多好也谈不上多差，不过倒是一个全新的主题，不一样的体验，此外声音通知上也有很大的改变，听起来非常的舒服，这个很赞 <span class="bb_spoiler" title="但是我没找到这种包">似乎还支持自定义设置提示声音</span>。</p><div class="img-wrap"><div class="img-bg" style="background:#292929"><img class="img" src="../../img/article/记一次Ubuntu20.04LTS安装体验/img03.png" alt="Do Not Disturb" style="height:400px;"/></div><span class="image-caption">Do Not Disturb</span></div><p>关于显卡，老黄家的显卡毕竟闭源，确实不能打包进系统里，对新手来说，英伟达显卡的安装真的是有点麻烦（毕竟终端下操作不是谁都喜欢的），此处我在安装操作系统时除了选择最小安装外，还勾选了下载第三方驱动，与 18 相比，在开机后的应用列表里，惊喜的看到了 NVIDIA X Server ，竟然自动安装了。附加驱动了直接安装到了 440 版本，最新的版本号不太清楚，但感觉还是挺新的样子，当然这不重要，重要的是自动安装呀，省事儿~</p><div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/记一次Ubuntu20.04LTS安装体验/img04.png" alt="附加驱动" style="height:400px;"/></div><span class="image-caption">附加驱动</span></div><p>在上图中，除了显卡驱动外，还有一个 9560 的网卡驱动，虽然不清楚这里为什么显示的是未工作，可是我这边一直用的是 Wifi 连接的网络呀，233 真奇怪（<span class="bb_spoiler" title="我对 CMAKE 是真的不熟悉，难为我了...">18 时这个驱动得手动安装，还是编译安装你敢信</span>）。</p><h2 id="三、问题">三、问题</h2><p>新的操作系统在最开始总归是阵痛的，一些软件如 PPA 这类源，没有 20 的发行版，无法导入，Typecho 我都没装上。此外一些样式类的改动很大，Gnome Shell 在样式上出了不兼容的现象（Ubuntu 的桌面样式全是用 CSS 写的） ，很奇怪没有向下兼容。此外，桌面上右键打开终端我点着一直没反应，我设置的快捷键也没有起作用。而且不知道是不是我主题改动的问题，总觉得白的背景页太亮，黑色背景页太暗，简言之就是觉得费眼，当然大部分都是小问题，系统本身还好。</p><div class="img-wrap"><div class="img-bg" style="background:#292929"><img class="img" src="../../img/article/记一次Ubuntu20.04LTS安装体验/img05.png" alt="点着是没有反应的" style="height:400px;"/></div><span class="image-caption">点着是没有反应的</span></div><p>默认浏览器是火狐，75 版本，我在下载一些东西后，嗯，世界太大，网速太慢，不部署 Clash 真能把你给墨迹死。所以，愉快的就下载 Chrome 啦，本来想下载 Edge 的，但是发现还没 Linux 版本，不过都已经放出消息了，总归会有的。</p><div class="gallery stretch" col='2' data-group='one'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img06.png' data-fancybox='one' data-caption='火狐'><img fancybox src="../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img06.png" alt="火狐"></a>        <span class='image-caption'>火狐</span>      </div><br><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img07.png' data-fancybox='one' data-caption='Chrome, Yes!'><img fancybox src="../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img07.png" alt="Chrome, Yes!"></a>        <span class='image-caption'>Chrome, Yes!</span>      </div></p></div><p>软件生态呢？据我所知，国内软件上，输入法有搜狗和百度，文档有 WPS ，听歌有<s>网易云</s>（但是我讨厌它，各种原因导致的），网盘有百度云、坚果云。诸如此类吧，不赘述了，更多的去深度那边看应该更详细吧，哈哈。其实除了这些，还有 snap 呀，有更广泛的选择，比如我就在应用商店里看到了这个，前几天我就用它从 I tell u 下载 2004 的 Win10 镜像：</p><div class="gallery stretch" col='2' data-group='two'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img08.png' data-fancybox='two' data-caption='Motrix'><img fancybox src="../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img08.png" alt="Motrix"></a>        <span class='image-caption'>Motrix</span>      </div><br><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img10.png' data-fancybox='two' data-caption='国产好软，全平台兼容'><img fancybox src="../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img10.png" alt="国产好软，全平台兼容"></a>        <span class='image-caption'>国产好软，全平台兼容</span>      </div></p></div><h2 id="四、后续">四、后续</h2><p>这里有一个非常有意思的事情，Ubutnu 的默认安装行为将引导信息放到了系统所在盘，而我们高傲的 Windows 自然不会主动扫 Linux 的引导信息的。所以情况就是，两者的引导存到了不同的硬盘里，意味着我只需要在 BIOS 调整引导的加载顺序就能控制是否启用 Ubuntu 了（Ubuntu 可以引导 Win）。</p><p>最后，确实调整了加载顺序，目前来说，软件的缺失对我影响还是蛮大的，等待一段时间吧，补两张图：</p><div class="gallery stretch" col='2' data-group='three'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img09.png' data-fancybox='three' data-caption='主题配置信息'><img fancybox src="../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img09.png" alt="主题配置信息"></a>        <span class='image-caption'>主题配置信息</span>      </div><br><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img11.png' data-fancybox='three' data-caption='操作系统信息'><img fancybox src="../../img/article/%E8%AE%B0%E4%B8%80%E6%AC%A1Ubuntu20.04LTS%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C/img11.png" alt="操作系统信息"></a>        <span class='image-caption'>操作系统信息</span>      </div></p></div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volantis 主题部署 Pjax</title>
      <link href="/blog/76993423/"/>
      <url>/blog/76993423/</url>
      
        <content type="html"><![CDATA[<p class="p center logo large"><em>Volantis 主题部署 Pjax <sup>应用篇</sup></em></p><br><br><p class='p center'>前言：本篇定位于主题的各类处理上，理论篇见 <a href=/blog/80b5f235/>Hexo 博客部署 Pjax 局部刷新</a>。</p><p class='p center'>不多废话，那么，让我们开始吧！</p><h2 id="一、主题分析">一、主题分析</h2><h3 id="1-1-整体性分析">1.1 整体性分析</h3><p>在对主题做兼容时，最废心力的莫过于处理导航栏、封面这块，理论篇里已经分析过了，Pjax 需要重载的区域为文章主体和侧边栏，而封面、导航栏、页脚是不需要进行重载的。其中麻烦程度以导航栏为最，绑定了大量的按钮、事件等等，此外考虑到移动端适配的缘故，导航栏事实上是有两个存在的，均需要对其处理。</p><p>而封面部分，早期我没有过于考虑去处理封面，原因是这样的：导航栏是嵌入在封面里的（代码层面），在设置为全屏封面下时，存在了全屏、半屏和无封三种情况，控制起来略有些麻烦。而且存在一个导航栏出现时机的问题，需要计算出浏览器在什么滚动高度下才放出导航栏显示，此外导航栏上还放着嵌套的菜单，这部分通过循环渲染出来，使用 hover 伪类控制其显示，偏偏这种情况 Javascript 又不好处理，在无封面到有封面切换时留下了已经激活的菜单小尾巴。</p><p>至于页脚，目前唯一的动态数据为访问量的 PV 显示，这部分是直接由 class 定位赋值的，无需过多烦恼，倒是原主题中各个页脚的引用是分散的，需要统一抽离出来。这里插一嘴侧边栏，侧边栏因为是可配置项，从栏目到显示都是可配置的，过于麻烦，还是放在了重载区域内处理吧。</p><h3 id="1-2-插件分析">1.2 插件分析</h3><p>一个个来细数，大抵以下几种：搜索、评论、懒加载、图片弹出层、代码复制、背景幻灯片、音乐播放器、按钮涟漪动画、页面平滑滚动、公式、不蒜子计数、网址预加载等。</p><p>这其中，有些无需处理，有些简单的封装成函数重新调用一下即可，而有些则就需要特意分析处理了。除了以上几个插件外，主题里还有两个核心 JS 文件，一为 <code>app.js</code> ，另一为 <code>search.js</code>。这两个前者主要控制导航栏、按钮的激活等；后者则是用于搜索、渲染搜索结果查询等等。前者需要细致的处理，后者只需要修改下搜索结果列，点击搜索结果时，手动发送出一个 Pjax 请求，因为结果列是后期渲染的，没有在页面初始化时被 Pjax 监控到，需要手动发送跳转请求完成无刷新的跳转。</p><h2 id="二、插件的处理">二、插件的处理</h2><p>此部分，以几类特殊的插件作以说明，未提及者类似处理，相应文件主要位于 <em>_partial/scripts.ejs</em>。</p><h3 id="2-1-函数封装与调用">2.1 函数封装与调用</h3><p>如前文中所说，一些插件只需要封装成函数，在 Pjax 的 complete 事件中，重新调用即可；而另一些，单独的 JS 的文件引用，无额外函数设置的，只需要重新加载，以下简单介绍一番。</p><p>（1）Fancybox &amp; lazyload 此两者，均为对图像部分的处理，用于弹窗放大显示和懒加载，其中对 Fancybox 的处理是将初始化函数封装为函数，加载完成时重新调用一下即可，相关代码：<a href="https://github.com/inkss/volantis/blob/master-theme/layout/_third-party/fancybox.ejs">fancybox.ejs</a>（另：Fancybox 担任了图片描述信息的显示，已改为默认启用）。而 Lazyload 需要特殊处理，不过相关兼容已经解决，只需要确认自己的 <em>hexo-lazyload-image</em> 版本大于等于 <em>1.0.9</em> ，接着在全局配置文件下，为 lazyload 添加配置项：<code> isSPA: true</code>。</p><p>（2）不蒜子，用于文章/站点的计数，无各类配置项目，此类处理为在 JS 引用时加特殊标志 <code>data-pjax</code>，在 Pjax 的 complete 事件中，利用此标志将其移除，并重新加载，类似于：</p><figure class="highlight js"><figcaption><span>不蒜子</span></figcaption><table><tr><td class="code"><pre><span class="line marked">&lt;script defer src=<span class="string">&quot;&lt;%- theme.plugins.busuanzi %&gt;&quot;</span> data-pjax&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">$(<span class="string">&#x27;script[data-pjax], .pjax-reload script&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line marked"><span class="function">  <span class="title">$</span>(<span class="params"><span class="built_in">this</span></span>).<span class="title">parent</span>(<span class="params"></span>).<span class="title">append</span>(<span class="params">$(<span class="built_in">this</span>).remove()</span>)</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>（3）Valine，对评论的处理就很有意思了，先谈谈 <em>scripts.ejs</em> 这个文件，与 <em>.js</em> 相比，它可以利用 Hexo 的函数引用主题配置或者页面中的 <em>Front-matter</em> 配置，这部分属性是在渲染阶段读取，并写入到 <em>html</em> 页面。而对于 Valine 来说，在本主题中，是允许不同页面自定义 placeholder 和 path 的，但是！这部分代码不在 Pjax 重加载区域内，也就是意味着丢失了这部分自定义值。自然而然，既然此处无法重载，那就放到能够重载到的位置。</p><p>这里我利用 ejs 的文件特征，建立了一个 <a href="https://github.com/inkss/volantis/blob/master-theme/layout/_third-party/pjaxdata.ejs">pjaxdata.ejs</a>，将一些值藏（<em>display: none</em>）在这里，写入到 div 标签中，通过 <code> $.trim($('#id').text()</code> 获取值。至于为什么不写成 <code>var xxx = &lt;%=xxx%&gt;</code> 的形式，那是因为在代码压缩时对于这类只声明不调用的变量，会被直接删掉的…</p><p>综上，对与动态的变量处理是这个样子的：</p><figure class="highlight js"><figcaption><span>pjax_valine()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pjax_valine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> valinePath = $.trim($(<span class="string">&#x27;#valine-path&#x27;</span>).text()) === <span class="string">&quot;none&quot;</span> ?</span><br><span class="line">    <span class="built_in">window</span>.location.pathname : $.trim($(<span class="string">&#x27;#valine-path&#x27;</span>).text());</span><br><span class="line">  <span class="keyword">var</span> valinePlaceholder = $.trim($(<span class="string">&#x27;#valine-placeholder&#x27;</span>).text()) === <span class="string">&quot;none&quot;</span> ?</span><br><span class="line">    <span class="string">&quot;&lt;%= theme.comments.valine.placeholder %&gt;&quot;</span> : $.trim($(<span class="string">&#x27;#valine-placeholder&#x27;</span>).text());</span><br><span class="line">  <span class="keyword">var</span> ALLPATH = <span class="string">&#x27;&lt;%= theme.comments.valine.path %&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span>(ALLPATH != <span class="string">&#x27;&#x27;</span>) valinePath = ALLPATH;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> valine = <span class="keyword">new</span> Valine();</span><br><span class="line">  valine.init(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#valine_container&#x27;</span>,</span><br><span class="line">    meta: meta,</span><br><span class="line marked">    placeholder: valinePlaceholder,</span><br><span class="line marked">    path: valinePath,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  )&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）大部分插件都可以循着以上三个的思路完成兼容，更多内容可在 <a href="https://github.com/inkss/volantis/blob/master-theme/layout/_partial/scripts.ejs"><strong>scripts.ejs</strong></a> 查看。</p><h3 id="2-2-Pjax-事件">2.2 Pjax 事件</h3><p>说了第三方插件后，来谈谈 Pjax 本身吧，Pjax 在处理重载区域时，有一个要求，便是被重载部分必须为所有页面都存在（特指选择器），否则便会失败触发强制刷新。而在 Pjax 自带的四个事件中 <code>send</code> 、<code>complete</code> 、<code>success</code> 、<code>error</code> ，send 和 complete 可以用来处理一些函数的解绑与注册，此外还可以用来控制加载动画的显隐，error 可以在监听到失败时做个提醒呀之类的，success 用的不多，不是很需要。</p><p>这里附录一下本次兼容的 Pjax 函数内容吧：</p><details blue><summary> Pjax 函数 </summary>              <div class='content'>              <figure class="highlight js"><figcaption><span>pjax 函数</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pjax;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  pjax = <span class="keyword">new</span> Pjax(&#123;</span><br><span class="line">    elements: <span class="string">&#x27;a[href]:not([href^=&quot;#&quot;]):not([href=&quot;javascript:void(0)&quot;]):not([pjax-fancybox])&#x27;</span>,</span><br><span class="line">    selectors: [</span><br><span class="line">      <span class="string">&quot;title&quot;</span>,</span><br><span class="line">      <span class="string">&quot;#pjax-container&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    cacheBust: <span class="literal">false</span>,   <span class="comment">// url 地址追加时间戳，用以避免浏览器缓存</span></span><br><span class="line">    timeout: <span class="string">&#x27;5000&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:send&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.stop(); <span class="comment">// 相当于点击了浏览器的停止按钮</span></span><br><span class="line">  <span class="built_in">window</span>.subData = <span class="literal">null</span>; <span class="comment">// 移除标题（用于一二级导航栏切换处）</span></span><br><span class="line">  $.fancybox.close();    <span class="comment">// 关闭弹窗</span></span><br><span class="line">  $(<span class="string">&#x27;.nav-main&#x27;</span>).find(<span class="string">&#x27;.list-v&#x27;</span>).not(<span class="string">&#x27;.menu-phone&#x27;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>); <span class="comment">// 移除小尾巴</span></span><br><span class="line">  $(<span class="string">&#x27;.menu-phone.list-v&#x27;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>); <span class="comment">// 移除小尾巴</span></span><br><span class="line">  $(<span class="string">&#x27;.l_header .switcher .s-search&#x27;</span>).removeClass(<span class="string">&#x27;active&#x27;</span>); <span class="comment">// 关闭移动端激活的搜索框</span></span><br><span class="line">  $(<span class="string">&#x27;.l_header&#x27;</span>).removeClass(<span class="string">&#x27;z_search-open&#x27;</span>); <span class="comment">// 关闭移动端激活的搜索框</span></span><br><span class="line">  $(<span class="string">&#x27;.wrapper&#x27;</span>).removeClass(<span class="string">&#x27;sub&#x27;</span>); <span class="comment">// 跳转页面时关闭二级导航</span></span><br><span class="line">  $(<span class="built_in">window</span>).unbind(<span class="string">&#x27;resize&#x27;</span>);    <span class="comment">// 解绑</span></span><br><span class="line">  $(<span class="built_in">window</span>).unbind(<span class="string">&#x27;scroll&#x27;</span>);    <span class="comment">// 解绑</span></span><br><span class="line">  $(<span class="built_in">window</span>).unbind(<span class="string">&#x27;click&#x27;</span>);     <span class="comment">// 解绑</span></span><br><span class="line">  $(<span class="built_in">document</span>).unbind(<span class="string">&#x27;scroll&#x27;</span>);  <span class="comment">// 解绑</span></span><br><span class="line">  NProgress.start();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:complete&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 关于百度统计对 SPA 页面的处理：</span></span><br><span class="line">  <span class="comment">// 方案一：百度统计&gt;管理&gt;单页应用设置中，打开开启按钮即可对SPA进行统计。 https://tongji.baidu.com/web/help/article?id=324</span></span><br><span class="line">  <span class="comment">// 方案二：取消注释下列代码。 https://tongji.baidu.com/web/help/article?id=235</span></span><br><span class="line">  <span class="comment">// &lt;% if (config.baidu_analytics_key) &#123; %&gt;</span></span><br><span class="line">  <span class="comment">// _hmt.push([&#x27;_trackPageview&#x27;, document.location.pathname]);</span></span><br><span class="line">  <span class="comment">// &lt;% &#125; %&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关于谷歌统计对 SPA 页面的处理：</span></span><br><span class="line">  <span class="comment">// 当应用以动态方式加载内容并更新地址栏中的网址时，也应该更新通过 gtag.js 存储的网页网址。</span></span><br><span class="line">  <span class="comment">// https://developers.google.cn/analytics/devguides/collection/gtagjs/single-page-applications?hl=zh-cn</span></span><br><span class="line">  &lt;% <span class="keyword">if</span> (config.google_analytics_key) &#123; %&gt;</span><br><span class="line">    <span class="built_in">window</span>.dataLayer = <span class="built_in">window</span>.dataLayer || [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gtag</span>(<span class="params"></span>)</span>&#123;dataLayer.push(<span class="built_in">arguments</span>);&#125;</span><br><span class="line">    gtag(<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;&lt;%- config.google_analytics_key %&gt;&#x27;</span>, &#123;<span class="string">&#x27;page_path&#x27;</span>: <span class="built_in">document</span>.location.pathname&#125;);</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">  </span><br><span class="line">  $(<span class="string">&#x27;.nav-main&#x27;</span>).find(<span class="string">&#x27;.list-v&#x27;</span>).not(<span class="string">&#x27;.menu-phone&#x27;</span>).removeAttr(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;&quot;</span>); <span class="comment">// 移除小尾巴的移除</span></span><br><span class="line">  $(<span class="string">&#x27;.menu-phone.list-v&#x27;</span>).removeAttr(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;&quot;</span>); <span class="comment">// 移除小尾巴的移除</span></span><br><span class="line">  $(<span class="string">&#x27;script[data-pjax], .pjax-reload script&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).parent().append($(<span class="built_in">this</span>).remove());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    pjax_fancybox();</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.plugins.scrollreveal &amp;&amp; theme.plugins.scrollreveal.js) &#123; %&gt;</span><br><span class="line">      pjax_scrollrebeal();</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.plugins.clipboard &amp;&amp; (theme.style.body.highlight.copy_btn == <span class="literal">true</span>)) &#123; %&gt;</span><br><span class="line">      pjax_initCopyCode();</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (enableValine)&#123; %&gt;</span><br><span class="line">      pjax_valine();</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (enableMiniValine)&#123; %&gt;</span><br><span class="line">      pjax_minivaline();</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">  NProgress.done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:error&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  NProgress.done();</span><br><span class="line">  <span class="built_in">window</span>.location.href = event.triggerElement.href;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="三、主题核心代码处理">三、主题核心代码处理</h2><p>主要为两个 js 文件，内容很翔实，改动量不小，慢慢更新系列~</p><h3 id="3-1-搜索">3.1 搜索</h3><p>在前面我就说了，搜索结果是后期渲染上的，所以没有被 Pjax 整成自己的样子（哈哈），所以那些结果标签点过去立马来个刷新跳转，故此部分便只需要对这点处理下就行啦。这里需要利用 Pjax 的 <code>pjax.refresh([el])</code> 函数：</p><p>Use this method to bind Pjax to children of a DOM element that didn’t exist when Pjax was initialised e.g. content inserted dynamically by another library or script. If called with no arguments, Pjax will parse the entire document again to look for newly-inserted elements.</p><figure class="highlight js"><figcaption><span>refresh([el])</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Inside a callback or Promise that runs after new DOM content has been inserted</span></span><br><span class="line"><span class="keyword">var</span> newContent = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.new-content&quot;</span>);</span><br><span class="line"></span><br><span class="line">pjax.refresh(newContent);</span><br></pre></td></tr></table></figure><p>也就是重新加载 #u-search 区域，接着监听 send 事件，关闭搜索窗口：</p><figure class="highlight js"><figcaption><span>Pjax 处理</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">html += <span class="string">&quot;&lt;script&gt;try&#123;pjax.refresh(document.querySelector(&#x27;#u-search&#x27;))&#125;catch(e)&#123;console.log(e)&#125;&lt;/script&gt;&quot;</span>;</span><br><span class="line">html += <span class="string">&quot;&lt;script&gt;document.addEventListener(&#x27;pjax:send&#x27;,function()&#123;$(&#x27;#u-search&#x27;).fadeOut(500);$(&#x27;body&#x27;).removeClass(&#x27;modal-active&#x27;)&#125;);&lt;/script&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-导航栏">3.2 导航栏</h3><p>先放链接：<a href="https://github.com/inkss/volantis/blob/master-theme/source/js/app.js"><strong>app.js</strong></a>，看心情再决定补不补思路。</p><h3 id="3-3-封面">3.3 封面</h3><p>是这样的，原主题对封面的处理是通过读取页面配置来控制渲染，大概三种不同渲染场景，而在 Pjax 处理时简化为两种场景，全局不开启封面和开启封面，别的就通过代码来控制样式啦。样式处理无非是控制显示、隐藏，但是呢，还需要控制导航栏出现时机，这部分在上一小节讲。</p><figure class="highlight js"><figcaption><span>封面控制</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">if</span>(<span class="string">&quot;&lt;%=frontMatterCover%&gt;&quot;</span> == <span class="string">&quot;none&quot;</span>) &#123;  <span class="comment">// 移除封面</span></span><br><span class="line">      <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;cover&#x27;</span>)[<span class="number">0</span>].style.display = <span class="string">&quot;none&quot;</span>;  </span><br><span class="line">      <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;l_body&#x27;</span>)[<span class="number">0</span>].classList.add(<span class="string">&quot;nocover&quot;</span>);</span><br><span class="line">      <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;l_header&#x27;</span>,<span class="string">&#x27;cover-wrapper&#x27;</span>)[<span class="number">0</span>].classList.add(<span class="string">&quot;show&quot;</span>); </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="string">&quot;&lt;%=frontMatterCover%&gt;&quot;</span> == <span class="string">&quot;blog&quot;</span>) &#123;  <span class="comment">// 半屏</span></span><br><span class="line">          <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;cover&#x27;</span>)[<span class="number">0</span>].classList.remove(<span class="string">&quot;full&quot;</span>);</span><br><span class="line">          <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;cover&#x27;</span>)[<span class="number">0</span>].classList.add(<span class="string">&quot;half&quot;</span>);</span><br><span class="line">          <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;scroll-down&#x27;</span>)[<span class="number">0</span>].style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;&lt;%=frontMatterCover%&gt;&quot;</span> == <span class="string">&quot;docs&quot;</span>) &#123; <span class="comment">// 全屏</span></span><br><span class="line">          <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;cover&#x27;</span>)[<span class="number">0</span>].classList.remove(<span class="string">&quot;half&quot;</span>);</span><br><span class="line">          <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;cover&#x27;</span>)[<span class="number">0</span>].classList.add(<span class="string">&quot;full&quot;</span>);</span><br><span class="line">          <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;scroll-down&#x27;</span>)[<span class="number">0</span>].style.display = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;cover&#x27;</span>)[<span class="number">0</span>].style.display = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;l_body&#x27;</span>,<span class="string">&#x27;show&#x27;</span>)[<span class="number">0</span>].classList.remove(<span class="string">&quot;nocover&quot;</span>);</span><br><span class="line">      <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;l_header&#x27;</span>,<span class="string">&#x27;cover-wrapper&#x27;</span>)[<span class="number">0</span>].classList.remove(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>为了照顾显示效果，这部分处理是放在封面加载之后文章加载之前，好处是不会出现闪一下的效果（默认整个封面是隐藏的），坏处是此时 Jquery 没加载，得用原生 JS 来写。</p><h2 id="四、后续">四、后续</h2><p>没有后续，完结撒花~</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Pjax </tag>
            
            <tag> Volantis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL 之宝塔面板的部署</title>
      <link href="/blog/b2b02edd/"/>
      <url>/blog/b2b02edd/</url>
      
        <content type="html"><![CDATA[<p>在很早之前，我就有一个需求，需要一个小型灵活的本地服务器，因为目的在于轻便、快捷，所以倘若搭建 Nginx 到本机又有些浪费性能，过于臃肿，毕竟不是服务器。而小型服务器的话如 Tomcat 启动起来还是有些麻烦。我查过使用 PhpStudy 的这类软件，感觉用起来又不是那么顺心如意。此之前，一直使用的是 VS Code 里的插件：<code>Live Server</code> 完成轻量网页的启动，也算是集编辑、运行、查看于一身了。</p><p>这是前话，然后下面讲讲 WSL，VS Code 可以通过 Rmote - WSL 链接到本地的 Linux 子系统，我也是一直这样做的，偶尔一些环境搭建起来麻烦的使用子系统做的，我是用的子系统 Ubuntu 18.04 ，倒也是我最熟悉的一个系统了。言归正传，本身我有一台阿里云的 CentOS 服务器，在上面搭建了宝塔面板，于是便突发奇想，能否在本机装上面板呢？这样对与网站需求来说就有了更多的用途。</p><span id="more"></span><h2 id="一、面板部署">一、面板部署</h2><p>这部分没有什么好说的，普通的命令行安装，利用 Root 账户执行安装即可，可能会费一些时间，但是成绩斐然，顺利的部署上了（说到此，忽然想起最新的发行版，20.04 似乎还有一些软件上的不兼容，18.04 还是再等等不要升级的好）。</p><p>部署成功后，在终端的结果处收到地址、账户、密码，登录处理一些就行了。地址默认位 <code>127.0.0.1</code> ，是的没错即使是子系统，其实也是和本地主机的 IP 相同的，接下来就先改改端口、安全入口什么的即可。</p><div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/WSL的利用/image-20200502160453899.png" alt="宝塔面板" style="height:400px;"/></div><span class="image-caption">宝塔面板</span></div><p>配置信息一目了然，甚至原本的 Windows 下磁盘也被显示出来的，接下来也就是到软件商店里安装环境了，为了测试此处使用的环境与服务器端用的是一致的：Nginx 1.16.1，Mysql 5.7.29，PHP 7.2，当然还有 Pure-Ftpd 以作备用。</p><div class="img-wrap"><div class="img-bg" style="background:var(--color-card)"><img class="img" src="../../img/article/WSL的利用/image-20200502161012050.png" alt="PHP是世界上最好的编程语言"/></div><span class="image-caption">PHP是世界上最好的编程语言</span></div><p>为什么要选择在子系统上安装，那就不得不说一个资源占用的问题了，以上环境倘若开启了自启又略显浪费，而不开启的话，在 Windows 下启动还要跑到服务里，找到相关服务才能开启，而个人认为最理想的莫过于即用即启，本身不需要长时间运行服务器，而最重要的就是面板的存在减少了大量配置文件的修改，更别说服务器这类环境天然适合 Linux 系统呀。</p><h2 id="二、启动">二、启动</h2><p>是的，没错，Windows 在启动时不会处理任何 WSL 的程序，包括不启动宝塔面板。这里参考了 <a href="https://blog.csdn.net/toopoo/article/details/85733566">Win10 子系统 ssh 服务自启动设置</a> 。宝塔本身有启动脚本，我们不用手写脚本了，然后大概流程就是在 Windwos 的启动文件里放一个 vbs 脚本，在开机时利用 <code>wscript.shell</code> 执行命令。</p><p>思路很简单，<code>wsl -d DistributionName -u UserName command</code>，子系统名称可以用 <code>wsl -l</code> 查看，综上：</p><figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span> ws = <span class="built_in">CreateObject</span>(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line">ws.run <span class="string">&quot;wsl -d Ubuntu -u root /etc/init.d/bt start&quot;</span>, vbhide</span><br></pre></td></tr></table></figure><p>如此，愉快的玩耍吧~</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之 Text 组件</title>
      <link href="/blog/d24a2bc6/"/>
      <url>/blog/d24a2bc6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、代码">一、代码</h2><p>使用小程序发现了一个现象，后端返回的数据在前端显示时没有换行，原原本本的合并为一行显示了，原因大概是从数据库返回给前端时部分数据被转义了。如此便使用正则处理返回的数据，顺便按照换行符分割成数组吧：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> item = <span class="built_in">JSON</span>.parse(options.item);</span><br><span class="line">  <span class="keyword">let</span> content = item.rumourContent.replace(<span class="regexp">/\\n/g</span>, <span class="string">&quot;\n&quot;</span>); <span class="comment">// 替换出换行符</span></span><br><span class="line">  that.setData(&#123;</span><br><span class="line">    rumourInfo: item,</span><br><span class="line">    rumourContent: content.split(<span class="string">&quot;\n&quot;</span>) <span class="comment">// 分割吧</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content &quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;textShow&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;rumourContent&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、示例">二、示例</h2><div class="gallery stretch" col='2' data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Ftext%E7%BB%84%E4%BB%B6%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C/image-20200403153035661.png' data-fancybox='default' data-caption='换行符'><img fancybox src="../../img/article/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Ftext%E7%BB%84%E4%BB%B6%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C/image-20200403153035661.png" alt="换行符"></a>        <span class='image-caption'>换行符</span>      </div><br><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Ftext%E7%BB%84%E4%BB%B6%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C/image-20200403152910344.png' data-fancybox='default' data-caption='效果'><img fancybox src="../../img/article/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Ftext%E7%BB%84%E4%BB%B6%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C/image-20200403152910344.png" alt="效果"></a>        <span class='image-caption'>效果</span>      </div></p></div>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之分页模型</title>
      <link href="/blog/24abf2bd/"/>
      <url>/blog/24abf2bd/</url>
      
        <content type="html"><![CDATA[<h2 id="一、模型">一、模型</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">设置分页大小：pageLength = 10</span><br><span class="line">设置首页跨度：start = 0</span><br><span class="line">​                end = pageLength</span><br><span class="line">发送请求：balabala</span><br><span class="line">获取数据：var arr1 = 结果数组</span><br><span class="line">​          var arr2 = 当前返回数据</span><br><span class="line">​              arr1 = arr1.concat（arr2） 合并数组</span><br><span class="line"></span><br><span class="line">分页判断：if arr1.length == pageLength 标记所有数据加载完毕</span><br><span class="line">触底下拉：start += pageLength</span><br><span class="line">​            end += pageLength</span><br><span class="line"></span><br><span class="line">后端：LIMIT ?,?</span><br><span class="line">​      req.start</span><br><span class="line">​      req.end - req.start</span><br></pre></td></tr></table></figure><h2 id="二、小程序">二、小程序</h2><p>在列表的最末尾处，添加加载完毕的标志：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-divider</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;!isMore&#125;&#125;&quot;</span> <span class="attr">contentPosition</span>=<span class="string">&quot;center&quot;</span>&gt;</span>没有更多了<span class="tag">&lt;/<span class="name">van-divider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>处理滑动事件，分页的递增也是发生在此处的，页面全部加载完毕后就不用继续发请求了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onReachBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line marked">  <span class="keyword">if</span> (that.data.isMore) &#123;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line marked">        start: that.data.start + that.data.pageLength,</span><br><span class="line marked">        end: that.data.end + that.data.pageLength</span><br><span class="line">      &#125;);</span><br><span class="line">      that.knowledgeQry(); <span class="comment">// 发送后端请求</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&#x27;全部加载完毕了 qwq&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端发起搜索，存值啊什么的，本次获取列表的长度小于分页长度，就可以视为到了最后一页啦。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">knowledgeQry: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  app.wxRequest(<span class="string">&#x27;加载中&#x27;</span>, url, req, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = res.resp;</span><br><span class="line">    <span class="keyword">let</span> arr1 = that.data.searchResult;</span><br><span class="line">    <span class="keyword">let</span> arr2 = data.knowledges;</span><br><span class="line marked">    arr1 = arr1.concat(arr2);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(data) == <span class="string">&quot;&#123;&#125;&quot;</span>) &#123;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        searchResult: [],</span><br><span class="line">        isSearch: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        searchResult: arr1,</span><br><span class="line marked">        isMore: arr1.length != recordsTotal</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索的时候，判断下输入框文本是否改变，没改变就不发后端了，此外搜索时相应变量重置~</p><h2 id="三、UI-界面">三、UI 界面</h2><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E9%A1%B5%E6%A8%A1%E5%9E%8B/image-20200401173445954.png' data-fancybox='default' data-caption='UI 界面'><img fancybox src="../../img/article/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E9%A1%B5%E6%A8%A1%E5%9E%8B/image-20200401173445954.png" alt="UI 界面"></a>        <span class='image-caption'>UI 界面</span>      </div></p></div>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 打包命令</title>
      <link href="/blog/59d81549/"/>
      <url>/blog/59d81549/</url>
      
        <content type="html"><![CDATA[<div class="note radiation yellow"><p>Windows 下 powershell 测试通过</p></div><figure class="highlight sh"><figcaption><span>打包最后一次提交涉及到的文件</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output=files.zip HEAD $(git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT HEAD)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包指定（ID）提交涉及到的文件</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output=files.zip HEAD $(git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT xxxxxx)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包两个版本之间的差异</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output=files.zip HEAD $(git diff-tree -r xxxxxx1 --name-only --diff-filter=ACMRT xxxxxx2)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包某次提交之后的所有文件（不含当前）</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output=files.zip HEAD $(git diff-tree -r xxxxxx --name-only --diff-filter=ACMRT HEAD)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包 Master</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output master.zip master</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包 Head</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output head.zip HEAD</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包 Tag</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip --output v1.0.0.zip v1.0.0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包最后修改的文件（不管有没有 add 或 commit )，只要 git diff 有变化就会打包</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip -o update.zip HEAD $(git diff --name-only HEAD^)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包两个分支之间的差异</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip -o update.zip HEAD $(git diff --name-only master 1.0.0)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>打包两个版本 (commit) 间的差异</span></figcaption><table><tr><td class="code"><pre><span class="line">git archive --format=zip -o update.zip HEAD $(git diff --name-only HEAD~2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 打包 </tag>
            
            <tag> Powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客部署 Pjax 局部刷新</title>
      <link href="/blog/80b5f235/"/>
      <url>/blog/80b5f235/</url>
      
        <content type="html"><![CDATA[<p class="p center logo large"><em>Hexo 博客部署 Pjax 局部刷新 <sup>理论篇</sup></em></p><br><br><p>本篇定位于 <strong>理论知识</strong> ，实际应用见 <a href="/blog/76993423/">Volantis 主题部署 Pjax</a>，前置知识，SPA 页面。</p><p>我在对博客做 Pjax 兼容时，发现文档资料都很少，零零散散，整个过程几乎是摸索着进行的，百思不得其解，所以此处留下记录以备后用，文章中的思路不一定是最佳的，姑且算是个抛砖引玉。</p><h2 id="一、Pjax-加速的原理">一、Pjax 加速的原理</h2><p>在进入正文之前，我们先简单的了解：<strong>单页应用</strong>（英语：single-page application，缩写<strong>SPA</strong>）是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，而非传统的从服务器重新加载整个新页面。这种方法避免了页面之间切换打断用户体验，使应用程序更像一个桌面应用程序。<strong>与单页应用的交互通常涉及到与网页服务器后端的动态通信</strong>。说白了也就是通过 <code>pushState() + XHR</code> 技术实现的页面切换。</p><p>而 Hexo 站点本身是个静态页面，无法发出动态请求，所以这里便引出了本文的主角 Pjax 框架了。其思路是通过拦截 <code>a</code> 链接，发送 XHR 请求，获取下级页面内容，接着替换指定区域完成整个过程。由于不是动态网站，Pjax 在请求过程中获取的是整个站点的 Html 内容，所以请求本身是无法达到加速的，但是可以减少页面中 JS 文件的重复请求，此外还可以利用一些预加载技术（预读缓存）和磁盘缓存进一步提升访问速度，实际体验效果是极佳的。</p><h2 id="二、前期的准备工作">二、前期的准备工作</h2><p>正如前文中所说，在一次 Pjax 请求获取完整的 html 过程中，从获取到的结果中找到选中的内容替换到页面里，所以我们需要先划分页面结构，确定被替换的区域。</p><h3 id="2-1-分析网站布局">2.1 分析网站布局</h3><p>一个网站的内容有什么？对于 Hexo 这类静态博客来说，网站内容是根据模板文件生成的，其中存在着大量共有的元素。大概上可以划分成这几部分：<em>导航栏</em>、<em>文章部分</em>、<em>侧边栏</em>、<em>页脚</em>。在这些区域中，潜在的重复内容是 <strong>导航栏</strong> 和 <strong>页脚</strong> ，一般来说文章区域和侧边栏区域是不会相同的，那么对应到 Hexo 主题里，这部分是由 <code>layout.ejs</code> 文件控制的。我们找到核心部分，去除掉无用的干扰项后分析一番：</p><details ><summary> 一个简单的页面分析 </summary>              <div class='content'>              <figure class="highlight html"><figcaption><span>以本主题的样式文件为例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">&lt;%- partial(&#x27;_partial/head&#x27;) %&gt;                             // 加载 head 标签</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  &lt;%- partial(&#x27;_partial/cover&#x27;, &#123;showCover: showCover&#125;) %&gt;  // 加载导航栏</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;l_body&lt;%- showCover ? &#x27;&#x27; : &#x27; nocover&#x27; %&gt;&quot;</span>&gt;</span>    // 加载封面</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;body-wrapper&#x27;</span>&gt;</span></span><br><span class="line">      &lt;%- body %&gt;                                           // 页面内容主体</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &lt;%- partial(&#x27;_partial/scripts&#x27;) %&gt;                        // 引入 js 文件</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>由此可知，页面中变动的部分都位于 <code>&lt;%- body %&gt;</code> 这个标签中了，那么它就是目标了，在 <code>class='body-wrapper'</code> 后面添加 <code>id=&quot;pjax-container&quot;</code> 以方便选中元素。</p><h3 id="2-2-Pjax-的配置项">2.2 Pjax 的配置项</h3><p>详细的文档可在项目的 readme 中查看，传送链接：<a href="https://github.com/MoOx/pjax/blob/master/README.md">Pjax Document</a>。</p><p>在正式使用 Pjax 之前，需要先添加它的 js 文件，位置上没那么讲究，Mox 的 Pjax 去除了对 Jquery 的依赖，但别放到重载区域内。Pjax 的初始化写法与 jquery-pjax 不完全相同，可以类似这样子写：</p><figure class="highlight js"><figcaption><span>Pjax 初始化函数</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pjax = <span class="keyword">new</span> Pjax(&#123;</span><br><span class="line">    elements: <span class="string">&#x27;a[href]:not([href^=&quot;#&quot;]):not([href=&quot;javascript:void(0)&quot;])&#x27;</span>,   <span class="comment">// 拦截正常带链接的 a 标签</span></span><br><span class="line">    selectors: [<span class="string">&quot;#pjax-container&quot;</span>,<span class="string">&quot;title&quot;</span>]                                   <span class="comment">// 根据实际需要确认重载区域</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里共配置了两部分，<strong>选择器（selectors）</strong> 和 <strong>元素 （elements）</strong> 。默认情况下 pjax 处理的元素为 <code>a[href], form[action]</code> ，但是并不是所有的 <code>&lt;a&gt;</code> 标签都可追踪，所以使用 <code>:not</code> 语法排除一些不需要使用 pjax 跳转的元素；接着是选择器（class 或 id 选择都行），选择器用以选定重载的范围，个人理解为在 <strong>指定标签内的内容</strong>，在跳转页面时均被替换，不在这个范围内的不做处理。</p><p>除此之外，我们还有三个相对重要的 Pjax 事件函数可以使用：</p><figure class="highlight js"><figcaption><span>比较有用的 Pjax 函数</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:send&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:complete&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:error&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-一些潜在的问题">2.3 一些潜在的问题</h3><p>至此，我们已经完成了引入 Pjax 文件，划定重载区域，初始化 Pjax 对象，是不是一切就高枕无忧了呢？当然，答案是否定的。这里可以引用一句古老的名言 ”大人，时代变了！”，当下的网站早已不是个孤零零的产物，而是和 Javascript 有着密切联系后的动态页面，存在着大量的事件监听处理。不巧的是在替换内容时，部分事件监听丢失了，异常、错误、功能失效等等，就愉快的上演了。</p><p>Javascript 部分自然是需要重新绑定注册的，但是是不是无脑全部重新绑定就行呢？答案也是否定的，我们会有个大敌：<strong>重复事件监听</strong>，它或许不会立即爆发危害，但是随着浏览页面的增加，事件绑定可能会越来越累加，影响效率，潜在造成错误等等。所以这里就需要利用 <code>send</code> 和 <code>complete</code> 这对事件了，合理利用，正确解决问题。</p><h2 id="三、后期的兼容处理">三、后期的兼容处理</h2><h3 id="3-1-几种兼容思路">3.1 几种兼容思路</h3><p>首先，是一些需要每次进入页面，都必须重新加载的 JS 文件，典型的有不蒜子网页计数、各类分析脚本，自然而然他们必须要多次加载，对于这类的操作，简单的处理方案就是在引入相关 js 文件时，加入格外的属性，如 <code>data-pjax</code> ，统一处理具有这个属性的 JS 文件，在跳转页面时重新导入（以不蒜子为例子）：</p><details ><summary> JS 文件整体重载 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span> data-pjax&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:complete&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;script[data-pjax], .pjax-reload script&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).parent().append($(<span class="built_in">this</span>).remove());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>另一种情况是，引入的 JS 文件无需重复导入，但是绑定的函数需要重新处理，比如 Fancybox 这类弹窗，这类的可以写在函数里，在页面加载完成后 <code>$(document).ready(function()&#123;&#125;)</code> 和 Pjax 重载完成后重新调用，比如本站的 Fancybox 初始化函数：</p><details ><summary> Js 函数重载（以 Fancybox 为例） </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pjax_fancybox</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.article-entry&quot;</span>).find(<span class="string">&quot;img&quot;</span>).not(<span class="string">&#x27;.inline&#x27;</span>).not(<span class="string">&#x27;a img&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//渲染 fancybox</span></span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>); <span class="comment">// a 标签</span></span><br><span class="line">    $(element).attr(<span class="string">&quot;pjax-fancybox&quot;</span>, <span class="string">&quot;&quot;</span>);  <span class="comment">// 过滤 pjax</span></span><br><span class="line">    $(element).attr(<span class="string">&quot;href&quot;</span>, $(<span class="built_in">this</span>).attr(<span class="string">&quot;src&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&quot;data-original&quot;</span>)) &#123;</span><br><span class="line">      $(element).attr(<span class="string">&quot;href&quot;</span>, $(<span class="built_in">this</span>).attr(<span class="string">&quot;data-original&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    $(element).attr(<span class="string">&quot;data-fancybox&quot;</span>, <span class="string">&quot;images&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> caption = <span class="string">&quot;&quot;</span>;   <span class="comment">// 描述信息</span></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;alt&#x27;</span>)) &#123;  <span class="comment">// 判断当前页面是否存在描述信息</span></span><br><span class="line">      $(element).attr(<span class="string">&#x27;data-caption&#x27;</span>, $(<span class="built_in">this</span>).attr(<span class="string">&#x27;alt&#x27;</span>));</span><br><span class="line">      caption = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;alt&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    $(div).addClass(<span class="string">&quot;fancybox&quot;</span>);</span><br><span class="line">    $(<span class="built_in">this</span>).wrap(div); <span class="comment">// 最外层套 div ，其实主要作用还是 class 样式</span></span><br><span class="line">    <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">    $(span).addClass(<span class="string">&quot;image-caption&quot;</span>);</span><br><span class="line">    $(span).text(caption); <span class="comment">// 加描述</span></span><br><span class="line">    $(<span class="built_in">this</span>).after(span);  <span class="comment">// 再套一层描述</span></span><br><span class="line">    $(<span class="built_in">this</span>).wrap(element);  <span class="comment">// 最后套 a 标签</span></span><br><span class="line">  &#125;)</span><br><span class="line">  $(<span class="string">&quot;.article-entry&quot;</span>).find(<span class="string">&quot;img&quot;</span>).fancybox(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;[data-fancybox=&quot;images&quot;]&#x27;</span>,</span><br><span class="line">    hash: <span class="literal">false</span>,</span><br><span class="line">    loop: <span class="literal">false</span>,</span><br><span class="line">    closeClick: <span class="literal">true</span>,</span><br><span class="line">    helpers: &#123;</span><br><span class="line">      overlay: &#123;<span class="attr">closeClick</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    buttons: [</span><br><span class="line">      <span class="string">&quot;zoom&quot;</span>,</span><br><span class="line">      <span class="string">&quot;close&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>Fancybox 在每一页重新绑定，同类的代码都可以采用以上的处理方式。需要重新加载的整个 JS 文件的就单独重载，需要重新执行绑定函数的，就在 Pjax 的事件监听函数中重新调用。</p><h3 id="3-2-文章独有的变量">3.2 文章独有的变量</h3><p>这里的变量是指那种写在头部的变量，他们在页面上不存在（发挥在 Hexo 的渲染阶段）。典型例子为本主题的评论部分的配置，这部分基本位于 <code>scripts.ejs</code> 文件中，当读取相应的配置属性时，从主题配置文件读取的也还好，毕竟无需在意变动的问题，麻烦就麻烦在从文章页面中读取的属性。</p><p>比如评论的占位符和地址的自定义，渲染阶段所产生的结果在页面经过 Pjax 局部重载后拿不到。所以这里换个思路，将一些变量藏在文章区域内，在使用时通过元素选择器调用。</p><h2 id="四、后记">四、后记</h2><h3 id="4-1-参考链接">4.1 参考链接</h3><p>吃水不忘挖井人，除 Pjax 的官方网站外，另外两个站点也对我的帮助很大，这里予以记录：</p><ul><li>来自 liuyib 的 <a href="https://liuyib.github.io/2019/09/24/use-pjax-to-your-site/">集成 Pjax 实现网站无刷新加载</a> 。</li><li>相同主题下的另一个 Pjax 部署思路：<a href="https://sxyugao.top/">YuGao’s Blog</a> 。</li></ul><h3 id="4-2-本页面的独特修改">4.2 本页面的独特修改</h3><p>因为文章的代码不出预料的会很多，所以萌生了使用折叠框的念头，在不改动渲染器的情况下，采取了直接写 html 代码的思路。<s>但是未曾想到折叠框在伸缩、展开的过程中，因改变了页面高度的缘故影响到目录导航栏的激活跟随，思索了一阵子后没发现较好的解决办法，特此记录，代办代办（<em>有想法的小伙伴也可以留言啊，或者有更好的代码块折叠方案什么的</em>）。</s></p><p><em>主题已原生支持。</em></p><h3 id="4-3-功能性测试">4.3 功能性测试</h3><p class='p center logo large'><i class="fad fa-narwhal"></i></p><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><h4 id="4-3-1-Tab">4.3.1 Tab</h4><div class="tabs" id="tabtest"><ul class="nav-tabs"><li class="tab active"><a class="#tabtest-1">失落的宇宙</a></li><li class="tab"><a class="#tabtest-2">背景介绍</a></li><li class="tab"><a class="#tabtest-3">豆瓣评价</a></li><li class="tab"><a class="#tabtest-4">相关图片</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tabtest-1"><p>  《失落的宇宙》（日文名：ロスト・ユニバース，LOST UNIVERSE，大陆译名： 宇宙刑警）是神坂一原著的日本科幻小说。亦改编成漫画与动画。小说版共5卷，漫画版共4册。动画版1998年4月3日发行，总共26集。</p></div><div class="tab-pane" id="tabtest-2"><p>  在远古的时代，宇宙中存在着分别代表光明与黑暗的两个文明，正如光与影永远是相互矛盾的，两个文明也长年处于战争之中，代表黑暗的文明为了取得胜利，就制造了一种高科技的战舰，这种战舰拥有超强的作战能力及穿越时空的能力，而且，还拥有自己的思想。然而，<strong>这种战舰却会把驾驶者作为自己的食粮</strong>，以此来增强自己的力量。<br>这种黑色的战舰就像魔鬼一样，会把敌人彻底毁灭，但同时也会吞噬驾驶员的生命。而在同一时间，为了对抗敌人的黑色战舰，代表光明的文明也创造了一艘白色战舰与黑色战舰抗衡。后来，两个文明都原因不明地消失了，而那些战舰却依然存在在宇宙的某个角落里，新时代的人为他们起了个名字——遗失战舰（LostShips）</p></div><div class="tab-pane" id="tabtest-3"><p>  小时候在电视台看动画片《宇宙刑警》（失落的宇宙），结局是男主角去敌窝生死未卜，女主角回复了平静的生活等待他回来。电视里没放完就插了广告，最后一集看的这么多年一直耿耿于怀，我想知道他是否平安回来。昨天终于偶然间看到了最后一集，老牌怀旧的硬朗画风和人物设定，她在风和日丽的天气里晒洁白的被单，去他的墓前放一束花，突然看到他的宇宙飞船缓缓降落，这么多年的等待终于有了结果。于是我这么多年的等待也有了结果。<br>然而这是动画，所以就在美好的这一刻打住。现实中也许宇宙飞船上早已物是人非，躺着他的尸体残骸也说不一定。得不到和已失去，总是在二者中间的状态才是最好。 —— honey</p></div><div class="tab-pane" id="tabtest-4"><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E9%83%A8%E7%BD%B2Pjax%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/1570189514.jpg' data-fancybox='default' data-caption='失落的宇宙'><img fancybox src="../../img/article/%E9%83%A8%E7%BD%B2Pjax%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/1570189514.jpg" alt="失落的宇宙"></a>        <span class='image-caption'>失落的宇宙</span>      </div></p></div></div></div></div><h4 id="4-3-2-Folding">4.3.2 Folding</h4><details ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="../../img/article/%E9%83%A8%E7%BD%B2Pjax%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>多级嵌套，又称套娃~</p>              </div>            </details>              </div>            </details>              </div>            </details><h4 id="4-3-3-Checkbox-Radio">4.3.3 Checkbox &amp; Radio</h4><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1">Checkbox</a></li><li class="tab"><a class="#tab-id-2">Radio</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div></div><div class="tab-pane" id="tab-id-2"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Pjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猫之三千岁：网站状态概述</title>
      <link href="/blog/b0e91f3f/"/>
      <url>/blog/b0e91f3f/</url>
      
        <content type="html"><![CDATA[<h2 id="一、起始">一、起始</h2><p>万物皆有起源，本站的起始则是从 2018年11月 开始。谈及最初建个人网站的经历，大概在大一下的时候就开始了，不过当时选择的并不是 Hexo ，而是使用了很著名的一个博客系统：WordPress 。它简直是新手入门的不二之选呀，从购买服务器，到搭建服务器运行环境，再到购买域名，各类网站解析什么的，一种套流程下来，虽然各种懵逼，但是重在折腾呀。再后来，对 WordPress 的乐趣转向它的插件、主题上，各种主题、插件的尝试更换等等，现在想来有些本末倒置了。最后，因为没有对服务器/域名进行续费，第一个网站就荒废了。留念一下：<em>域名</em> ：<code>sunziy.cn</code> ，<em>站名</em> ：<code>不停</code> 。</p><p>后来的很长一段时间内，没有再接触过网站了，期间有对 Hexo 了解过一阵子，但也只是仅限了解，没有细致的尝试。就这样一直到了大三下，在制作简历的时候，认为网站会是一个加分项，边着手重新搭建一个。因为追求轻量化，那么作为静态博客的 Hexo 便是首选了。</p><blockquote><p>维基百科中有言，古埃及人早在 3600 年前，便有驯养猫的历史，故曰猫之三千六百岁。</p></blockquote><h2 id="二、轻量简约">二、轻量简约</h2><p>静态博客无需 WEB 服务器做处理，这样整个网站的开支降到一个极为节俭的程度。罗列下本网站的开支：</p><pre><code>- 域名：cn 域名 35/年。- 存储：Github 免费；腾讯云对象存储 0.13/G。- 访问：Github 免费；腾讯云对象存储 0.5/G。- 分发：腾讯云对象存储 CDN 0.15/G。</code></pre><p>事实上，对于一个小站，除了域名开支，很少会用到付费部分。</p><p>毕竟，<strong>网站的真正的开支大头是云服务器呀</strong>。</p><h2 id="三、环境">三、环境</h2><p>Hexo 是需要 Node.js 环境的，而且个人对网站主题文件也做了一些修改，甚至部分插件也有改动，使用 <code>npm install --save</code> 安装插件的话，很是影响网站结构。</p><p>所以，后来，干脆在 Github 建立一个私有仓库，将整个 Hexo 目录连带着插件文件一并打包上传。这样子起码解决了网站内容的问题，但是 Hexo 所需环境还是个麻烦，Linux 还好，Windows 下无论是搭建还是终端下命令的使用都很难受，但是山重水复疑无路，柳暗花明又一村。</p><p>我发现了腾讯云开发者平台，这个平台在很早之前就存档，当时远远没有现在的易用性，多个版本的迭代后，Cloud Studio 使用体验上是非常的优秀，如你所见，整个编辑界面，应该是改自 Visual Studio Code 。最后提及一句，它相当于为你提供了一个免费的 Linux 服务器，做一些编辑之类的真的是很赞呀，可以让你随时随地修并提交网站内容。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Cloud Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04 安装笔记</title>
      <link href="/blog/c6df61d3/"/>
      <url>/blog/c6df61d3/</url>
      
        <content type="html"><![CDATA[<p class='p center logo ultra'><i class="fab fa-linux"></i></p><p class='p center logo large'>Ubuntu 18.04</p><p class='p center logo small gray'>安装配置和美化</p><br><br><hr><details cyan><summary> 文章更新日志 </summary>              <div class='content'>              <div class="timeline"><div class="timenode"><div class="meta"><p><p>2019.04.28</p></p></div><div class="body"><ul><li>重构文章，修改并调整内容。</li><li>补充来源链接，方便时效性内容的验证。</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2019.07.29</p></p></div><div class="body"><ul><li>更正 Shell 的安装命令。</li><li>解决下载速度慢的小工具。</li><li>删除所有配图。</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2020.05.07</p></p></div><div class="body"><ul><li>添加原来的配图（整理的时候，发现当初的桌面还怪好看的，容我置顶得瑟会儿）</li></ul></div></div></div>              </div>            </details><hr><h2 id="一、安装操作系统">一、安装操作系统</h2><h3 id="1-1-引导盘">1.1 引导盘</h3><ul><li><p>刻录进光盘：</p><ul><li>使用 <em><a href="https://www.ultraiso.com/download.html">UltraISO</a></em> 对镜像文件进行刻录，同时存在 Legacy , UEFI 两种引导项，需通过 UEFI 形式读入光盘。</li></ul></li><li><p>刻录进 U 盘：</p><ul><li><p><strong>方案一：解压镜像文件</strong> 【<strong>推荐</strong>】</p><p>将 U 盘格式化为 <strong>FAT32</strong> ，然后解压操作系统的镜像文件至 U 盘根目录，完成 “刻录” 。</p></li><li><p>方案二：使用刻录工具</p><p>利用软件 <em><a href="https://rufus.akeo.ie/?locale=zh_CN">Rufus</a></em> 完成镜像刻录。</p></li></ul></li></ul><blockquote><p>刻录 Windows PE 系统，如“微 PE”可以选择三分区，也就是引导一个分区，PE 一个分区，U 盘剩余空间一个分区；而如果利用方案一的解压方式，那么 U 盘将被识别出两个引导，Windows &amp; Linux 。</p></blockquote><h3 id="1-2-分区">1.2 分区</h3><p>分区，也就是提前为 Ubuntu 系统划分空间，这一步可以在 Windows 下进行，也可以在安装操作系统时进行。</p><p>Linux 系统的分区只建议划分根 <code>/</code> 和家目录 <code>/home</code> ，如此系统文件与个人文件分离，最大程度的保留数据。</p><p>交换分区：建议使用 swap 文件代替 swap 分区，削减多余的分区。</p><h3 id="1-3-安装系统">1.3 安装系统</h3><p>一些注意事项：</p><ul><li>硬盘格式：GPT ；引导类型：UEFI 。</li><li>单系统用户，务必准备一个 <strong>EFI (ESP)</strong> 分区，否则无法写入 Grub 引导。</li><li>安装过程中建议勾选 <strong>最小安装</strong> 、 <strong>安装 Ubuntu 时下载更新</strong> 和 <strong>为图形或无线硬件安装第三方软件</strong> 。</li><li>关于下载速度的问题：如无合适的解决方案，可安装系统换源后再进行下载操作。</li></ul><hr><h2 id="二、开箱即用的操作系统">二、开箱即用的操作系统</h2><blockquote><p>遗憾的是，Ubuntu 的开箱体验并不优秀，不过好在配置过程也不复杂，完成 2.1 和 2.3 便差不多可用了 。</p><p>本节按照线性顺序进行，虽然实际安装过程中，限于网速多半会先安装 Chrome 和 Clash （相关内容位于第三节）。此外操作系统中自带的火狐浏览器为国际版，而非国内谋智代理的火狐，两者账户不互通。</p></blockquote><h3 id="2-1-第一次重启前">2.1 第一次重启前</h3><h4 id="2-1-1-完成第一次更新">2.1.1 完成第一次更新</h4><p>先移步到 <strong>所有软件 (Win + A)<strong>→</strong>软件更新器</strong> ，等待系统完成更新。（其实等待一会儿会自动弹出的）</p><p>接着移步到 <strong>所有软件</strong>→<strong>设置</strong>→<strong>区域和语言</strong>→<strong>管理已安装的语言</strong> ，完成语言列表的更新。</p><h4 id="2-2-2-转移备份文件">2.2.2 转移备份文件</h4><p>在选择重启操作系统前，拷贝文件到新系统中（如果存在的话）。</p><h4 id="2-2-3-解决双系统时差问题">2.2.3 解决双系统时差问题</h4><p>Windows + Linux 需求用户可以使用以下代码在终端中执行解决此问题。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl set-local-rtc 1 --adjust-system-clock</span><br></pre></td></tr></table></figure><h4 id="2-2-4-替换-Shell">2.2.4 替换 Shell</h4><p>不得不说，有一个智能的补全能力强大的终端还是非常有必要的，二选一。</p><p>(a). <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">sudo apt install zsh</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><p>(b). <a href="https://launchpad.net/~fish-shell/+archive/ubuntu/release-3">fish</a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:fish-shell/release-3</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fish</span><br><span class="line">chsh -s /usr/bin/fish</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> fish_greeting </span><br><span class="line">fish_config</span><br></pre></td></tr></table></figure><h4 id="2-2-5-终端下的包安装器">2.2.5 终端下的包安装器</h4><p>相比于图形界面 ，在终端下安装 deb 包可以获得更多的信息提示，但是使用 <code>dpkg</code> 命令又无法自动解决依赖问题，这里可以使用 <code>gdebi</code> 安装器解决此问题。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install gdebi</span><br></pre></td></tr></table></figure><h3 id="2-2-换一套主题">2.2 换一套主题</h3><blockquote><p>此节是为伸手党准备的，详细的内容可参见 <code>2.3 主题自定义</code> （新手可以不必去看）。</p><p>可以通过本节内容快速完成主题方面的修改，注：<code>gnome-shell-extensions</code> 是一些常用扩展的集合，如 User Themes 等（事实上它可以在应用商店里搜索安装）。</p></blockquote><p><img src="../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507105957944.png" alt="外观配置"></p><h4 id="2-2-1-系统主题-Sieera">2.2.1 系统主题 Sieera</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:dyatlov-igor/sierra-theme</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install sierra-gtk-theme       <span class="comment"># point releases</span></span><br><span class="line">sudo apt install sierra-gtk-theme-git   <span class="comment"># git master branch</span></span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://github.com/vinceliuice">vinceliuice</a>/<a href="https://github.com/vinceliuice/Sierra-gtk-theme">Sierra-gtk-theme</a></li></ul><h4 id="2-2-2-应用图标-suru-plus">2.2.2 应用图标 suru-plus</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/gusbemacbe/suru-plus/master/install.sh | env DESTDIR=<span class="string">&quot;<span class="variable">$HOME</span>/.icons&quot;</span> sh</span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://github.com/gusbemacbe">gusbemacbe</a>/<a href="https://github.com/gusbemacbe/suru-plus">suru-plus</a></li></ul><h4 id="2-2-3-Grub-引导主题-Fallout">2.2.3 Grub 引导主题 Fallout</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -O - https://github.com/shvchk/fallout-grub-theme/raw/master/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://github.com/shvchk">shvchk</a>/<a href="https://github.com/shvchk/fallout-grub-theme">fallout-grub-theme</a></li></ul><h4 id="2-2-4-鼠标光标-oxy-blue">2.2.4 鼠标光标 oxy-blue</h4><ul><li>下载 <a href="https://www.opendesktop.org/p/1274872/">oxy-blue.zip</a>，解压文件到：<code>~/.icons</code> 。</li></ul><h4 id="2-2-5-文泉驿字体">2.2.5 文泉驿字体</h4><ul><li><p>文泉驿字体 微米黑/正黑：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install fonts-wqy-microhei fonts-wqy-zenhei</span><br></pre></td></tr></table></figure></li><li><p>终端字体 powerline ：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fonts-powerline</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-6-优化工具">2.2.6 优化工具</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br><span class="line">sudo apt install gnome-shell-extensions</span><br></pre></td></tr></table></figure><ul><li>然后，从应用列表中打开一个名为 <strong>优化</strong> 的软件，在扩展中启用 “ User Themes ”；</li></ul><blockquote><p>在外观中修改：应用程序、光标、图标和 Shell 就大功告成了，最后不要忘记换一个赏心悦目的桌面背景。</p></blockquote><h4 id="2-2-7-输入法和-Dock">2.2.7 输入法和 Dock</h4><ul><li>参阅 2.3 部分的相关内容。</li></ul><h3 id="2-3-主题自定义">2.3 主题自定义</h3><blockquote><p>主题自定义中共包含 6 个部分，涉及 2.2 中各项具体的解释。</p></blockquote><h4 id="2-3-1-Gnome-tweak-tool">2.3.1 Gnome-tweak-tool</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure><p>移步到 <strong>所有软件</strong>→<strong>Ubuntu 软件</strong>→<strong>附加组件</strong> ，在此处安装相应的 Shell 组件（或者参考 3.2 节）。</p><blockquote><p>为了自定义 Shell 主题（加载本地文件），需要安装、启用插件：<em>User Themes</em> 。</p></blockquote><h4 id="2-3-2-主题-图标-字体">2.3.2 主题 图标 字体</h4><p>安装目录有两种，区别上类似于 Windows 环境变量里的个人和系统。</p><ol><li>主题存放目录：<code>/usr/share/themes</code> 或 <code>~/.themes</code></li><li>图标存放目录：<code>/usr/share/icons</code> 或 <code>~/.icons</code></li><li>字体存放目录：<code>/usr/share/fonts</code> 或 <code>~/.fonts</code></li></ol><p>其中 <em>/usr/share</em> 目录需要 root 权限才能修改，可以对文件管理提权后打开：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nautilus</span><br></pre></td></tr></table></figure><h4 id="2-3-3-Grub-启动项主题">2.3.3 Grub 启动项主题</h4><p>主题包地址：<a href="https://www.gnome-look.org/browse/cat/109/order/latest">Gnome Look - GRUB Themes</a> （自行挑选喜欢的）</p><p><strong>(a)</strong> <strong>手写配置文件</strong></p><p>安装步骤 ：首先下载主题包，多为压缩包，解压出文件。使用 <code>sudo nautilus</code> 打开文件管理器。</p><p>定位到目录：<code>/boot/grub</code>，在该目录下 <strong>新建文件夹</strong> ：<code>themes</code>，将解压出的文件拷贝到文件夹中。</p><p>接着（终端下）使用 gedit 修改 <em>grub</em> 文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure><p>在该文件末尾添加：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GRUB_THEME=&quot;/boot/grub/themes/主题包文件夹名称/theme.txt&quot;</span></span><br><span class="line">GRUB_THEME=<span class="string">&quot;/boot/grub/themes/fallout-grub-theme-master/theme.txt&quot;</span></span><br></pre></td></tr></table></figure><p>更新配置文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><p><strong>(b)</strong> <strong>利用软件 Grub Customizer</strong> 【<strong>推荐</strong>】</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:danielrichter2007/grub-customizer</span><br><span class="line">sudo apt install grub-customizer</span><br></pre></td></tr></table></figure><p>可使用该软件定制 Grub ，如修改启动项名称，<strong>默认启动改为上一次启动项</strong> 。</p><ul><li>相关链接：<a href="https://launchpad.net/~danielrichter2007/+archive/ubuntu/grub-customizer">Launchpad PPA for Grub Customizer</a></li></ul><p><img src="../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110107616.png" alt="Grub Customizer"></p><h4 id="2-3-4-GDM-登录背景图">2.3.4 GDM 登录背景图</h4><p>更换登录界面的背景图需要修改 <code>ubuntu.css</code>，它位于 <code>/usr/share/gnome-shell/theme</code> 。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /usr/share/gnome-shell/theme/ubuntu.css</span><br></pre></td></tr></table></figure><p>在文件中找到关键字 <code>lockDialogGroup</code>，如下行：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#lockDialogGroup &#123;</span></span><br><span class="line">   background: <span class="comment">#2c001e url(resource:///org/gnome/shell/theme/noise-texture.png);</span></span><br><span class="line">   background-repeat: repeat; &#125;</span><br></pre></td></tr></table></figure><p>修改图片路径即可，样例如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#lockDialogGroup &#123;</span></span><br><span class="line">background: <span class="comment">#2c001e url(file:///home/inkss/APP/ink_img/img.jpg);</span></span><br><span class="line">   background-repeat: no-repeat;</span><br><span class="line">   background-size: cover;</span><br><span class="line">   background-position: center; &#125;</span><br></pre></td></tr></table></figure><p><img src="../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110222935.png" alt="GDM"></p><h4 id="2-3-5-输入法-中州韵和搜狗">2.3.5 输入法 中州韵和搜狗</h4><blockquote><p>首先，默认状态下 Ubuntu 的中文输入法属于可用但不完全好用的状态，这里记录两类输入法，二选一。</p></blockquote><p>(a) <strong>中州韵输入法</strong></p><p>前置提醒：中州韵没有 GUI 界面，只能通过配置文件进行定制，需要一定的研究能力。</p><p>基于 IBus 框架的中州韵（默认为此框架）：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ibus-rime</span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://github.com/rime/home/wiki/RimeWithIBus">ibus-rime</a></li></ul><p>(b) <strong>搜狗输入法</strong></p><p>搜狗基于 Fcitx 输入框架，默认没有安装，需要先安装框架：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install fcitx</span><br></pre></td></tr></table></figure><p>去 <a href="https://pinyin.sogou.com/linux/?r=pinyin">搜狗输入法官网</a> 下载输入法安装包安装：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gdebi xxxxxx.deb</span><br></pre></td></tr></table></figure><p>然后移步到 <strong>设置</strong>→<strong>区域和语言</strong> ，删除一部分输入源，只保留汉语，接着选择 <strong>管理已安装的语言</strong> ，修改 <em>键盘输入法系统</em> 为 <strong>fcitx</strong> 。关闭窗口，打开所有程序，选择软件  <strong>Fcitx 配置</strong> ，选择加号添加搜狗输入法。</p><blockquote><p>如果没有找到搜狗，就重启系统，再次重复以上步骤即可。（多半找不到，呱）</p><p>推荐一个搜狗输入法皮肤：<a href="https://pinyin.sogou.com/skins/detail/view/info/519557?rf=subject_jjzq&amp;tf=p">简约-信</a> 。</p><p>PS：两个输入法可以共存。</p></blockquote><h4 id="2-3-6-Dock-Docky">2.3.6 Dock - Docky</h4><p>一个第三方 Dock 软件，颜值上比 Ubuntu 自带 Dock 好了些许。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install docky</span><br></pre></td></tr></table></figure><ul><li>【可选】如何 <a href="https://my.oschina.net/ic4907/blog/158747"><em>去掉 Docky 第一个图标</em></a></li></ul><p>在 <strong>Ubuntu SoftWare</strong> 中搜索 <em>Configuration Editor</em> ，安装后打开软件，定位到：</p><p><strong><code>/apps/docky-2/Docky/Items/DockyItem</code></strong></p><p>取消 <em>ShowDockyItem</em> 的勾选状态（决定是否显示 第一个 Docky）</p><hr><h2 id="三、后续完善">三、后续完善</h2><blockquote><p>此节内容可跳跃观看，仅供参考，<strong>合理辨认内容是否过时</strong>。</p></blockquote><h3 id="3-1-DeepinWine-Wine-QQ">3.1 DeepinWine Wine QQ</h3><p>首先需要在本机下载 Deepin-Wine 环境：<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu"><strong>deepin-wine-ubuntu</strong></a></p><p>克隆或下载压缩包到本机，<strong>解压后</strong> 在终端目录下执行命令：<code>./install.sh</code> 安装环境。</p><p>容器下载地址：<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/">Index of /deepin/pool/non-free/d/</a> ，使用方法见仓库中的 <a href="https://github.com/wszqkzqk/deepin-wine-ubuntu/blob/master/README.md">ReadMe</a> 文件。</p><blockquote><p><strong>关于托盘</strong>：安装 <em>TopIconPlus</em> 的 gnome-shell 扩展。</p><p>然后在所有软件中找到 <strong>优化 (Gnome-tweak-tool)</strong> ，在扩展中打开 <em>Topicons plus</em> 。</p></blockquote><h3 id="3-2-Gnome-扩展">3.2 Gnome 扩展</h3><p>获取扩展的方法很多：终端命令，软件中心下载，浏览器下载等，这里主要介绍浏览器下载。</p><p>首先安装 Gnome Shell ：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure><p>然后安装浏览器插件（<strong>谷歌浏览器</strong>）：<a href="https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep">Chrome 网上应用商店</a> 。</p><p>无条件的同学可以使用火狐浏览器安装扩展：<a href="https://addons.mozilla.org/zh-CN/firefox/addon/gnome-shell-integration/?src=search">GNOME Shell integration</a> 。</p><p>浏览器插件安装完成后点击 <em>插件图标</em> 就能进入：<strong><a href="https://extensions.gnome.org/">Shell 扩展商店</a></strong> 。</p><p><strong>Gnome 扩展推荐</strong>（点击链接进入，按需使用） :</p><table><thead><tr><th style="text-align:left">扩展</th><th style="text-align:left">简要功能描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1217/appfolders-manager/">Appfolders Management extension</a></td><td style="text-align:left">【荐】添加文件夹</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/6/applications-menu/">Applications Menu</a></td><td style="text-align:left">在顶部添加一个应用程序入口</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/595/autohide-battery/">Autohide Battery</a></td><td style="text-align:left">【荐】自动隐藏电源（充电状态下已满）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/517/caffeine/">Caffeine</a></td><td style="text-align:left">取消自动锁屏（应用前台允许下）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/779/clipboard-indicator/">Clipboard Indicator</a></td><td style="text-align:left">剪切板管理工具</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/">Coverflow Alt-Tab</a></td><td style="text-align:left">【荐】Alt Tab 切换应用（更酷炫的界面）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a></td><td style="text-align:left">【荐】Dock （大名鼎鼎）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1160/dash-to-panel/">Dash to Panel</a></td><td style="text-align:left">【荐】对顶栏的操作处理（诸如自动隐藏等）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/690/easyscreencast/">EasyScreenCast</a></td><td style="text-align:left">录屏工具（录制质量优秀）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1166/extension-update-notifier/">Extension update notifier</a></td><td style="text-align:left">【荐】自动推送所有扩展的更新信息</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1105/keys-indicator/">Keys Indicator</a></td><td style="text-align:left">【荐】顶栏显示 shift,alt,ctrl,num,cap 状态</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1439/never-close-calendar-event/">Never close calendar event</a></td><td style="text-align:left">从不清除日历事件</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/750/openweather/">OpenWeather</a></td><td style="text-align:left">【荐】顶栏显示天气情况（支持中文）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/8/places-status-indicator/">Places Status Indicator</a></td><td style="text-align:left">【荐】提供快捷目录入口（同文件管理器）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1349/popup-dict-switcher/">Popup dict Switcher</a></td><td style="text-align:left">一键开关划词翻译 &gt;&gt;&gt; 参考下文&lt;&lt;&lt;</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/7/removable-drive-menu/">Removable Drive Menu</a></td><td style="text-align:left">【荐】移除可移动设备</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1112/screenshot-tool/">Screenshot Tool</a></td><td style="text-align:left">【荐】截图工具（挺方便）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/906/sound-output-device-chooser/">Sound Input &amp; Output Device Chooser</a></td><td style="text-align:left">更方便的调整声音、亮度</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/120/system-monitor/">System-monitor</a></td><td style="text-align:left">在状态栏中显示系统信息（需要解决依赖）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/584/taskbar/">TaskBar</a></td><td style="text-align:left">类似于 Windows 任务栏的显示效果</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1238/time/">Time ++</a></td><td style="text-align:left">番茄钟（闹钟、秒表、计时器）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/1031/topicons/">TopIcons Plus</a></td><td style="text-align:left">【荐】顶栏显示应用图标（托盘显示）</td></tr><tr><td style="text-align:left"><a href="https://extensions.gnome.org/extension/19/user-themes/">User Themes</a></td><td style="text-align:left">【荐】允许本地安装使用 Shell 主题</td></tr></tbody></table><blockquote><p>以上表格提到的所有扩展都能在 Ubuntu 18.04 中使用，若出现安装失败，请检查 <strong>是否满足相关依赖</strong> 。</p></blockquote><h3 id="3-3-文件备份合集">3.3 文件备份合集</h3><h4 id="3-3-1本地同步备份">3.3.1本地同步备份</h4><p><a href="https://freefilesync.org/"><strong>FreeFileSync</strong></a> 是一款本地同步 <strong>备份</strong> 软件：如将本地硬盘上的文件同步到移动硬盘上。可以做到增量备份、自动识别差异项等。同步方式有：<em>双向、镜像、更新</em> 。下载地址：<a href="https://freefilesync.org/download.php">Download FreeFileSync</a> ，解压后直接点击 <em>FreeFileSync</em> 文件就能使用。</p><ul><li>因为没有图标，这里给出写入图标的方式（有工具就绝对不手写）：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># –-no-install-recommends 参数避免安装非必须的文件，从而减小体积</span></span><br><span class="line">sudo apt install --no-install-recommends gnome-panel</span><br></pre></td></tr></table></figure><ul><li>创建应用程序启动方式</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gnome-desktop-item-edit /usr/share/applications/ --create-new</span><br></pre></td></tr></table></figure><p>命令：点浏览展开到解压目录，选择 <em>FreeFileSync</em> 的可执行文件。</p><p>图标：解压包中有一个名为 <em>Resources.zip</em> 的压缩包，含有一些图片，从中选取软件图标。</p><h4 id="3-3-2-云端同步备份">3.3.2 云端同步备份</h4><p><a href="https://www.jianguoyun.com/"><strong>坚果云</strong></a> 是一款云端 <strong>同步</strong> 软件，与同类的 <em>OneDrive</em> 相比，坚果云做到了全平台兼容。</p><p>其免费版本流量限制、空间不限（下载 3G/月，上传 1G/月）；专业版一年 42G 空间、不限流量，<em>199.90</em> 元（<em>差不多是处于打折状态下 Office 365 的价格，有 1T OneDrive 空间</em>）。</p><p>下载地址：<a href="https://www.jianguoyun.com/s/downloads/linux">坚果云 Linux 版</a> （普通的 deb 安装包）</p><h4 id="3-3-3-局域网文件互传">3.3.3 局域网文件互传</h4><p><strong>Chfs</strong> 是一个免费的、HTTP 协议的文件共享服务器，使用浏览器可以快速访问。它具有以下特点：</p><ol><li><strong>单个文件</strong>，整个软件只有一个可执行程序，无配置文件等其他文件</li><li>跨平台运行，支持主流平台：Windows，Linux 和 Mac</li><li>支持扫码下载和手机端访问，手机与电脑之间共享文件非常方便</li><li>支持账户权限控制和地址过滤</li></ol><p>下载地址：<a href="http://iscute.cn/chfs">CuteHttpFileServer</a> ，使用方案见网站说明。</p><h4 id="3-3-4-在线文件管理器">3.3.4 在线文件管理器</h4><p>基于 <strong>Caddy</strong> 的 <strong>FileBrowser</strong> 模块，除此之外还可以使用 webdav 模块启用 webdav 功能。</p><ul><li>安装 Caddy</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl https://getcaddy.com | bash -s personal http.filebrowser</span><br></pre></td></tr></table></figure><ul><li>新建配置文件 <code>Caddyfile</code> ，文件位置 <code>/home/ubuntu/caddy/Caddyfile</code></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:8080 &#123;</span><br><span class="line">  gzip</span><br><span class="line">  timeouts none</span><br><span class="line">  filebrowser / / &#123;</span><br><span class="line">    database /home/ubuntu/caddy/filebrowser.db</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上写法的作用是通过 IP 的 <code>8080</code> 端口访问网页，这个 IP 既可以是公网 IP 也可以是内网 IP 。具体的文件路径可以在登录网页后在网站设置内手动修改，数据库的存放目录要灵活自己选择，配置文件的存放目录同样可以自拟。</p><p>在 <code>/home/ubuntu/caddy/</code> 目录下打开终端，执行命令：<code>caddy</code> ，终端提示错误忽略即可。</p><p>打开网址：<a href="http://localhost:8080">http://localhost:8080</a> 访问，默认的用户名和密码均为：<code>admin</code> （可以手写一个脚本自动运行）。</p><p><strong>更多的内容可以参看这篇实验：</strong><a href="https://cloud.tencent.com/developer/labs/lab/10453">基于 Caddy 搭建基于网页的文件共享管理系统</a> 。</p><p>相关文档：<a href="https://docs.filebrowser.xyz/installation#caddy">FileBrowser # caddy</a> 。</p><h4 id="3-3-5-系统快照备份">3.3.5 系统快照备份</h4><p>制作快照的软件 <strong>TimeShift</strong> ，可以对整个分区进行备份，以分区为单位进行恢复。这里安装它即可：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install timeshift</span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://github.com/teejee2008">teejee2008</a>/<a href="https://github.com/teejee2008/timeshift">timeshift</a></li></ul><p><img src="../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110243274.png" alt="超级推荐的软件"></p><h3 id="3-4-网易云音乐">3.4 网易云音乐</h3><ul><li><strong>以下内容对应网易云音乐 1.1.0 版本。</strong></li></ul><p>首先去网易云音乐官网 <a href="https://music.163.com/#/download">下载安装包</a>（Ubuntu 16.04 64 位），然后就是正常的 deb 包安装过程。</p><p>安装完毕后，会发现在应用列表中 <strong>点击应用图标无法启动软件</strong> ，解决方案：</p><p>修改网易云音乐的启动图标</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /usr/share/applications/netease-cloud-music.desktop</span><br></pre></td></tr></table></figure><p>修改 Exec 这一行内容</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Exec=sh -c <span class="string">&quot;unset SESSION_MANAGER &amp;&amp; netease-cloud-music %U&quot;</span></span><br></pre></td></tr></table></figure><p>附录：网易云音乐配置及缓存目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">~/.config/netease-cloud-music</span><br><span class="line">~/.cache/netease-cloud-music</span><br></pre></td></tr></table></figure><blockquote><p>参考资料地址：<a href="https://www.zhihu.com/question/277330447/answer/478510195">Ubuntu 18.04 装了网易云音乐，难道只能用 sudo 启动吗？- @Fancy 解答</a></p></blockquote><h3 id="3-5-Clash">3.5 Clash</h3><blockquote><p>地址：<a href="https://github.com/Dreamacro">Dreamacro</a>/<a href="https://github.com/Dreamacro/clash">clash</a>  A rule-based tunnel in Go.</p></blockquote><ul><li>HTTP/HTTPS and SOCKS protocol</li><li>Surge like configuration</li><li>GeoIP rule support</li><li>Support Vmess/Shadowsocks/Socks5</li><li>Support for Netfilter TCP redirect</li></ul><blockquote><p>大部分 PC 下载 clash-linux-amd64.tar.gz 即可。</p><p>利用 <a href="http://clash.razord.top/">Clash Dashboard</a> 切换，管理。</p><p>写个小脚本解决自启动。</p></blockquote><h3 id="3-6-Chrome">3.6 Chrome</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - </span><br><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list&#x27;</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install google-chrome-stable</span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://www.google.com/linuxrepositories/">Google Linux Software Repositories</a> , <a href="https://www.ubuntuupdates.org/ppa/google_chrome">UbuntuUpdates</a> 。</li></ul><h3 id="3-7-Typora">3.7 Typora</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository <span class="string">&#x27;deb https://typora.io/linux ./&#x27;</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install typora</span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://www.typora.io/#linux">Typora for Linux</a></li></ul><h3 id="3-8-Albert">3.8 Albert</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install curl</span><br><span class="line">curl https://build.opensuse.org/projects/home:manuelschneid3r/public_key | sudo apt-key add -</span><br><span class="line">sudo sh -c <span class="string">&quot;echo &#x27;deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_18.04/ /&#x27; &gt; /etc/apt/sources.list.d/home:manuelschneid3r.list&quot;</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install albert</span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://albertlauncher.github.io/docs/installing/">Albert</a> , <a href="https://software.opensuse.org/download.html?project=home:manuelschneid3r&amp;package=albert">OpenSUSE</a></li></ul><h3 id="3-9-popup-dict">3.9 popup-dict</h3><p>Linux 下的划词翻译工具，支持使用有道等多种翻译服务。</p><p>安装过程：安装 pip3 ，如果已有请忽略此步骤</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>安装 PyGObject 依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install python-gi python-gi-cairo python3-gi python3-gi-cairo gir1.2-gtk-3.0</span><br></pre></td></tr></table></figure><p>安装 popup-dict</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip3 install popupdict</span><br></pre></td></tr></table></figure><p>运行软件：使用 Gnome 扩展  <a href="https://extensions.gnome.org/extension/1349/popup-dict-switcher/"><code>Popup dict Switcher</code></a></p><ul><li>相关链接：<a href="https://github.com/bianjp">bianjp</a>/<a href="https://github.com/bianjp/popup-dict">popup-dict</a></li></ul><hr><h2 id="四、编程程序">四、编程程序</h2><h3 id="4-1-Hexo-Node-js">4.1 Hexo | Node.js</h3><blockquote><p>三连击预备，Hexo 是一套静态博客系统。如果没有终端代理下载速度可能会绝望的。</p></blockquote><ul><li>安装 NVM ：<code>wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></li><li>安装 Node：<code>nvm install stable</code></li><li>安装 Hexo：<code>npm install -g hexo-cli</code></li></ul><h3 id="4-2-Git-配置">4.2 Git 配置</h3><ul><li>生成 key ：<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></li><li>配置用户名：<code>git config --global user.name &quot;Your Name&quot;</code></li><li>配置邮箱：<code>git config --global user.email &quot;email@example.com&quot;</code></li><li>测试 Github 联通：<code>ssh -T git@github.com</code></li><li>将公钥提取出来命名为：<code>authorized_keys</code> 扔到服务器的 <code>~/.ssh</code> 目录就可以免密登录</li><li>访问远程主机：<code>ssh 用户名@域名/IP</code></li></ul><h3 id="4-3-MySQL-8-X">4.3 MySQL 8.X</h3><blockquote><p>在不做处理的情况下，命令行安装 MySQL 版本为 5.7 ，而它只适配到 Ubuntu 17.04 。</p></blockquote><p>先下载 APT 存储库，地址：<a href="https://dev.mysql.com/downloads/repo/apt/">MySQL APT Repository</a> 。</p><p>然后运行它，默认即为 MySQL 8.0 ，移动光标到 OK 确认即可。</p><p>接着就可以在终端下正常安装 MySQL 了：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><p>附录：执行安全脚本</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>附录：安装 WorkBench</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-workbench-community</span><br></pre></td></tr></table></figure><ul><li>相关链接：<a href="https://www.howtoing.com/install-mysql-8-in-ubuntu">如何在Ubuntu 18.04中安装MySQL 8.0</a></li></ul><h2 id="五、补充内容">五、补充内容</h2><h3 id="5-1-软件列表">5.1 软件列表</h3><ul><li>音乐软件：<a href="https://music.163.com/#/download">网易云音乐</a>、<a href="https://www.spotify.com/int/download/linux/">Spotify</a>、<em>Audacious</em></li><li>聊天软件：<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/">TIM</a>、<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/">微信</a>、Telegram</li><li>办公软件：<a href="http://www.wps.cn/product/wpslinux">WPS</a>、<a href="https://www.foxitsoftware.cn/downloads/">Foxit Reader</a>、 <em>Kile</em>、<a href="https://www.jianguoyun.com/s/downloads">坚果云</a>、XMind、百度脑图离线版</li><li>图形软件：<em>Converseen</em>（图片格式转换）、<em>Krita</em>（类似 PS）、<em>polarr</em> （泼辣修图）</li><li>下载软件：<em>aMule</em>（电驴）、<em>Deluge</em>（种子）、<em>qBittorrent</em>（种子）、<em>uGet</em>（有点类似 IDM）</li><li>截图录屏：<em>深度截图</em>、<em>深度取色器</em>、<em>Shutter</em>、<em>SimpleScreen</em></li><li>版本管理：<a href="https://www.gitkraken.com/git-client">GitKraken</a>、<em>Meld</em></li><li>浏览器：Chrome、<em>Firefox</em></li><li>软件启动器：Albert</li><li>应用商店：App Grid</li><li>剪切板管理：<em>Cliplt</em></li><li>网络代理：electron-ssr</li><li>虚拟键盘：<em>Florence</em></li><li>密码管理：<em>KeePassXC</em></li><li>音频剪辑：<em>Audacity</em></li></ul><h3 id="5-2-代码篇">5.2 代码篇</h3><h4 id="5-2-1-软件图标文件位置">5.2.1 软件图标文件位置</h4><p><code>/usr/share/applications</code> # 大部分启动图标都在此</p><p><code>~/.local/share/applications</code> # 一部分本地图标</p><p><code>/var/lib/snapd/desktop/applications</code> # snap 类软件在此</p><p>对于 *<em>.desktop</em> 文件，可以使用文本编辑器对图标或名称之类的进行修改。</p><h4 id="5-2-2-代码篇">5.2.2 代码篇</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有 shell 以及如何切换</span></span><br><span class="line">cat /etc/shells</span><br><span class="line">chsh -s /xxx/xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制清空回收站</span></span><br><span class="line">sudo rm -rf <span class="variable">$HOME</span>/.<span class="built_in">local</span>/share/Trash/files/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统环境变量位置</span></span><br><span class="line">/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量值 PATH 的一种写法</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:变量1:变量2:变量3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人终端下的环境变量</span></span><br><span class="line">~/.bashrc</span><br><span class="line">~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL 的 root 账户密码</span></span><br><span class="line">sudo mysql -u root <span class="comment"># 使用管理员权限进数据库</span></span><br><span class="line">DROP USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>; <span class="comment"># 删除原数据库中 root 账户</span></span><br><span class="line">CREATE USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;passwd&#x27;</span>; <span class="comment"># 新建并指定密码</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>; <span class="comment"># 赋权</span></span><br><span class="line">FLUSH PRIVILEGES; <span class="comment"># 更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多版本切换（ java 等）</span></span><br><span class="line">sudo update-alternatives --install &lt;link&gt; &lt;name&gt; &lt;path&gt; &lt;priority&gt;</span><br><span class="line">sudo update-alternatives --remove &lt;name&gt; &lt;path&gt;</span><br><span class="line">sudo update-alternatives --config &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Java 环境变量的写法</span></span><br><span class="line"><span class="comment"># 假设 JDK 的解压目录为 /usr/lib/jvm/jdk</span></span><br><span class="line"><span class="comment"># 需要修改文件 /etc/profile</span></span><br><span class="line">sudo gedit /etc/profile</span><br><span class="line"><span class="comment"># 打开文本编辑器后，在最下面添加：</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:&#123;JRE_HOME&#125;/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&#123;JAVA_HOME&#125;/bin:</span><br><span class="line"><span class="comment"># 然后保存退出 刷新</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 添加连接</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk/bin/java 300</span><br><span class="line">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk/bin/javac 300</span><br><span class="line">sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk/bin/jar 300</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python Anaconda env 配置</span></span><br><span class="line">conda create -n your_env_name python=3.7 <span class="comment"># 创键环境</span></span><br><span class="line">conda activate your_env_name <span class="comment"># 激活环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MariaDB</span></span><br><span class="line"><span class="comment"># 使用自定义源 TUNA</span></span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8</span><br><span class="line">sudo add-apt-repository <span class="string">&#x27;deb [arch=amd64,arm64,ppc64el] http://mirrors.tuna.tsinghua.edu.cn/mariadb/repo/10.3/ubuntu bionic main&#x27;</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install mariadb-server</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><h4 id="5-2-3-踩坑记录">5.2.3 踩坑记录</h4><ul><li><p>VMware : 虚拟机安装的前置依赖为：<code>make</code> <code>gcc</code> 。</p></li><li><p>JetBrains toolbox ：使用 toolbox 安装软件比 snap 好太多（速度感人），它也能自动更新 IDE 。但是它会疯狂修改 <code>.desktop</code> 文件，强迫症表示必须要修改图标的样式和主题一致，把图标文件权限设置为只读就能解决。</p></li><li><p>Minecraft 所需要的 JDK 只需要提前安装一个 <code>openjdk-8-jre</code> 。</p></li><li><p>Life is Strange 奇异人生所需要的 Linux 版汉化：<a href="https://pan.baidu.com/s/1dECSYfJ">百度网盘</a> 。</p></li><li><p>XMind : 无启动图标，需要手动添加应用图标，有一个小麻烦是桌面图标文件所在的目录必须和启动软件同目录。此外 XMind 8 版本存在可用的破解激活方案。依赖 JDK8。</p></li><li><p>善用 TimeShift ，它提供了一个回滚系统的机会。</p></li></ul><h2 id="六、截图">六、截图</h2><div class="gallery 3" data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110318847.png' data-fancybox='default' data-caption='桌面'><img fancybox src="../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110318847.png" alt="桌面"></a>        <span class='image-caption'>桌面</span>      </div><br><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110337914.png' data-fancybox='default' data-caption='软件列表'><img fancybox src="../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110337914.png" alt="软件列表"></a>        <span class='image-caption'>软件列表</span>      </div><br><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110355777.png' data-fancybox='default' data-caption='系统'><img fancybox src="../../img/article/Ubuntu18.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20200507110355777.png" alt="系统"></a>        <span class='image-caption'>系统</span>      </div></p></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下联想 Y7KP 显卡和网卡驱动配置</title>
      <link href="/blog/9a96536e/"/>
      <url>/blog/9a96536e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：最近换了个笔记本：联想 Y7000P i5-8300H GTX1060 。驱动上出了些问题，故录此文章，仅供参考。</p></blockquote><h2 id="一、显卡驱动">一、显卡驱动</h2><p>在换这个笔记本之前，上一个笔记本的显卡为 AMD ，倒也没使用过英伟达显卡，曾经看着过很多人吐槽显卡驱动，给我一种它很难装的感觉。但是在本次的使用中，显卡驱动只需要轻轻切换成私有显卡就好了，或许是新版 Ubuntu 做好了适配，这倒是个好事。</p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Ubuntu18.04Y7KP/szyink-20190402142329-522x452.png' data-fancybox='default' data-caption='软件和更新'><img fancybox src="../../img/article/Ubuntu18.04Y7KP/szyink-20190402142329-522x452.png" alt="软件和更新"></a>        <span class='image-caption'>软件和更新</span>      </div></p></div><p>如上图，在 <strong>软件和更新</strong> 的 <strong>附加驱动</strong> 中勾选使用专用驱动就 OK 了。</p><h2 id="二、网卡驱动">二、网卡驱动</h2><p>相比于显卡驱动，网卡驱动倒是头疼了很久。在安装 Ubuntu 系统时使用的是有线连接，完全没注意到无线连接会出现问题，后来发现这个问题时一度担心操作系统没有该网卡驱动，幸好是有的，可以解决。</p><p>在最开始，操作系统甚至 <strong>无法识别出无线模块，提示没有适配器</strong> ，这里的操作是从官网下载驱动进行安装。</p><ul><li><p>Y7000P 的网卡型号是：<code>Intel® Wireless-AC 9560</code></p></li><li><p>在官网下载 Linux 版本的驱动：<a href="https://www.intel.com/content/www/us/en/support/articles/000005511/network-and-i-o/wireless-networking.html">Linux * Support for Intel</a> 。</p></li></ul><p>下载驱动解压后，按照要求将驱动文件复制到 <code>lib/firmware</code> 目录，然后重启电脑，就能出现适配器了。但此时还无法使用，大致的解释是笔记本带的驱动和 Ubuntu 系统中的驱动冲突，我们需要禁用一个。</p><p>修改文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist-firewire.conf</span><br></pre></td></tr></table></figure><p>在最后追加一行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist ideapad_laptop</span><br></pre></td></tr></table></figure><p>然后重启电脑就好了，最后说一下我在查阅资料时大部分人似乎一开始就有 wifi 适配器，只需要修改文件就行，我这儿连 wifi 模块都没有，这里需要合理判断咯。</p><div class="gallery stretch" col='2' data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Ubuntu18.04Y7KP/szyink-20190402144556-980x708.png' data-fancybox='default' data-caption='Wifi'><img fancybox src="../../img/article/Ubuntu18.04Y7KP/szyink-20190402144556-980x708.png" alt="Wifi"></a>        <span class='image-caption'>Wifi</span>      </div><br><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Ubuntu18.04Y7KP/szyink-20190402144606-980x708.png' data-fancybox='default' data-caption='PC'><img fancybox src="../../img/article/Ubuntu18.04Y7KP/szyink-20190402144606-980x708.png" alt="PC"></a>        <span class='image-caption'>PC</span>      </div></p></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 联想Y7000P </tag>
            
            <tag> 网卡驱动 </tag>
            
            <tag> 显卡驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office 365 免费订阅申请</title>
      <link href="/blog/82e6dcea/"/>
      <url>/blog/82e6dcea/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Office 365 开发人员计划</strong> ：通过这个计划可以免费申请到一年 <code>Office 365 企业版 E3（开发人员）</code> 订阅。</p></blockquote><h2 id="1-Office-365-开发人员计划">1.Office 365 开发人员计划</h2><div class="gallery stretch" data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/01.png' data-fancybox='default' data-caption='Office 365'><img fancybox src="../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/01.png" alt="Office 365"></a>        <span class='image-caption'>Office 365</span>      </div></p></div><p>➡️ <strong>相关链接</strong>：<a href="https://developer.microsoft.com/zh-cn/office/dev-program">Office 365 开发者计划</a></p><p>申请过程这里不多阐述了，登录微软账户后按照提示操作即可，最终能够获得：</p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/02.png' data-fancybox='default' data-caption='订阅信息'><img fancybox src="../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/02.png" alt="订阅信息"></a>        <span class='image-caption'>订阅信息</span>      </div></p></div><p>总共有 25 个账户，24 个可分配用户，每一个用户等同一个 Office 365 家庭版订阅。</p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/03.png' data-fancybox='default' data-caption='安装状态'><img fancybox src="../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/03.png" alt="安装状态"></a>        <span class='image-caption'>安装状态</span>      </div></p></div><h2 id="2-设置-Office-域">2.设置 Office 域</h2><p>在 <strong>Microsoft 365 admin center</strong> 界面，有一个被称作 <strong>域</strong> 的功能：</p><p>默认的域名为：<code>username.onmicrosoft.com</code> ，用户默认登录名则是：<code>xxxx.username.onmicrosoft.com</code> 。</p><p>本质上只是一个三级域名，长且繁琐，所以最好使用自己的域名。鉴于成本原因（外加不需要备案），此处推荐从   <strong>Freenom</strong> 处申请。</p><p>➡️ <strong>相关链接</strong>：<a href="https://www.freenom.com/zh/index.html">Freenom</a></p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/04.png' data-fancybox='default' data-caption='Freenom'><img fancybox src="../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/04.png" alt="Freenom"></a>        <span class='image-caption'>Freenom</span>      </div></p></div><p>可以在这个网站上 <strong>以免费的价格申请到最长一年</strong> 的域名（在域名到期前会发邮件通知）。</p><p>拿到域名后，回到 Office 设置，添加域信息即可（其中一步需要更改域名的 DNS 解析）。</p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/05.png' data-fancybox='default' data-caption='DNS 设置'><img fancybox src="../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/05.png" alt="DNS 设置"></a>        <span class='image-caption'>DNS 设置</span>      </div></p></div><p>在 Office 域中显示如下：</p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/06.png' data-fancybox='default' data-caption='Office 域'><img fancybox src="../../img/article/Office-365-%E5%85%8D%E8%B4%B9%E8%AE%A2%E9%98%85%E7%94%B3%E8%AF%B7/06.png" alt="Office 域"></a>        <span class='image-caption'>Office 域</span>      </div></p></div><h2 id="3-免费域名">3.免费域名</h2><p>虽然 Freenom 提供了免费域名申请，但是其用户协议里也要求域名必须能够正常使用（也就是通过域名必须能够访问成功），否则域名就会被收回。</p><p>这里的处理措施是用 Github Page 规避：<a href="https://github.com/July7183/july7183.github.io">https://github.com/July7183/july7183.github.io</a></p><ul><li>通过开发者认证可以申请到一年 25 账户 的 Office 365 E3 订阅。</li><li>Office 365 提供了一个域功能，允许用户使用自有域名设置账户信息。</li><li>Freenom 提供免费域名的申请，但是域名必须能够正常访问，否则域名就会被收回。</li><li>本域名并未备案，因为域的原因使用了微软 DNS 解析，不确保中国境内的正常访问。</li><li>微软的 DNS 竟然不能直接解析主域名 <code>@</code> 。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈泛域名：解析、证书、分发</title>
      <link href="/blog/8967398c/"/>
      <url>/blog/8967398c/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p>概述：本文主要介绍这些内容： <strong>DNS 泛域名解析</strong>、<strong>SSL 泛域名证书申请</strong>、<strong>CDN 泛域名加速（分发）。</strong> <br> 前置：本文中 DNS 服务商为 <a href="https://www.dnspod.cn">DNSPod</a> ，SSL 证书由 <a href="https://letsencrypt.org">Let’s Encrypt</a> 颁发，CDN 则是使用 <a href="https://cloud.tencent.com/product/cdn-scd">腾讯云 CDN</a> 。 <br> 环境：基础的操作环境：主机: <strong>CentOS 7.4</strong> 、服务器: <strong>Nginx</strong> 、其他：<code>acme.sh</code> 。 <br> 附录：介绍 CentOS 的 Nginx 安装和配置。</p></div> <span id="more"></span><h2 id="一、DNS-域名解析">一、DNS 域名解析</h2><blockquote><p>谈及 DNS 解析，一般有这几点要素：<strong>主机记录</strong>、<strong>记录类型</strong>、<strong>线路类型</strong>、<strong>记录值</strong>、<strong>TTL</strong> 。</p></blockquote><ul><li><strong>主机记录（<em>@, *,xxx</em>）</strong> 假设根域名： <code>domain.com</code></li></ul><table><thead><tr><th>主机记录</th><th>解释</th><th>解析后网址</th></tr></thead><tbody><tr><td>@</td><td>直接对主域名解析</td><td><code>domain.com</code></td></tr><tr><td><strong>*</strong></td><td><strong>泛域名解析，匹配所有二级域名</strong></td><td><code>*.domain.com</code></td></tr><tr><td>www</td><td>对二级域名为 www 的网址解析</td><td><code>www.domain.com</code></td></tr><tr><td>xxx</td><td>对二级域名为 xxx 的网址解析</td><td><code>xxx.domain.com</code></td></tr></tbody></table><ul><li>记录类型 （<em><strong>A,CNAME,TXT,NS,显性 URL ,隐性 URL</strong></em>）</li></ul><p><code>A</code> 记录：解析到具体的 <em>服务器 IP 地址</em> ；<code>CNAME</code> ：解析到另一域名（<strong>比如 CDN 的加速域名</strong>），<em>通过另一域名获取服务器 IP 地址</em> 。</p><p><code>显性 URL</code> 则是使用 301 跳转 <em>重定向</em> 域名，而 <code>隐性URL</code> 本质上只是一个 <em>嵌套 iframe</em> （一个是 DNS 服务器做重定向，一个是 DNS 服务器套一个网页）。<code>NS</code> 则是用来换 DNS 服务商时使用。</p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E6%B5%85%E8%B0%88%E7%BD%91%E7%AB%99%E6%B3%9B%E5%9F%9F%E5%90%8D/01.png' data-fancybox='default' data-caption='DNS 域名解析 - 记录类型'><img fancybox src="../../img/article/%E6%B5%85%E8%B0%88%E7%BD%91%E7%AB%99%E6%B3%9B%E5%9F%9F%E5%90%8D/01.png" alt="DNS 域名解析 - 记录类型"></a>        <span class='image-caption'>DNS 域名解析 - 记录类型</span>      </div></p></div><h2 id="二、SSL-泛域名证书申请">二、SSL 泛域名证书申请</h2><blockquote><p>支持 <strong>免费</strong> 泛域名证书申请的只有 Let’s Encrypt 了。</p></blockquote><p>有兴趣可以去其官网看看，每次申请可以获取三个月证书时间，所以此处借助工具：<a href="https://github.com/Neilpang/acme.sh">acme.sh</a></p><p>安装方法也非常简单，见其中文帮助文档：<a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E">acme.sh-说明</a> ，在本文中简单的记录一下：</p><h3 id="（1）安装-acme-sh">（1）安装 <a href="http://acme.sh">acme.sh</a></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl https://cdn.jsdelivr.net/gh/Neilpang/acme.sh/acme.sh | INSTALLONLINE=1  sh</span><br></pre></td></tr></table></figure><h3 id="（2）生成证书：DNS-方式">（2）生成证书：DNS 方式</h3><p>需要先登录 dnspod 获取 API 的 ID 和 Key 。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DP_Id=<span class="string">&quot;1234&quot;</span></span><br><span class="line"><span class="built_in">export</span> DP_Key=<span class="string">&quot;sADDsdasdgdsf&quot;</span></span><br><span class="line">acme.sh --issue --dns dns_dp -d domain.com -d *.domain.com</span><br></pre></td></tr></table></figure><h3 id="（3）安装证书">（3）安装证书</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d domain.com \</span><br><span class="line"> --key-file /etc/pki/nginx/domain.key \</span><br><span class="line"> --fullchain-file /etc/pki/nginx/fullchain.cer \</span><br><span class="line"> --reloadcmd <span class="string">&quot;service nginx force-reload&quot;</span></span><br></pre></td></tr></table></figure><h3 id="（4）更新证书">（4）更新证书</h3><blockquote><p>目前证书在 60 天以后会自动更新, 你无需任何操作。</p></blockquote><h3 id="（5）自动更新-acme-sh">（5）自动更新 <a href="http://acme.sh">acme.sh</a></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure><h2 id="三、CDN-泛域名分发">三、CDN 泛域名分发</h2><p>这里使用的是腾讯云的 CDN （阿里云也是可以的），前置条件：<strong>备案 + 验证</strong> 。</p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E6%B5%85%E8%B0%88%E7%BD%91%E7%AB%99%E6%B3%9B%E5%9F%9F%E5%90%8D/02.png' data-fancybox='default' data-caption='申请泛域名分发'><img fancybox src="../../img/article/%E6%B5%85%E8%B0%88%E7%BD%91%E7%AB%99%E6%B3%9B%E5%9F%9F%E5%90%8D/02.png" alt="申请泛域名分发"></a>        <span class='image-caption'>申请泛域名分发</span>      </div></p></div><p>除了需要验证外，其余的添加方法与普通 CDN 域名加速的设置项均相同。但是有一点需要注意：</p><p>全站 Https，泛域名的 SSL 证书 <strong>必须要部署到 CDN</strong> 上，否则 CDN 会用腾讯云的证书然后就证书不符报错啦。</p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/%E6%B5%85%E8%B0%88%E7%BD%91%E7%AB%99%E6%B3%9B%E5%9F%9F%E5%90%8D/03.png' data-fancybox='default' data-caption='部署证书（可以不开强制跳转）'><img fancybox src="../../img/article/%E6%B5%85%E8%B0%88%E7%BD%91%E7%AB%99%E6%B3%9B%E5%9F%9F%E5%90%8D/03.png" alt="部署证书（可以不开强制跳转）"></a>        <span class='image-caption'>部署证书（可以不开强制跳转）</span>      </div></p></div><h2 id="四、附录">四、附录</h2><h3 id="（1）CentOS-配置-Nginx">（1）CentOS 配置 Nginx</h3><h4 id="1-安装-Nginx">1.安装 Nginx</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><h4 id="2-启动-Nginx">2.启动 Nginx</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><h4 id="3-设为开机自启">3.设为开机自启</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure><h4 id="4-Nginx-配置信息">4.Nginx 配置信息</h4><ul><li>网站文件存放默认目录：<code>/usr/share/nginx/html</code></li><li>网站默认站点配置文件：<code>/etc/nginx/conf.d/default.conf</code></li><li>自定义站点配置文件：<code>/etc/nginx/conf.d/</code></li><li>全局配置文件：<code>/etc/nginx/nginx.conf</code></li></ul><h3 id="（2）Nginx-配置-Http-跳转-Https">（2）Nginx 配置 Http 跳转 Https</h3><blockquote><p>均修改全局配置文件 <code>nginx.conf</code> 。</p></blockquote><h4 id="1-开启-443-监听">1.开启 443 监听</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2 default_server;</span><br><span class="line">    listen       [::]:443 ssl http2 default_server;</span><br><span class="line">    server_name  inkss.cn;</span><br><span class="line">    root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;fullchain.cer&quot;;</span><br><span class="line">    ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;inkss.key&quot;;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Http-跳转-Https">2.Http 跳转 Https</h4><p>在监听 80 的函数内添加 <code>rewrite ^(.*)$ https://$host$1 permanent;</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  inkss.cn;</span><br><span class="line">    root         &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">    rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建</title>
      <link href="/blog/196d2ba7/"/>
      <url>/blog/196d2ba7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文偏向于记录备份，非新手向教程，仅供参考。 🐱</p></blockquote><p>先说搭建这个博客的原因：在搭建博客之前我的所有的文章都是存储在 <a href="https://github.com/inkss/markdown">inkss/markdown</a> 仓库中，直到某天 <strong>在投简历的时候发现有的要求填写博客链接</strong> ，掐指一算在玩腻饥荒后似乎还闲置着一个腾讯云的学生主机，索性自己折腾一个博客出来。而以简单快速为目的话，还是主推： <code>Hexo</code> 。</p><p>Hexo 可以帮忙生成全静态的网页，所以在存储位置上可以有：<code>Github Page、OSS 对象存储、云主机</code> 等多种选择。那么接下来就是研究一下如何使用这个框架，以及找一个好看顺心的主题（<s>然后连续几天沉迷调试主题不可自拔…</s>)。</p><h2 id="1-基础环境">1.基础环境</h2><p><strong>基础环境</strong>：<code>Git、Node、Hexo</code>；<strong>OS</strong> ：<code>Ubuntu 18.04 LTS</code> ；<strong>服务器</strong>：<code>CentOS 7.4</code> 。Git 和 Github 作为前置环境，本文不做重点阐述。Git 的安装命令：<code>sudo apt install git</code> 。</p><p>进入正文部分，这里的顺序是这样的：<code>NVM</code> → <code>Node.js</code> → <code>Hexo</code> 。</p><h3 id="1-1-安装-NVM">1.1 安装 NVM</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开终端，输入：</span></span><br><span class="line">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><h3 id="1-2-安装-Node">1.2 安装 Node</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开新的终端，输入：</span></span><br><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><h3 id="1-3-安装-Hexo">1.3 安装 Hexo</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开新终端，输入：</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>以上所有步骤就可以将 Hexo 安装到你的电脑上了，总耗时 1-2 min 。</p><blockquote><p>得益于某不可言的 BUFF 加持，在不作处理的情况下网速或能够让你绝望。两类选择：<strong>换源</strong> or <strong>代理</strong> 。</p><p>换源似乎是使用淘宝的 <code>cnpm</code> 源；虽然这里使用的是给终端设置代理：<a href="https://github.com/inkss/markdown/blob/master/Linux/%E7%BD%91%E7%AB%99/Shadowsocks%20%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86.md">Shadowsocks 设置终端代理</a> 。</p></blockquote><h2 id="2-Hexo-使用">2.Hexo 使用</h2><h3 id="2-1-基础命令">2.1 基础命令</h3><p>这部分内容以 Hexo 官方文档为准，这里记录一些最常用的。传送门：<a href="https://hexo.io/zh-cn/docs/commands">命令 | Hexo</a></p><ul><li>初始化：<code>hexo init &amp;&amp; npm install</code></li><li>生成博客：<code>hexo g</code></li><li>部署博客：<code>hexo d</code></li><li>清空缓存：<code>hexo clean</code></li><li>启动本地服务器：<code>hexo s</code></li><li>组合命令：<code>hexo clean &amp;&amp; hexo g -d</code></li></ul><p>首先，拿到 Hexo 后，先是 <strong>初始化</strong> 一个文件夹，建立基本的框架结构，然后用 <code>npm install</code> 安装一些依赖。目录结构如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml            <span class="comment"># 网站配置文件</span></span><br><span class="line">├── .gitignore             <span class="comment"># Git 忽略文件</span></span><br><span class="line">├── node_modules           <span class="comment"># 插件安装目录</span></span><br><span class="line">├── package.json           <span class="comment"># 描述插件</span></span><br><span class="line">├── package-lock.json      <span class="comment"># 描述插件 更详细</span></span><br><span class="line">├── scaffolds              <span class="comment"># 模板</span></span><br><span class="line">├── <span class="built_in">source</span>                 <span class="comment"># 资源</span></span><br><span class="line">└── themes                 <span class="comment"># 主题</span></span><br></pre></td></tr></table></figure><p>想必各位对 <code>.gitignore</code> 很眼熟吧，完全可以使用 <code>git init</code> 对这个文件夹初始化后上传到 Github 仓库。</p><p>而这样操作需要注意一点：一般主题文件多半是克隆自 Git 的，所以可能会出现嵌套的情况。可选的处理方案：</p><ul><li>将主题目录加入到忽略文件中</li><li>删除主题目录里的 <code>.git</code> 文件夹</li></ul><blockquote><p><strong>关于恢复</strong>：克隆仓库后，需要执行 <code>npm install --save</code> ，重新安装插件到 node_modules 目录中。</p></blockquote><h3 id="2-2-网站配置">2.2 网站配置</h3><p><strong>网站</strong> 配置文件：<code>_config.yml</code> ，官方配置文档传送门：<a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a></p><p>一般来说在该配置文件中只需要修改一些网站基本属性，下面记录一下指定主题和设置发布（部署）对象：</p><h4 id="2-2-1-修改主题类型">2.2.1 修改主题类型</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">pure</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-部署到-Github">2.2.2 部署到 Github</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxx/xxxxx</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-忽略解析指定的文件">2.2.3 忽略解析指定的文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="comment"># 忽略解析指定文件：比如 Github 仓库的 ReadMe.md 文件。</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：一些插件的属性设置也是在这个文件中配置的。</p></blockquote><h3 id="2-3-主题配置">2.3 主题配置</h3><blockquote><p>如果不是找到了一个看着还很舒服的主题，肯定也没有那么大的兴趣折腾博客了。</p></blockquote><p>这里使用的是 <code>Pure</code> ：原作者：<a href="https://github.com/cofess">cofess</a> 、主题：<a href="https://github.com/cofess/hexo-theme-pure">hexo-theme-pure</a> 。</p><h4 id="2-3-1-安装主题">2.3.1 安装主题</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在网站的根目录下执行</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:dmego/hexo-theme-pure.git theme/pure</span><br></pre></td></tr></table></figure><p>然后修改 <strong>网站配置</strong> 文件,修改主题：<code>theme: pure</code> 。</p><h4 id="2-3-2-安装插件">2.3.2 安装插件</h4><p>分为必装和可选两种吧，安装插件时终端目录需位于网站根目录下（Hexo 初始化的那个目录）。</p><ul><li>① 必装插件（这部分主题 ReadMe 文件中有提及）：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br><span class="line">npm install hexo-generator-json-content --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><hr><ul><li>② 可选插件（一些需要在 <strong>网站配置</strong> 文件中修改属性）。</li></ul><p><a href="https://github.com/rozbo/hexo-neat">hexo-neat</a>：压缩代码</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站配置文件 `_config.yml` 中添加：</span></span><br><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span> </span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/cometlj/hexo-translate-title">hexo-translate-title</a>：自动翻译文章标题到英文</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-translate-title --save</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站配置文件 `_config.yml` 中添加：</span></span><br><span class="line"><span class="comment"># translate</span></span><br><span class="line"><span class="attr">translate_title:</span></span><br><span class="line">  <span class="attr">translate_way:</span> <span class="string">google</span>    <span class="comment">#google | baidu | youdao</span></span><br><span class="line">  <span class="attr">youdao_api_key:</span> <span class="string">XXX</span></span><br><span class="line">  <span class="attr">youdao_keyfrom:</span> <span class="string">XXX</span></span><br><span class="line">  <span class="attr">is_need_proxy:</span> <span class="literal">true</span>     <span class="comment">#true | false</span></span><br><span class="line">  <span class="attr">proxy_url:</span> <span class="string">http://localhost:8123</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文章的永久链接格式（同样是网站配置文件）：</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:translate_title/</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/crimx/hexo-filter-github-emojis">hexo-filter-github-emojis</a>：支持 emoji 表情</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站配置文件 `_config.yml` 中添加：</span></span><br><span class="line"><span class="comment"># emoji</span></span><br><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">unicode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">    <span class="attr">display:</span> <span class="string">inline</span></span><br><span class="line">  <span class="attr">localEmojis:</span></span><br></pre></td></tr></table></figure><hr><ul><li>③ 部署到 Github 所必须的插件：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nom install request --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="2-3-3-配置主题">2.3.3 配置主题</h4><p>主题所在目录下也有一份 <code>_config.yml</code> 文件，这里称它为 <strong>主题配置</strong> 文件。</p><p>可以在此处对主题属性进行修改，附：图片类的资源可以直接写外链进去。</p><h2 id="3-自定义主题">3.自定义主题</h2><blockquote><p><strong>此部分内容仅供参考，或因主题变更已不适用。2018.10.08 补充。</strong></p></blockquote><h3 id="3-1-CSS-样式修改">3.1 CSS 样式修改</h3><p>主要是网页样式微调，改改字体什么的。</p><p><strong>文件地址：</strong> <code>themes/pure/source/css/style.css</code></p><h4 id="3-1-1-修改字体大小">3.1.1 修改字体大小</h4><p>默认的字体是 14px ，似乎有些小了，所以将其改为 16px 。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: -apple-system,system-ui,BlinkMacSystemFont,<span class="string">&quot;Segoe UI&quot;</span>,Roboto,<span class="string">&quot;Helvetica Neue&quot;</span>,Arial,<span class="string">&quot;PingFang SC&quot;</span>,<span class="string">&quot;Hiragino Sans GB&quot;</span>,<span class="string">&quot;Microsoft YaHei&quot;</span>,sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.42857</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-修改代码样式">3.1.2 修改代码样式</h4><p>原主题无法显示出这样的效果： <code>code</code> ，从 Github 扒的样式，这里对其补充。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.2em</span> <span class="number">0.3em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">27</span>,<span class="number">31</span>,<span class="number">35</span>,<span class="number">0.05</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-修改图形居中">3.1.3 修改图形居中</h4><p>原文章中图片没有居中，这里将图片的显示更改为居中。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-4-修改代码字体">3.1.4 修改代码字体</h4><p>Windows 下代码字体显示不是很美观，这里更改。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">kbd</span>,</span><br><span class="line">pre,</span><br><span class="line"><span class="selector-tag">samp</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;SFMono-Regular&quot;</span>,Consolas,<span class="string">&quot;Liberation Mono&quot;</span>,Menlo,Courier,monospace;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-恢复-referrer">3.2 恢复 referrer</h3><p>【已解决】详细见：<a href="https://github.com/cofess/hexo-theme-pure/issues/43">#43</a></p><h3 id="3-3-TOC-编号">3.3 TOC 编号</h3><p>TOC 编号，就是当展开目录时，原章节的目录内容附加了一次自动编号，如果文章本身存在着编号那么编号就重复了，所以此处更改为取消自动编号。</p><p><strong>文件地址：</strong> <code>themes/pure/layout/_partial/sidebar-toc.ejs</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;slimContent&quot;</span>&gt;</span><br><span class="line">    &lt;nav id=<span class="string">&quot;toc&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;article-toc&quot;</span>&gt;</span><br><span class="line">      &lt;h3 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;toc-title&quot;</span>&gt;&lt;%= __(<span class="string">&#x27;article.catalogue&#x27;</span>) %&gt;&lt;/h3&gt;</span><br><span class="line">      &lt;%- toc(post.content,&#123;<span class="attr">list_number</span>: <span class="literal">false</span>&#125;) %&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-回到顶部">3.4 回到顶部</h3><p>长文章怎么能没有一个回到顶部的功能，然而恰巧主题没有，那么添加一个吧（位于右下角）。</p><p><strong>文件地址：</strong> <code>themes/pure/layout/_commonn/script.ejs</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;go-top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"><span class="selector-id">#go-top</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">40px</span>;<span class="attribute">height</span>:<span class="number">36px</span>;</span><br><span class="line"> <span class="attribute">background-color</span>:<span class="number">#777</span>;</span><br><span class="line"> <span class="attribute">position</span>:relative;</span><br><span class="line"> <span class="attribute">border-radius</span>:<span class="number">2px</span>;</span><br><span class="line"> <span class="attribute">position</span>:fixed;<span class="attribute">right</span>:<span class="number">10px</span>;<span class="attribute">bottom</span>:<span class="number">60px</span>;</span><br><span class="line"> <span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#go-top</span>:after &#123;</span><br><span class="line"> content:<span class="string">&quot; &quot;</span>;</span><br><span class="line"> <span class="attribute">position</span>:absolute;<span class="attribute">left</span>:<span class="number">14px</span>;<span class="attribute">top</span>:<span class="number">14px</span>;</span><br><span class="line"> <span class="attribute">border-top</span>:<span class="number">2px</span> solid <span class="number">#fff</span>;<span class="attribute">border-right</span>:<span class="number">2px</span> solid <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">12px</span>;<span class="attribute">height</span>:<span class="number">12px</span>;</span><br><span class="line"> <span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#go-top</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">background-color</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> top=$(<span class="string">&quot;#go-top&quot;</span>);</span><br><span class="line">  $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ($(<span class="built_in">window</span>).scrollTop() &gt; <span class="number">300</span>) ? top.show(<span class="number">300</span>) : top.hide(<span class="number">200</span>);</span><br><span class="line">    $(<span class="string">&quot;#go-top&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">&#x27;body,html&#x27;</span>).animate(&#123;<span class="attr">scrollTop</span>:<span class="number">0</span>&#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-5-数学公式支持">3.5 数学公式支持</h3><p>需要先更换 Hexo 的渲染引擎：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure><p>接着在网站配置文件末尾添加以下内容：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown_it_plus:</span></span><br><span class="line">    <span class="attr">highlight:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">langPrefix:</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">“”‘’</span></span><br><span class="line">    <span class="attr">plugins:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">&#x27;@iktakahiro/markdown-it-katex&#x27;</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>最后需要修改主题文件，更新 Katex 版本。</p><p><strong>文件地址：</strong> <code>themes/pure/layout/_commonn/plugin.ejs</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (page.mathjax) &#123; %&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/katex.min.css&quot;</span> integrity=<span class="string">&quot;sha384-D+9gmBxUQogRLqvARvNLmA9hS2x//eK1FhVb9PiU86gmcrBrJAQT8okdJ4LMp2uv&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;</span><br><span class="line">  &lt;script defer src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/katex.min.js&quot;</span> integrity=<span class="string">&quot;sha384-483A6DwYfKeDa0Q52fJmxFXkcPCFfnXMoXblOkJ4JcA8zATN6Tm78UNL72AKk+0O&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="4-网站优化">4.网站优化</h2><blockquote><p>这部分内容将会涉及：自定义域名解析、CDN 分发、OSS 对象存储、Https 加密链接等。</p><p>本博客所使用的所有服务均来自于腾讯云。😘</p></blockquote><h3 id="4-1-自定义域名解析">4.1 自定义域名解析</h3><p>Github 给的默认域名形如 <code>xxxx.github.io</code> 的样式，如果拥有自己的域名话就可以对 DNS 设置一条指向该域名的 CNAME 解析。此外在网站的 <code>source</code> 目录下也需要放置一个文件：<code>CNAME</code> ，内容上只需要填写你的个人域名。</p><h3 id="4-2-CDN-分发">4.2 CDN 分发</h3><p>Github Page 的服务器毕竟不在国内（查过图片的 CDN 发现是来自日本的），虽然国外访问速度还好，但是国内访问速度就很悲伤了。不过国外的访问速度也不能浪费，所以上文的 DNS 记录就分为国内、国外两个：照顾所有位置的访问速度。</p><blockquote><p>腾讯云的 CDN 似乎有 10G 免费额度，付费额度：100GB 20元/6个月。</p></blockquote><h4 id="4-2-1-添加域名">4.2.1 添加域名</h4><p>申请 CDN 时，有两个需要填写的：<strong>源站类型</strong> 和 <strong>域名</strong> 。</p><p>域名自然是需要加速的域名，而源站类型则有以下几种：<em>源站 IP</em> 、<em>源站域名</em> 、 <em>对象存储</em> 。</p><p><strong>对象存储</strong> 只能是腾讯云的，这里先不展开；<strong>源站域名</strong> 的话有一个前置要求：需要备案。</p><p>所以最方便的莫过于选择 <strong>源站 IP</strong> ，IP 的获取方法是用 <code>ping</code> 命令访问 Github 给你的域名后得到的。</p><p>当然，如果有自己的云主机，此处填写自己的主机 IP 也是可以的，本博客便是这样做的：好处是如果访问链接没有命中 CDN ，国内服务器的访问速度也比国外较快（回源时的时间消耗减少），同时 CDN 获取源站信息也有速度优势。</p><h4 id="4-2-2-缓存配置">4.2.2 缓存配置</h4><p>另外一个需要关注的就是：<strong>缓存配置</strong> （缓存过期配置）。</p><p>Hexo 生成的网页是全静态的，为了提高 CDN 命中率，可以把全站缓存的时间设置的相对久一些。</p><h3 id="4-3-Https-链接">4.3 Https 链接</h3><p>Github <strong>本身是支持</strong> 设置 Https 链接的，证书由 Github 自动颁发、续期。不过需要手动开启：<code>Enforce HTTPS</code></p><div class="gallery " data-group='default'><p><div class='fancybox'>        <a class='fancybox' pjax-fancybox href='../../img/article/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.png' data-fancybox='default' data-caption='Github 开启 Https 链接'><img fancybox src="../../img/article/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.png" alt="Github 开启 Https 链接"></a>        <span class='image-caption'>Github 开启 Https 链接</span>      </div></p></div><p>此外，如果使用了和本博客类似的手段：DNS 根据 IP 指向不同域名的话，<strong>在访问者位于国内时，仍需要配置一个证书</strong>。原因是国内的 IP 被 DNS 指向了 CDN 域名了，没有指向 Github ，那么 Github 给的证书便是无效不起作用，这里有两种选择：</p><ul><li>没有云主机的可以通过 CDN 开启强制跳转 HTTPS （国外访问 Github 会帮助你自动跳转）。</li><li>有云主机的设置服务器的 HTTP 强制跳转 HTTPS ，也可以同时勾选 CDN 的强制跳转。</li></ul><blockquote><p>在腾讯云可以免费申请到一年的 SSL 证书，一般一至两天申请便可以批下来。云主机配置可以参看这篇文章：<a href="https://github.com/inkss/markdown/blob/master/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8/CentOS%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.md">CentOS PHP 环境配置 [LAMP]</a></p></blockquote><h3 id="4-4-OSS-对象存储">4.4 OSS 对象存储</h3><p>如果以减少成本为目的的话，最好的选择不是云主机而是 <strong>对象存储</strong> 。关于免费额度：<strong><code>50GB 空间、10 GB 流量/CDN 回源、100 万次请求</code></strong>。</p><p>如果是只当图床使用，一般默认的配置即可；如果是当静态网页使用需要先手动开启这个功能，然后把域名 <strong>解析到对象存储分配给你的域名上</strong> 。此外对象存储也支持 CDN ，不过同样也需要手动开启。最后的最后还需要将 Hexo 网页的部署对象换成腾讯云的 OSS （有相关插件）。</p><blockquote><p>备注：记得给对象存储或者 CDN 开启防盗链。⚓️</p></blockquote><h2 id="5-Hexo-部署">5.Hexo 部署</h2><blockquote><p>这部分单独拿出来说，因为现在一直在做一个假设：当服务器 <strong>宕机/停止续费</strong> 后如何保证网站的正常访问。</p><p>此外还有一个需求就是：降低网站总开销（最大的开支应该会出自服务器上）。</p></blockquote><h3 id="5-1-域名解析-DNS">5.1 域名解析 DNS</h3><p>先谈谈防止宕机，前面域名部分提到了现在对域名是直接解析，依靠 IP 地址指向不同的域名。</p><p>国外流量指向 Github Page ，这部分不用担心；而国内流量则被指向到腾讯云的 CDN，所以需要修改这里。</p><blockquote><p>此处开支：.cn 域名 35 元/年、DNS 解析套餐免费。</p></blockquote><h3 id="5-2-CDN-热备">5.2 CDN 热备</h3><p>CDN 的自有源支持热备，<ins>也就是主源宕机，热备回源</ins>。那么重点也就是这儿了：设置热备源：<code>xxxx.github.io</code> 。</p><blockquote><p>此处开支：免费 10GB 0元/月、付费 100GB 20元/6月。</p></blockquote><h3 id="5-3-对象存储">5.3 对象存储</h3><p>主机宕机的问题解决了，但是如果主机停止续费呢，CDN 从 Github 回源又降低了速度，所以就考虑了 OSS 。</p><p>此部分的大标题叫做：Hexo 部署，既然是部署自然也就想到部署到对象存储里。需要插件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-cos-enhanced --save</span><br></pre></td></tr></table></figure><p>使用方法见：<a href="https://github.com/75k/hexo-deployer-cos-enhanced/blob/master/README.md">hexo-deployer-cos-enhanced</a> 。相关额度如下：</p><table><thead><tr><th>资源类型</th><th>资源子类型</th><th>每月免费额度</th></tr></thead><tbody><tr><td>存储空间</td><td>存储空间</td><td>50 GB</td></tr><tr><td>流量</td><td>外网下行流量</td><td>10 GB</td></tr><tr><td>流量</td><td>腾讯云 CDN 回源流量</td><td>10 GB</td></tr><tr><td>请求</td><td>读请求</td><td>100 万次</td></tr><tr><td>请求</td><td>写请求</td><td>100 万次</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Shell 设置 Proxy</title>
      <link href="/blog/f44c3b52/"/>
      <url>/blog/f44c3b52/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Git-Proxy">一、Git Proxy</h2><p>如果不需要终端下全局代理，仅仅只是代理 Git 相关的命令，则有一个简单的方案：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="二、Terminal-Proxy">二、Terminal Proxy</h2><p>需要修改终端（Shell）的环境变量，修改（相应的）文件并追加以下内容：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=socks5://127.0.0.1:1080</span><br><span class="line"><span class="built_in">export</span> https_proxy=socks5://127.0.0.1:1080</span><br><span class="line"><span class="comment"># 注意：wget 不支持的协议类型 “socks5”</span></span><br><span class="line"><span class="comment"># bashrc or zshrc</span></span><br></pre></td></tr></table></figure><p>然后接下来只需要使其生效即可：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc <span class="comment"># 或者 .zshrc</span></span><br></pre></td></tr></table></figure><p>可以使用 curl 命令进行测试：<code>curl ip.cn</code></p><h2 id="三、Other">三、Other</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxxx@xxx.com&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxxx@xxx.com&quot;</span></span><br><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 管理私钥</title>
      <link href="/blog/d71b1012/"/>
      <url>/blog/d71b1012/</url>
      
        <content type="html"><![CDATA[<blockquote><p>保留私钥到各个平台，替换使用。</p></blockquote><h2 id="一、添加私钥">一、添加私钥</h2><p>1.Linux 平台：打开终端到 id_rsa 文件所在目录</p><p>2.Windows 平台：id_rsa 文件所在目录右键打开 Git Bash Here</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 终端执行</span></span><br><span class="line">ssh-add id_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示：Could not open a connection to your authentication agent</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行下列语句</span></span><br><span class="line">ssh-agent bash  # or zsh</span><br></pre></td></tr></table></figure><h2 id="二、测试链接">二、测试链接</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 name 与 email</span></span><br><span class="line">git config --global user.name &quot;name&quot;</span><br><span class="line">git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><h2 id="三、新建-config-文件">三、新建 config 文件</h2><blockquote><p>一般情况下无需执行本流程，此步骤适用于主动指定的情况。</p></blockquote><p>文件内容如下，需要注意的是：<code>IdentityFile</code> 指向 id_rsa 文件,不一定非要放在 .ssh 目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile /home/yourname/Documents/ssh/id_rsa</span><br><span class="line">User yourname</span><br></pre></td></tr></table></figure><p>复制该文件到 ssh 目录：</p><p>1.Linux 平台：<code>/home/yourname/.ssh/</code></p><p>2.Windows 平台：<code>/c/Users/yourname/.ssh/</code></p><h2 id="四、附录">四、附录</h2><p>对于 Linux 系统，如果是直接复制 config 和 id_rsa 文件多半会收到下列提示：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Bad owner or permissions on ...</span><br><span class="line">permissions are too open error</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 很明显，是权限的问题使得私钥未被接收，所以修改这两个文件的权限即可：</span></span><br><span class="line">chmod 600 ~/.ssh/config</span><br><span class="line">chmod 600 ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>相关权限列表：</p><table><thead><tr><th style="text-align:center">目录</th><th style="text-align:center">文件</th><th style="text-align:center">权限</th></tr></thead><tbody><tr><td style="text-align:center">.ssh</td><td style="text-align:center"></td><td style="text-align:center">700</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">authorized_keys</td><td style="text-align:center">600</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">id_rsa</td><td style="text-align:center">600</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">id_rsa.pub</td><td style="text-align:center">644</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jrebel 反代激活</title>
      <link href="/blog/89be439/"/>
      <url>/blog/89be439/</url>
      
        <content type="html"><![CDATA[<p>JRebel 的社区激活取消了，不能用分享到脸书的方式激活插件了，有点桑心。搜索了一番激活方法，于此记录。</p><h2 id="1-准备工具">1 准备工具</h2><ul><li><p>在 <a href="https://github.com/ilanyu/ReverseProxy">ilanyu/ReverseProxy</a> 下载工具，相应操作系统选择自己对应的版本。</p></li><li><p>在 <a href="https://www.guidgenerator.com/online-guid-generator.aspx">Online GUID Generator</a> 获取一串 GUID，记录之。</p></li><li><p>IDEA 上在线下载 JRebel 插件。</p></li></ul><h2 id="2-激活">2 激活</h2><ul><li><p>运行步奏一下载的程序（如果端口冲突参考 GitHub 文档使用帮助）。</p></li><li><p>修改本机 Hosts 文件，对于 Windows 目录为：<code>C:\Windows\System32\drivers\etc</code></p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 任意添加一个网站代理到本地回环上</span></span><br><span class="line">127.0.0.1 omg.cc</span><br></pre></td></tr></table></figure><ul><li>IDEA 中打开 JRebel 的激活界面。URL 处填写 <code>http://omg.cc:8888/你找的GUID</code></li></ul><h2 id="3-以上">3 以上</h2><p>哦，记得将激活类型改为 work offline，离线 180 天，不然每次开还是有些麻烦的。</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
